{"file_contents":{"README.md":{"content":"This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n","size_bytes":1458},"SECURITY_REQUIREMENTS.md":{"content":"# Database Security Requirements\n\n## Critical Security Policies Required for Supabase\n\nYour authentication system is now secure at the application level, but you **MUST** verify these database-level security policies are in place to prevent role escalation attacks:\n\n### 1. Row Level Security (RLS) on `profiles` table\n\n**CRITICAL**: Users must NOT be able to update their own `user_type` field.\n\n```sql\n-- Enable RLS on profiles table\nALTER TABLE profiles ENABLE ROW LEVEL SECURITY;\n\n-- Allow users to read their own profile\nCREATE POLICY \"Users can view own profile\" ON profiles\n  FOR SELECT USING (auth.uid() = id);\n\n-- Allow users to update their profile EXCEPT user_type\nCREATE POLICY \"Users can update own profile except user_type\" ON profiles\n  FOR UPDATE USING (auth.uid() = id);\n\n-- Prevent users from updating user_type (only service role can)\nCREATE POLICY \"Prevent user_type updates\" ON profiles\n  FOR UPDATE USING (false) \n  WITH CHECK (\n    -- Only allow if user_type is not being changed\n    (SELECT user_type FROM profiles WHERE id = auth.uid()) = NEW.user_type\n  );\n```\n\n### 2. Admin Role Assignment Security\n\n**CRITICAL**: Only authorized personnel should be able to create admin accounts.\n\n```sql\n-- Constraint to limit valid user types\nALTER TABLE profiles ADD CONSTRAINT valid_user_types \n  CHECK (user_type IN ('passenger', 'driver', 'admin'));\n\n-- Default new users to passenger\nALTER TABLE profiles ALTER COLUMN user_type SET DEFAULT 'passenger';\n\n-- Function to promote users to admin (only callable by service role)\nCREATE OR REPLACE FUNCTION promote_to_admin(user_id UUID)\nRETURNS void\nLANGUAGE plpgsql\nSECURITY DEFINER\nAS $$\nBEGIN\n  -- Only service role can execute this\n  IF current_setting('role') != 'service_role' THEN\n    RAISE EXCEPTION 'Unauthorized: Only service role can promote to admin';\n  END IF;\n  \n  UPDATE profiles \n  SET user_type = 'admin', updated_at = NOW()\n  WHERE id = user_id;\nEND;\n$$;\n```\n\n### 3. Driver Profile Security\n\n```sql\n-- Enable RLS on driver_profiles\nALTER TABLE driver_profiles ENABLE ROW LEVEL SECURITY;\n\n-- Allow drivers to read/update their own profile\nCREATE POLICY \"Drivers can manage own profile\" ON driver_profiles\n  FOR ALL USING (\n    auth.uid() = user_id AND \n    (SELECT user_type FROM profiles WHERE id = auth.uid()) = 'driver'\n  );\n\n-- Allow admins to read all driver profiles\nCREATE POLICY \"Admins can view all driver profiles\" ON driver_profiles\n  FOR SELECT USING (\n    (SELECT user_type FROM profiles WHERE id = auth.uid()) = 'admin'\n  );\n```\n\n### 4. Additional Security Measures\n\n#### Audit Logging\n```sql\n-- Create audit log for user_type changes\nCREATE TABLE user_type_audit (\n  id SERIAL PRIMARY KEY,\n  user_id UUID NOT NULL,\n  old_user_type TEXT,\n  new_user_type TEXT,\n  changed_by UUID,\n  changed_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Trigger to log user_type changes\nCREATE OR REPLACE FUNCTION audit_user_type_changes()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.user_type != NEW.user_type THEN\n    INSERT INTO user_type_audit (user_id, old_user_type, new_user_type, changed_by)\n    VALUES (NEW.id, OLD.user_type, NEW.user_type, auth.uid());\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER user_type_audit_trigger\n  AFTER UPDATE ON profiles\n  FOR EACH ROW\n  EXECUTE FUNCTION audit_user_type_changes();\n```\n\n## Verification Checklist\n\n- [ ] RLS is enabled on `profiles` table\n- [ ] Users cannot update their own `user_type`\n- [ ] Only service role can promote users to admin\n- [ ] `user_type` has proper constraints (passenger|driver|admin)\n- [ ] Default user type is 'passenger'\n- [ ] Driver profiles are properly protected\n- [ ] Audit logging is in place\n\n## Testing Your Security\n\n1. **Create a test user** through the registration flow\n2. **Attempt to update user_type** directly via Supabase dashboard (should fail)\n3. **Verify admin access** is properly restricted\n4. **Check audit logs** show all changes\n\n## Admin User Creation\n\nTo create your first admin user safely:\n\n1. Create a regular account through the app\n2. Use the Supabase service role to promote them:\n   ```sql\n   SELECT promote_to_admin('user-uuid-here');\n   ```\n\n## ⚠️ CRITICAL WARNING\n\nWithout these database policies in place, users can bypass application security and grant themselves admin access. **Verify these policies are implemented before deploying to production.**","size_bytes":4346},"middleware.ts":{"content":"import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function middleware(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Refresh session if expired - required for Server Components\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  // Define protected routes\n  const protectedRoutes = {\n    passenger: ['/main'],\n    driver: ['/driver-profile', '/driver-dashboard'],\n    admin: ['/admin', '/onlyforadmin'], // CRITICAL: Protect admin PIN page\n    authenticated: ['/profile'] // Routes accessible to any authenticated user\n  }\n\n  const currentPath = request.nextUrl.pathname\n  \n  // Check if the current path requires authentication\n  const isProtectedRoute = Object.values(protectedRoutes).flat().includes(currentPath) ||\n    currentPath.startsWith('/admin')\n\n  // If user is not authenticated and trying to access protected route\n  if (!user && isProtectedRoute) {\n    // Redirect to appropriate login page\n    if (currentPath.startsWith('/driver') || currentPath === '/driver-profile') {\n      return NextResponse.redirect(new URL('/auth/driver/login', request.url))\n    } else if (currentPath.startsWith('/admin')) {\n      return NextResponse.redirect(new URL('/auth/passenger/login?message=Admin access restricted', request.url))\n    } else {\n      return NextResponse.redirect(new URL('/auth/passenger/login', request.url))\n    }\n  }\n\n  // If user is authenticated, check role-based access\n  if (user && isProtectedRoute) {\n    try {\n      // Get user profile to check role\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('user_type')\n        .eq('id', user.id)\n        .single()\n\n      const userType = profile?.user_type\n\n      // Check role-based access - Apply to all admin routes\n      if ((currentPath.startsWith('/admin') || protectedRoutes.admin.includes(currentPath)) && userType !== 'admin') {\n        return NextResponse.redirect(new URL('/unauthorized', request.url))\n      }\n\n      if (protectedRoutes.driver.includes(currentPath) && userType !== 'driver') {\n        return NextResponse.redirect(new URL('/unauthorized', request.url))\n      }\n\n      if (protectedRoutes.passenger.includes(currentPath) && userType !== 'passenger') {\n        return NextResponse.redirect(new URL('/unauthorized', request.url))\n      }\n\n      // Allow any authenticated user to access /profile\n      if (currentPath === '/profile') {\n        // This is handled by the authenticated routes - allow access\n      }\n\n      // Redirect to appropriate dashboard if user tries to access wrong auth pages\n      if (currentPath.startsWith('/auth/') && user) {\n        switch (userType) {\n          case 'passenger':\n            return NextResponse.redirect(new URL('/main', request.url))\n          case 'driver':\n            return NextResponse.redirect(new URL('/driver-profile', request.url))\n          case 'admin':\n            return NextResponse.redirect(new URL('/admin', request.url))\n        }\n      }\n    } catch (error) {\n      // If there's an error fetching profile, redirect to login\n      return NextResponse.redirect(new URL('/auth/passenger/login', request.url))\n    }\n  }\n\n  return supabaseResponse\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n}","size_bytes":4284},"next.config.js":{"content":"/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  swcMinify: true,\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'images.pexels.com',\n      },\n      {\n        protocol: 'https',\n        hostname: 'via.placeholder.com',\n      },\n    ],\n    formats: ['image/webp', 'image/avif'],\n  },\n  experimental: {\n    optimizeCss: true,\n  },\n  // Allow all hosts for Replit proxy\n  allowedDevOrigins: ['*', '127.0.0.1', 'localhost'],\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'ALLOWALL',\n          },\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n          {\n            key: 'Referrer-Policy',\n            value: 'origin-when-cross-origin',\n          },\n          {\n            key: 'Cache-Control',\n            value: 'no-cache, no-store, must-revalidate',\n          },\n        ],\n      },\n    ];\n  },\n};\n\nmodule.exports = nextConfig;","size_bytes":1065},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":82},"replit.md":{"content":"# Ryde5 Ride Booking Application\n\n## Overview\nA Next.js-based ride booking application called \"Ryde5\" that allows users to book rides as passengers or register as drivers. The application features a modern UI with booking interfaces, payment systems, admin dashboards, and tracking capabilities.\n\n## Project Architecture\n- **Framework**: Next.js 14.2 with TypeScript\n- **Styling**: Tailwind CSS with custom components\n- **UI Components**: Custom components with Lucide React icons\n- **Forms**: React Hook Form with Zod validation\n- **Charts**: Chart.js for analytics\n- **Maps**: Google Maps integration (@googlemaps/js-api-loader)\n- **Animations**: Framer Motion\n\n## Current State\n- ✅ Dependencies installed and configured\n- ✅ Next.js configured for Replit environment (port 5000, 0.0.0.0 host)\n- ✅ Workflow configured and running\n- ✅ Deployment configuration set up for production\n- ✅ Cross-origin and proxy issues resolved\n\n## Key Features\n- Landing page with passenger/driver selection\n- Authentication flows for both passengers and drivers\n- Booking interface with location selection\n- Driver tracking and ride confirmation\n- Payment processing\n- Admin dashboard with analytics\n- User profiles and driver profiles\n- Rating and review system\n\n## Recent Changes (September 21, 2025)\n- ✅ Fresh GitHub import setup completed\n- ✅ Installed all project dependencies via npm install\n- ✅ Configured Next.js for Replit environment (host 0.0.0.0, port 5000)\n- ✅ Updated package.json dev script for proper host binding\n- ✅ Fixed Next.js configuration for image optimization and cross-origin issues\n- ✅ Set up workflow for frontend server running on port 5000\n- ✅ Configured deployment for autoscale with npm build/start\n- ✅ Added Supabase integration with graceful fallback for missing credentials\n- ✅ Fixed middleware to handle missing Supabase environment variables\n- ✅ Added cache-control headers for Replit iframe compatibility\n\n## Development\n- Server runs on port 5000 with host 0.0.0.0 for Replit compatibility\n- Hot reload enabled for development\n- TypeScript with strict mode enabled\n\n## Deployment\n- Configured for autoscale deployment\n- Build: `npm run build`\n- Start: `npm start`\n- Optimized for static export capabilities\n\n## Known Issues\n- Minor image aspect ratio warnings (cosmetic)\n- Some deprecated @next/font package warnings (non-critical)\n- Supabase authentication disabled due to missing NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables\n\n## Environment Setup Required\nTo enable full functionality, the following Supabase environment variables need to be configured:\n- NEXT_PUBLIC_SUPABASE_URL: Your Supabase project URL\n- NEXT_PUBLIC_SUPABASE_ANON_KEY: Your Supabase anonymous key\n\nWithout these variables, the app runs with authentication middleware disabled.","size_bytes":2837},"tailwind.config.js":{"content":"/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          50: '#fff7ed',\n          100: '#ffedd5',\n          200: '#fed7aa',\n          300: '#fdba74',\n          400: '#fb923c',\n          500: '#FFA500', // Main brand color\n          600: '#ea580c',\n          700: '#c2410c',\n          800: '#9a3412',\n          900: '#7c2d12',\n        },\n        gray: {\n          50: '#f9fafb',\n          100: '#f3f4f6',\n          200: '#e5e7eb',\n          300: '#d1d5db',\n          400: '#9ca3af',\n          500: '#6b7280',\n          600: '#4b5563',\n          700: '#374151',\n          800: '#1f2937',\n          900: '#111827',\n        },\n      },\n      fontFamily: {\n        sans: ['Raleway', 'system-ui', 'sans-serif'],\n      },\n      animation: {\n        'fade-in': 'fadeIn 0.5s ease-in-out',\n        'slide-up': 'slideUp 0.3s ease-out',\n        'pulse-ring': 'pulseRing 2s infinite',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(100%)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n        pulseRing: {\n          '0%': { transform: 'scale(0.33)', opacity: '1' },\n          '80%, 100%': { transform: 'scale(2.33)', opacity: '0' },\n        },\n      },\n    },\n  },\n  plugins: [],\n};","size_bytes":1572},"app/globals.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 0, 0, 0;\n  --background-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --foreground-rgb: 255, 255, 255;\n    --background-rgb: 0, 0, 0;\n  }\n}\n\n* {\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\nhtml,\nbody {\n  max-width: 100vw;\n  overflow-x: hidden;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: rgb(var(--background-rgb));\n  font-family: var(--font-raleway), system-ui, sans-serif;\n}\n\na {\n  color: inherit;\n  text-decoration: none;\n}\n\n@media (prefers-color-scheme: dark) {\n  html {\n    color-scheme: dark;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #a8a8a8;\n}\n\n/* Loading spinner */\n.spinner {\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid #FFA500;\n  border-radius: 50%;\n  width: 20px;\n  height: 20px;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n/* Focus styles for accessibility */\n.focus-visible:focus-visible {\n  outline: 2px solid #FFA500;\n  outline-offset: 2px;\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes pulseRing {\n  0% {\n    transform: scale(0.33);\n    opacity: 1;\n  }\n  80%, 100% {\n    transform: scale(2.33);\n    opacity: 0;\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n.animate-pulse-ring {\n  animation: pulseRing 2s infinite;\n}\n\n/* Map container */\n.map-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.map-container .gm-style {\n  font-family: var(--font-raleway), system-ui, sans-serif;\n}\n\n/* Custom button styles */\n.btn-primary {\n  @apply bg-primary-500 hover:bg-primary-600 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;\n}\n\n.btn-secondary {\n  @apply bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2;\n}\n\n.btn-outline {\n  @apply border border-primary-500 text-primary-500 hover:bg-primary-500 hover:text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;\n}\n\n/* Form styles */\n.form-input {\n  @apply block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm;\n}\n\n.form-label {\n  @apply block text-sm font-medium text-gray-700 mb-1;\n}\n\n/* Card styles */\n.card {\n  @apply bg-white rounded-lg shadow-sm border border-gray-200 p-6;\n}\n\n/* Responsive utilities */\n@media (max-width: 640px) {\n  .container {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n}\n\n/* High contrast mode support */\n@media (prefers-contrast: high) {\n  .btn-primary {\n    border: 2px solid currentColor;\n  }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n  *,\n  *::before,\n  *::after {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}","size_bytes":3695},"app/layout.tsx":{"content":"import type { Metadata } from 'next';\nimport { Raleway } from 'next/font/google';\nimport './globals.css';\n\nconst raleway = Raleway({ \n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-raleway',\n});\n\nexport const metadata: Metadata = {\n  title: {\n    default: 'Ryde5 - Premium Ride Booking Service',\n    template: '%s | Ryde5',\n  },\n  description: 'Book premium rides with Ryde5. Safe, reliable, and comfortable transportation at your fingertips.',\n  keywords: ['ride booking', 'taxi', 'transportation', 'ride sharing', 'Ryde5'],\n  authors: [{ name: 'Ryde5 Team' }],\n  creator: 'Ryde5',\n  publisher: 'Ryde5',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n  metadataBase: new URL('https://ryde5.com'),\n  alternates: {\n    canonical: '/',\n  },\n  openGraph: {\n    type: 'website',\n    locale: 'en_US',\n    url: 'https://ryde5.com',\n    title: 'Ryde5 - Premium Ride Booking Service',\n    description: 'Book premium rides with Ryde5. Safe, reliable, and comfortable transportation at your fingertips.',\n    siteName: 'Ryde5',\n    images: [\n      {\n        url: '/og-image.jpg',\n        width: 1200,\n        height: 630,\n        alt: 'Ryde5 - Premium Ride Booking Service',\n      },\n    ],\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Ryde5 - Premium Ride Booking Service',\n    description: 'Book premium rides with Ryde5. Safe, reliable, and comfortable transportation at your fingertips.',\n    images: ['/og-image.jpg'],\n  },\n  robots: {\n    index: true,\n    follow: true,\n    googleBot: {\n      index: true,\n      follow: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n  verification: {\n    google: 'your-google-verification-code',\n  },\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" className={raleway.variable}>\n      <head>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n        <meta name=\"theme-color\" content=\"#FFA500\" />\n      </head>\n      <body className={`${raleway.className} antialiased`}>\n        {children}\n      </body>\n    </html>\n  );\n}","size_bytes":2281},"app/page.tsx":{"content":"import type { Metadata } from 'next';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { ArrowRight, Users, Car } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\nimport { Card, CardContent } from '@/components/ui/Card';\n\nexport const metadata: Metadata = {\n  title: 'Choose Your Ryde5 Experience',\n  description: 'Whether you\\'re looking to ride or drive, Ryde5 has got you covered. Join thousands of satisfied customers.',\n};\n\nexport default function LandingPage() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col\">\n      <header className=\"container mx-auto px-4 py-6\">\n        <Image \n          src=\"/logo.png\" \n          alt=\"Ryde5 Logo\" \n          width={180} \n          height={35} \n          priority \n          className=\"object-contain\"\n        />\n      </header>\n\n      <main className=\"flex-1 container mx-auto px-4 py-12\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-6 leading-tight\">\n            Choose Your Ryde5 Experience\n          </h1>\n          <p className=\"text-xl text-gray-300 mb-12 max-w-2xl mx-auto\">\n            Whether you&apos;re looking to ride or drive, we&apos;ve got you covered with premium transportation solutions\n          </p>\n\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <Card className=\"bg-white/10 border-0 hover:bg-white/20 transition-all duration-300 transform hover:scale-105\">\n              <CardContent className=\"p-8\">\n                <div className=\"mb-6\">\n                  <Users className=\"w-16 h-16 text-primary-500 mx-auto\" />\n                </div>\n                <h2 className=\"text-2xl font-semibold text-white mb-4\">Ride with Us</h2>\n                <p className=\"text-gray-300 mb-8 leading-relaxed\">\n                  Get to your destination safely and comfortably with our trusted drivers. \n                  Premium service at competitive prices.\n                </p>\n                <Link href=\"/auth/passenger/login\">\n                  <Button className=\"w-full bg-primary-500 hover:bg-primary-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center\">\n                    Continue as Passenger\n                    <ArrowRight className=\"w-5 h-5 ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white/10 border-0 hover:bg-white/20 transition-all duration-300 transform hover:scale-105\">\n              <CardContent className=\"p-8\">\n                <div className=\"mb-6\">\n                  <Car className=\"w-16 h-16 text-primary-500 mx-auto\" />\n                </div>\n                <h2 className=\"text-2xl font-semibold text-white mb-4\">Drive with Us</h2>\n                <p className=\"text-gray-300 mb-8 leading-relaxed\">\n                  Turn your car into an income source and be your own boss. \n                  Flexible hours, competitive earnings.\n                </p>\n                <Link href=\"/auth/driver/login\">\n                  <Button className=\"w-full bg-primary-500 hover:bg-primary-600 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 flex items-center justify-center\">\n                    Continue as Driver\n                    <ArrowRight className=\"w-5 h-5 ml-2\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n            <div className=\"text-white\">\n              <div className=\"text-3xl font-bold text-primary-500 mb-2\">10K+</div>\n              <div className=\"text-gray-300\">Happy Customers</div>\n            </div>\n            <div className=\"text-white\">\n              <div className=\"text-3xl font-bold text-primary-500 mb-2\">5K+</div>\n              <div className=\"text-gray-300\">Trusted Drivers</div>\n            </div>\n            <div className=\"text-white\">\n              <div className=\"text-3xl font-bold text-primary-500 mb-2\">4.9★</div>\n              <div className=\"text-gray-300\">Average Rating</div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <footer className=\"container mx-auto px-4 py-8 text-center text-gray-400 border-t border-gray-700\">\n        <p>&copy; 2025 Ryde5 | All Rights Reserved</p>\n        <div className=\"mt-4 flex justify-center space-x-6 text-sm\">\n          <Link href=\"/privacy\" className=\"hover:text-primary-500 transition-colors\">\n            Privacy Policy\n          </Link>\n          <Link href=\"/terms\" className=\"hover:text-primary-500 transition-colors\">\n            Terms of Service\n          </Link>\n          <Link href=\"/support\" className=\"hover:text-primary-500 transition-colors\">\n            Support\n          </Link>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":4986},"components/NotificationBell.js":{"content":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Bell } from \"lucide-react\"\n\nexport default function NotificationBell() {\n  const [notifications, setNotifications] = useState([\n    {\n      id: 1,\n      message: \"Your last ride was rated 5 stars!\",\n      time: \"2 hours ago\",\n      read: false,\n    },\n    {\n      id: 2,\n      message: \"New payment method added successfully\",\n      time: \"1 day ago\",\n      read: true,\n    },\n  ])\n\n  const [showNotifications, setShowNotifications] = useState(false)\n  const notificationRef = useRef(null)\n\n  const unreadCount = notifications.filter((n) => !n.read).length\n\n  // Close notifications when clicking outside\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (notificationRef.current && !notificationRef.current.contains(event.target)) {\n        setShowNotifications(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  const markAsRead = (id) => {\n    setNotifications(notifications.map((n) => (n.id === id ? { ...n, read: true } : n)))\n  }\n\n  return (\n    <div className=\"relative\" ref={notificationRef}>\n      <button\n        onClick={() => setShowNotifications(!showNotifications)}\n        className=\"relative p-2 rounded-full hover:bg-gray-100\"\n        aria-label={`${unreadCount} unread notifications`}\n      >\n        <Bell className=\"h-6 w-6\" />\n        {unreadCount > 0 && (\n          <span className=\"absolute top-0 right-0 h-5 w-5 bg-red-500 text-white rounded-full text-xs flex items-center justify-center\">\n            {unreadCount}\n          </span>\n        )}\n      </button>\n\n      {showNotifications && (\n        <div className=\"absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border z-[100] max-h-[80vh] overflow-y-auto\">\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-lg font-semibold\">Notifications</h3>\n              {unreadCount > 0 && (\n                <button\n                  onClick={() => setNotifications(notifications.map((n) => ({ ...n, read: true })))}\n                  className=\"text-sm text-orange-500 hover:text-orange-600\"\n                >\n                  Mark all as read\n                </button>\n              )}\n            </div>\n            <div className=\"space-y-3\">\n              {notifications.length > 0 ? (\n                notifications.map((notification) => (\n                  <div\n                    key={notification.id}\n                    className={`p-3 rounded transition-colors cursor-pointer hover:bg-gray-50 ${\n                      notification.read ? \"bg-white\" : \"bg-blue-50\"\n                    }`}\n                    onClick={() => markAsRead(notification.id)}\n                  >\n                    <p className=\"text-sm\">{notification.message}</p>\n                    <span className=\"text-xs text-gray-500\">{notification.time}</span>\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-center text-gray-500 py-4\">No notifications</p>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n","size_bytes":3262},"components/RideBooking.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { MapPin, Clock, DollarSign, Star, ChevronUp } from \"lucide-react\"\nimport Map from \"./Map\"\n\nconst BOOKING_STEPS = {\n  LOCATION: \"location\",\n  CONFIRMATION: \"confirmation\",\n  DRIVER_MATCHED: \"driver_matched\",\n  TRACKING: \"tracking\",\n}\n\nexport default function RideBooking() {\n  const [step, setStep] = useState(BOOKING_STEPS.LOCATION)\n  const [bookingDetails, setBookingDetails] = useState({\n    pickup: null,\n    destination: null,\n    estimatedTime: \"15 min\",\n    estimatedPrice: \"$25.50\",\n    driver: {\n      name: \"Samantha\",\n      rating: 4.9,\n      car: \"Tesla Model 3\",\n      plateNumber: \"ABC 123\",\n      photo: \"/placeholder.svg?height=50&width=50\",\n    },\n  })\n\n  const handleLocationSelect = (location) => {\n    if (!bookingDetails.pickup) {\n      setBookingDetails((prev) => ({ ...prev, pickup: location }))\n    } else if (!bookingDetails.destination) {\n      setBookingDetails((prev) => ({ ...prev, destination: location }))\n      setStep(BOOKING_STEPS.CONFIRMATION)\n    }\n  }\n\n  const handleConfirmRide = () => {\n    setStep(BOOKING_STEPS.DRIVER_MATCHED)\n    // Simulate driver matching after 2 seconds\n    setTimeout(() => {\n      setStep(BOOKING_STEPS.TRACKING)\n    }, 2000)\n  }\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      <div className=\"relative flex-1\">\n        <Map onLocationSelect={handleLocationSelect} />\n\n        {/* Bottom Sheet */}\n        <div className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg transform transition-transform duration-300\">\n          <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n\n          {step === BOOKING_STEPS.LOCATION && (\n            <div className=\"p-4\">\n              <h2 className=\"text-xl font-semibold mb-4\">Where to?</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n                  <MapPin className=\"text-[#6C63FF]\" />\n                  <input type=\"text\" placeholder=\"Enter destination\" className=\"flex-1 bg-transparent outline-none\" />\n                </div>\n\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-sm font-medium text-gray-500 mb-2\">Saved Places</h3>\n                  <div className=\"space-y-2\">\n                    <SavedLocation label=\"Home\" address=\"123 Home St\" />\n                    <SavedLocation label=\"Work\" address=\"456 Office Ave\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === BOOKING_STEPS.CONFIRMATION && (\n            <div className=\"p-4\">\n              <h2 className=\"text-xl font-semibold mb-4\">Confirm your ride</h2>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Clock className=\"text-[#6C63FF]\" />\n                    <span>{bookingDetails.estimatedTime}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <DollarSign className=\"text-[#6C63FF]\" />\n                    <span>{bookingDetails.estimatedPrice}</span>\n                  </div>\n                </div>\n\n                <button\n                  onClick={handleConfirmRide}\n                  className=\"w-full bg-[#6C63FF] text-white py-3 rounded-lg font-medium\"\n                >\n                  Confirm Ride\n                </button>\n              </div>\n            </div>\n          )}\n\n          {step === BOOKING_STEPS.DRIVER_MATCHED && (\n            <div className=\"p-4\">\n              <div className=\"text-center\">\n                <h2 className=\"text-xl font-semibold\">Driver Found!</h2>\n                <p className=\"text-gray-500\">Your driver is on the way</p>\n\n                <div className=\"mt-4 p-4 bg-gray-50 rounded-lg flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <img\n                      src={bookingDetails.driver.photo || \"/placeholder.svg\"}\n                      alt={bookingDetails.driver.name}\n                      className=\"w-12 h-12 rounded-full\"\n                    />\n                    <div>\n                      <h3 className=\"font-medium\">{bookingDetails.driver.name}</h3>\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                        <span>{bookingDetails.driver.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-medium\">{bookingDetails.driver.car}</p>\n                    <p className=\"text-sm text-gray-500\">{bookingDetails.driver.plateNumber}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {step === BOOKING_STEPS.TRACKING && (\n            <div className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h2 className=\"text-xl font-semibold\">{bookingDetails.driver.name}</h2>\n                  <p className=\"text-gray-500\">3 min away</p>\n                </div>\n                <img\n                  src={bookingDetails.driver.photo || \"/placeholder.svg\"}\n                  alt={bookingDetails.driver.name}\n                  className=\"w-12 h-12 rounded-full\"\n                />\n              </div>\n\n              <div className=\"flex justify-between items-center\">\n                <button className=\"px-4 py-2 border rounded-lg\">Cancel</button>\n                <button className=\"px-4 py-2 border rounded-lg\">Contact</button>\n                <button className=\"px-4 py-2 border rounded-lg\">Share</button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SavedLocation({ label, address }) {\n  return (\n    <button className=\"w-full flex items-center space-x-3 p-2 hover:bg-gray-100 rounded-lg\">\n      <MapPin className=\"text-gray-400\" />\n      <div className=\"text-left\">\n        <p className=\"font-medium\">{label}</p>\n        <p className=\"text-sm text-gray-500\">{address}</p>\n      </div>\n    </button>\n  )\n}\n\n","size_bytes":6393},"components/SplashScreen.js":{"content":"\"use client\"\n\nimport { useEffect, useState } from \"react\"\nimport Image from \"next/image\"\n\nexport default function SplashScreen() {\n  const [show, setShow] = useState(true)\n\n  useEffect(() => {\n    // Check if splash screen has been shown before\n    const hasShownSplash = sessionStorage.getItem(\"hasShownSplash\")\n\n    if (hasShownSplash) {\n      setShow(false)\n      return\n    }\n\n    const timer = setTimeout(() => {\n      setShow(false)\n      sessionStorage.setItem(\"hasShownSplash\", \"true\")\n    }, 2000)\n\n    return () => clearTimeout(timer)\n  }, [])\n\n  if (!show) return null\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-[#FFA500] transition-opacity duration-500\">\n      <div className=\"text-center\">\n        <Image src=\"/logo.png\" alt=\"Ryde Logo\" width={200} height={39} className=\"mb-6\" priority />\n        <div className=\"text-2xl font-bold text-white\">Welcome to Ryde5</div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":956},"components/SplashScreen.tsx":{"content":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport Image from 'next/image';\n\nexport default function SplashScreen() {\n  const [show, setShow] = useState(true);\n\n  useEffect(() => {\n    // Check if splash screen has been shown before in this session\n    const hasShownSplash = sessionStorage.getItem('hasShownSplash');\n\n    if (hasShownSplash) {\n      setShow(false);\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setShow(false);\n      sessionStorage.setItem('hasShownSplash', 'true');\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  if (!show) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-primary-500 transition-opacity duration-500\">\n      <div className=\"text-center animate-fade-in\">\n        <Image \n          src=\"/logo.png\" \n          alt=\"Ryde5 Logo\" \n          width={200} \n          height={39} \n          className=\"mb-6\" \n          priority \n        />\n        <div className=\"text-2xl font-bold text-white\">Welcome to Ryde5</div>\n        <div className=\"mt-2 text-white/80\">Premium ride booking service</div>\n      </div>\n    </div>\n  );\n}","size_bytes":1157},"config/constants.ts":{"content":"export const MAPS_CONFIG = {\n  apiKey: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY || \"AIzaSyCeiu1ZkE95Ler7aYMCifN0cKZ9Xa6EHb0\",\n  libraries: [\"places\", \"geometry\"] as const,\n  defaultCenter: { lat: 51.5074, lng: -0.1278 }, // London center\n  defaultZoom: 13,\n  mapOptions: {\n    styles: [\n      {\n        featureType: \"poi\",\n        elementType: \"labels\",\n        stylers: [{ visibility: \"off\" }],\n      },\n    ],\n    mapTypeControl: false,\n    fullscreenControl: false,\n    streetViewControl: false,\n  },\n};\n\nexport const BOOKING_STATES = {\n  INITIAL: 'initial',\n  SELECTING_LOCATION: 'selecting_location',\n  CONFIRMING_LOCATIONS: 'confirming_locations',\n  FINDING_DRIVERS: 'finding_drivers',\n  DRIVER_FOUND: 'driver_found',\n  DRIVER_ACCEPTED: 'driver_accepted',\n  DRIVER_ARRIVING: 'driver_arriving',\n  NO_DRIVERS_FOUND: 'no_drivers_found',\n  ERROR: 'error',\n} as const;\n\nexport const ROUTES = {\n  HOME: '/',\n  MAIN: '/main',\n  PROFILE: '/profile',\n  DRIVER_PROFILE: '/driver-profile',\n  REGISTER_DRIVER: '/register-driver',\n  ADMIN: '/admin',\n  AUTH: {\n    PASSENGER_LOGIN: '/auth/passenger/login',\n    PASSENGER_REGISTER: '/auth/passenger/register',\n    DRIVER_LOGIN: '/auth/driver/login',\n    DRIVER_REGISTER: '/auth/driver/register',\n  },\n} as const;\n\nexport const PRICING_PLANS = [\n  {\n    id: 'silver',\n    name: 'Silver Plan',\n    price: 99,\n    features: [\n      'Up to 300 Trips',\n      'Basic Support Access',\n      'Access to city drives',\n      'Keep 80% of profits',\n      '10% off fuel',\n    ],\n    color: 'gray',\n  },\n  {\n    id: 'gold',\n    name: 'Gold Plan',\n    price: 199,\n    features: [\n      'Up to 600 Trips',\n      'Priority Support Access',\n      'Access to city and suburban drives',\n      'Keep 90% of profits',\n      '15% off fuel',\n    ],\n    color: 'yellow',\n    popular: true,\n  },\n  {\n    id: 'diamond',\n    name: 'Diamond Plan',\n    price: 299,\n    features: [\n      'Unlimited Trips',\n      '24/7 Dedicated Support',\n      'Access to all drive zones',\n      'VIP Trip Alerts',\n      'Keep 100% of profits',\n      '20% off fuel',\n    ],\n    color: 'cyan',\n  },\n] as const;\n\nexport const DRIVER_REQUIREMENTS = [\n  'Valid driver\\'s license',\n  'Proof of residency in your city/state',\n  'Proof of auto insurance',\n  'A smartphone with a data plan',\n  '21 years of age or older',\n  'At least one year of licensed driving experience in the US (3 years if you\\'re under 23 years old)',\n  'A clean driving record',\n] as const;","size_bytes":2455},"config/mapbox.js":{"content":"export const MAPBOX_ACCESS_TOKEN = \"AIzaSyCeiu1ZkE95Ler7aYMCifN0cKZ9Xa6EHb0\"\nexport const MAPBOX_STYLE = 'mapbox://styles/mapbox/light-v11'\n","size_bytes":140},"config/maps.js":{"content":"export const MAPS_CONFIG = {\n    apiKey: \"AIzaSyCeiu1ZkE95Ler7aYMCifN0cKZ9Xa6EHb0\",\n    libraries: [\"places\", \"geometry\"],\n    defaultCenter: { lat: 51.5074, lng: -0.1278 }, // London center\n    defaultZoom: 13,\n    mapOptions: {\n      styles: [\n        {\n          featureType: \"poi\",\n          elementType: \"labels\",\n          stylers: [{ visibility: \"off\" }],\n        },\n      ],\n      mapTypeControl: false,\n      fullscreenControl: false,\n    },\n  }\n  \n  ","size_bytes":460},"hooks/useGeolocation.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface GeolocationState {\n  loading: boolean;\n  accuracy: number | null;\n  altitude: number | null;\n  altitudeAccuracy: number | null;\n  heading: number | null;\n  latitude: number | null;\n  longitude: number | null;\n  speed: number | null;\n  timestamp: number | null;\n  error: GeolocationPositionError | null;\n}\n\nexport function useGeolocation(options?: PositionOptions): GeolocationState {\n  const [state, setState] = useState<GeolocationState>({\n    loading: true,\n    accuracy: null,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    latitude: null,\n    longitude: null,\n    speed: null,\n    timestamp: null,\n    error: null,\n  });\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error: new Error('Geolocation is not supported') as GeolocationPositionError,\n      }));\n      return;\n    }\n\n    const onSuccess = (position: GeolocationPosition) => {\n      setState({\n        loading: false,\n        accuracy: position.coords.accuracy,\n        altitude: position.coords.altitude,\n        altitudeAccuracy: position.coords.altitudeAccuracy,\n        heading: position.coords.heading,\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        speed: position.coords.speed,\n        timestamp: position.timestamp,\n        error: null,\n      });\n    };\n\n    const onError = (error: GeolocationPositionError) => {\n      setState(prev => ({\n        ...prev,\n        loading: false,\n        error,\n      }));\n    };\n\n    navigator.geolocation.getCurrentPosition(onSuccess, onError, options);\n  }, [options]);\n\n  return state;\n}","size_bytes":1711},"hooks/useLocalStorage.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(initialValue);\n\n  useEffect(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      if (item) {\n        setStoredValue(JSON.parse(item));\n      }\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n    }\n  }, [key]);\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}","size_bytes":848},"lib/utils.ts":{"content":"import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatCurrency(amount: number): string {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  }).format(amount);\n}\n\nexport function formatDate(date: string | Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  }).format(new Date(date));\n}\n\nexport function formatTime(date: string | Date): string {\n  return new Intl.DateTimeFormat('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n  }).format(new Date(date));\n}\n\nexport function calculateFare(distanceInMeters: number): string {\n  const distanceInMiles = distanceInMeters / 1609.34;\n  const baseRate = 2.5;\n  const minimumFare = 5;\n  return formatCurrency(Math.max(minimumFare, baseRate * distanceInMiles));\n}\n\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\nexport function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function validatePhone(phone: string): boolean {\n  const phoneRegex = /^\\+?[\\d\\s\\-\\(\\)]{10,}$/;\n  return phoneRegex.test(phone);\n}","size_bytes":1613},"scripts/setup-db.ts":{"content":"import { createClient } from '@supabase/supabase-js'\nimport fs from 'fs'\nimport path from 'path'\n\nasync function setupDatabase() {\n  const supabase = createClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    }\n  )\n\n  try {\n    console.log('Setting up database schema...')\n    \n    // Read the schema file\n    const schemaPath = path.join(process.cwd(), 'lib/database/schema.sql')\n    const schema = fs.readFileSync(schemaPath, 'utf8')\n    \n    // Split schema into individual statements\n    const statements = schema\n      .split(';')\n      .map(stmt => stmt.trim())\n      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'))\n    \n    // Execute each statement\n    for (let i = 0; i < statements.length; i++) {\n      const statement = statements[i]\n      console.log(`Executing statement ${i + 1}/${statements.length}...`)\n      \n      const { error } = await supabase.rpc('exec_sql', { \n        sql: statement + ';' \n      })\n      \n      if (error) {\n        console.error(`Error in statement ${i + 1}:`, error)\n        // Continue with other statements for now\n      }\n    }\n    \n    console.log('Database schema setup completed!')\n    \n  } catch (error) {\n    console.error('Failed to setup database:', error)\n  }\n}\n\n// Run the setup\nsetupDatabase()","size_bytes":1397},"styles/animations.css":{"content":"@keyframes slideUp {\n  from {\n    transform: translateY(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n.slide-up {\n  animation: slideUp 0.3s ease-out forwards;\n}\n\n.ride-details-popup {\n  transition: transform 0.3s ease-out;\n}\n\n","size_bytes":267},"styles/theme.js":{"content":"export const theme = {\n    colors: {\n      primary: \"#6C63FF\",\n      secondary: \"#4CAF50\",\n      background: \"#F5F5F5\",\n      white: \"#FFFFFF\",\n      text: {\n        primary: \"#333333\",\n        secondary: \"#666666\",\n        light: \"#999999\",\n      },\n      status: {\n        success: \"#4CAF50\",\n        warning: \"#FFC107\",\n        error: \"#F44336\",\n      },\n    },\n  }\n  \n  ","size_bytes":374},"types/index.ts":{"content":"export interface User {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  avatar?: string;\n  rating: number;\n  ridesCompleted: number;\n  favoriteLocations: string[];\n  paymentMethods: PaymentMethod[];\n  rideHistory: Ride[];\n  emergencyContacts: EmergencyContact[];\n  twoFactorEnabled: boolean;\n}\n\nexport interface Driver extends User {\n  status: 'active' | 'offline' | 'suspended';\n  vehicle: Vehicle;\n  documents: Document[];\n  earnings: Earnings;\n  schedule: Schedule;\n  performance: Performance;\n}\n\nexport interface Vehicle {\n  make: string;\n  model: string;\n  year: number;\n  color: string;\n  licensePlate: string;\n  insurance: Insurance;\n}\n\nexport interface Insurance {\n  provider: string;\n  policyNumber: string;\n  expiryDate: string;\n}\n\nexport interface Document {\n  type: string;\n  number: string;\n  expiryDate: string;\n  status: 'approved' | 'pending' | 'rejected';\n  lastVerified: string;\n}\n\nexport interface Earnings {\n  total: number;\n  lastWeek: number;\n  currentWeek: number;\n  pending: number;\n  stats: {\n    totalTrips: number;\n    averageRating: number;\n    completionRate: number;\n    cancellationRate: number;\n  };\n}\n\nexport interface Schedule {\n  [key: string]: {\n    active: boolean;\n    hours: string;\n  };\n}\n\nexport interface Performance {\n  rating: number;\n  acceptance: number;\n  completion: number;\n}\n\nexport interface PaymentMethod {\n  id: string;\n  type: 'Visa' | 'Mastercard' | 'Cash App';\n  last4?: string;\n  username?: string;\n  isDefault: boolean;\n}\n\nexport interface Ride {\n  id: string;\n  date: string;\n  from: string;\n  to: string;\n  amount: number;\n  driverName: string;\n  rating: number;\n  status: 'completed' | 'cancelled' | 'in-progress';\n}\n\nexport interface EmergencyContact {\n  name: string;\n  phone: string;\n  relation: string;\n}\n\nexport interface Location {\n  address: string;\n  coordinates: {\n    lat: number;\n    lng: number;\n  };\n}\n\nexport interface RouteDetails {\n  distance: string;\n  duration: string;\n  fare: string;\n  pickupEta?: number;\n}\n\nexport interface BookingState {\n  pickup: Location | null;\n  dropoff: Location | null;\n  selectedDriver: Driver | null;\n  routeDetails: RouteDetails | null;\n  status: 'initial' | 'selecting_location' | 'confirming_locations' | 'finding_drivers' | 'driver_found' | 'driver_accepted' | 'driver_arriving' | 'no_drivers_found' | 'error';\n}\n\nexport interface Notification {\n  id: string;\n  message: string;\n  time: string;\n  read: boolean;\n  type: 'info' | 'warning' | 'success' | 'error';\n}\n\nexport interface AdminStats {\n  totalUsers: number;\n  totalRides: number;\n  revenue: number;\n  avgRating: number;\n}","size_bytes":2611},"types/profiles.js":{"content":"export const USER_TYPES = {\n    RIDER: \"rider\",\n    DRIVER: \"driver\",\n  }\n  \n  export const DOCUMENT_STATUS = {\n    PENDING: \"pending\",\n    APPROVED: \"approved\",\n    REJECTED: \"rejected\",\n  }\n  \n  export const PAYMENT_PROVIDERS = {\n    STRIPE: \"stripe\",\n    CASH_APP: \"cashapp\",\n    CASH: \"cash\",\n  }\n  \n  ","size_bytes":306},"app/admin/layout.js":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport { useRouter, usePathname } from \"next/navigation\"\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport {\n  LayoutDashboard,\n  Users,\n  Car,\n  Star,\n  DollarSign,\n  LineChart,\n  Settings,\n  AlertTriangle,\n  MessageSquare,\n  Bell,\n  FileText,\n  LogOut,\n} from \"lucide-react\"\n\nconst sidebarItems = [\n  { icon: LayoutDashboard, label: \"Dashboard\", href: \"/admin\" },\n  { icon: Users, label: \"Users\", href: \"/admin/users\" },\n  { icon: Car, label: \"Rides\", href: \"/admin/rides\" },\n  { icon: Star, label: \"Reviews\", href: \"/admin/reviews\" },\n  { icon: DollarSign, label: \"Payments\", href: \"/admin/payments\" },\n  { icon: LineChart, label: \"Analytics\", href: \"/admin/analytics\" },\n  { icon: AlertTriangle, label: \"Emergency Alerts\", href: \"/admin/emergency-alerts\" },\n  { icon: MessageSquare, label: \"Support Tickets\", href: \"/admin/support-tickets\" },\n  { icon: Bell, label: \"Notifications\", href: \"/admin/notifications\" },\n  { icon: FileText, label: \"Documents\", href: \"/admin/documents\" },\n  { icon: Settings, label: \"Settings\", href: \"/admin/settings\" },\n]\n\nexport default function AdminLayout({ children }) {\n  const router = useRouter()\n  const pathname = usePathname()\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      // SECURITY: Use proper Supabase authentication instead of localStorage PIN\n      const { createClient } = await import('@/lib/supabase/client')\n      const supabase = createClient()\n      \n      const { data: { user } } = await supabase.auth.getUser()\n      \n      if (!user) {\n        router.push(\"/auth/passenger/login?message=Admin access requires authentication\")\n        return\n      }\n\n      // Check if user has admin role\n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('user_type')\n        .eq('id', user.id)\n        .single()\n\n      if (profile?.user_type !== 'admin') {\n        router.push(\"/unauthorized\")\n        return\n      }\n\n      setIsAuthenticated(true)\n    }\n\n    checkAuth()\n  }, [router])\n\n  const handleLogout = async () => {\n    // SECURITY: Proper Supabase logout instead of localStorage removal\n    const { createClient } = await import('@/lib/supabase/client')\n    const supabase = createClient()\n    await supabase.auth.signOut()\n    router.push(\"/\")\n  }\n\n  if (!isAuthenticated) {\n    return null // Or loading spinner\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      {/* Sidebar */}\n      <aside className=\"fixed top-0 left-0 z-40 w-64 h-screen bg-[#1F2937]\">\n        <div className=\"h-full px-3 py-4 overflow-y-auto\">\n          <Link href=\"/admin\" className=\"flex items-center pl-2.5 mb-5\">\n            <Image src=\"/logo.png\" alt=\"Ryde5 Logo\" width={180} height={35} priority className=\"object-contain\" />\n          </Link>\n          <ul className=\"space-y-2 font-medium\">\n            {sidebarItems.map((item) => {\n              const isActive = pathname === item.href\n              return (\n                <li key={item.label}>\n                  <Link\n                    href={item.href}\n                    className={`flex items-center p-4 text-gray-300 rounded-lg hover:bg-gray-700 group ${\n                      isActive ? \"bg-gray-700 text-white\" : \"\"\n                    }`}\n                  >\n                    <item.icon className=\"w-5 h-5\" />\n                    <span className=\"ml-3\">{item.label}</span>\n                  </Link>\n                </li>\n              )\n            })}\n            <li className=\"pt-4 mt-4 border-t border-gray-700\">\n              <button\n                onClick={handleLogout}\n                className=\"flex items-center w-full p-4 text-gray-300 rounded-lg hover:bg-gray-700 group\"\n              >\n                <LogOut className=\"w-5 h-5\" />\n                <span className=\"ml-3\">Logout</span>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </aside>\n\n      {/* Main content */}\n      <div className=\"ml-64 p-4\">\n        <div className=\"p-4 rounded-lg bg-white min-h-screen\">{children}</div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":4173},"app/admin/page.js":{"content":"import { LayoutDashboard } from \"lucide-react\"\nimport StatsGrid from \"@/components/admin/StatsGrid\"\nimport RideChart from \"@/components/admin/RideChart\"\nimport PricingChart from \"@/components/admin/PricingChart\"\nimport TrackingMap from \"@/components/admin/TrackingMap\"\nimport PaymentTable from \"@/components/admin/PaymentTable\"\nimport ReviewTable from \"@/components/admin/ReviewTable\"\nimport PerformanceTable from \"@/components/admin/PerformanceTable\"\n\nexport default function AdminDashboard() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Admin Dashboard</h1>\n        <LayoutDashboard className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <StatsGrid />\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Real-Time Tracking</h2>\n          <TrackingMap />\n        </div>\n\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Ride Statistics</h2>\n          <RideChart />\n        </div>\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Payment Gateways</h2>\n        <PaymentTable />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Dynamic Pricing</h2>\n        <PricingChart />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Recent Reviews</h2>\n          <ReviewTable />\n        </div>\n\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Performance Metrics</h2>\n          <PerformanceTable />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":1981},"app/driver-profile/page.js":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport DriverProfile from \"@/components/profile/DriverProfile\"\nimport DriverDashboard from \"@/components/dashboards/DriverDashboard\"\n\nexport default function DriverProfilePage() {\n  const [driver, setDriver] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    const fetchDriverData = async () => {\n      try {\n        const response = await fetch(\"/api/driver\")\n        \n        if (!response.ok) {\n          throw new Error('Failed to fetch driver data')\n        }\n        \n        const driverData = await response.json()\n        setDriver(driverData)\n      } catch (err) {\n        setError(err.message)\n        console.error('Error fetching driver data:', err)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchDriverData()\n  }, [])\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading driver profile...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <p className=\"text-red-600 mb-4\">Error: {error}</p>\n          <button \n            onClick={() => window.location.reload()} \n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Driver Dashboard</h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-1\">\n          <DriverProfile driver={driver} />\n        </div>\n        <div className=\"lg:col-span-2\">\n          <DriverDashboard driver={driver} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2114},"app/main/page.tsx":{"content":"import type { Metadata } from 'next';\nimport BookingInterface from '@/components/booking/BookingInterface';\nimport SplashScreen from '@/components/SplashScreen';\n\nexport const metadata: Metadata = {\n  title: 'Book Your Ride',\n  description: 'Book your premium ride with Ryde5. Fast, safe, and reliable transportation.',\n};\n\nexport default function MainPage() {\n  return (\n    <>\n      <SplashScreen />\n      <div className=\"min-h-screen bg-gray-50\">\n        <BookingInterface />\n      </div>\n    </>\n  );\n}","size_bytes":506},"app/onlyforadmin/page.js":{"content":"\"use client\"\n\nimport { useEffect } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Image from \"next/image\"\n\nexport default function AdminPinAccess() {\n  const router = useRouter()\n\n  // SECURITY: This page is deprecated - redirect to proper auth\n  useEffect(() => {\n    router.push(\"/unauthorized\")\n  }, [router])\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex flex-col items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <Image src=\"/logo.png\" alt=\"Ryde5 Logo\" width={180} height={35} className=\"mx-auto\" />\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-white\">Admin Access</h2>\n          <p className=\"mt-4 text-center text-white\">\n            Admin access is now controlled through proper user authentication. Redirecting...\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":933},"app/profile/page.js":{"content":"import UserProfile from \"@/components/profile/UserProfile\"\n\nexport default function ProfilePage() {\n  return (\n    <div className=\"min-h-screen bg-gray-100 py-12\">\n      <UserProfile />\n    </div>\n  )\n}\n\n","size_bytes":204},"app/register-driver/page.js":{"content":"\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport Image from \"next/image\"\nimport { ChevronLeft, ChevronRight, Upload, AlertCircle } from \"lucide-react\"\nimport PricingPlans from \"@/components/pricing/PricingPlans\"\nimport Link from \"next/link\"\nimport { ArrowLeft } from \"lucide-react\"\nimport { Button } from \"@/components/ui/buttons\"\n\n\nconst DriverRegistration = () => {\n  const [step, setStep] = useState(1)\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    licenseNumber: \"\",\n    vehicleMake: \"\",\n    vehicleModel: \"\",\n    plan: \"\",\n    // residencyProof: null,\n    insuranceProof: null,\n    licenseProof: null,\n    // drivingRecord: null,\n  })\n\n  const [errors, setErrors] = useState({})\n  const [isFormValid, setIsFormValid] = useState(false)\n\n  const validateForm = () => {\n    const newErrors = {}\n\n    if (!formData.insuranceProof) newErrors.insuranceProof = \"Proof of insurance is required\"\n    if (!formData.licenseProof) newErrors.licenseProof = \"Driver's license is required\"\n\n    setErrors(newErrors)\n    setIsFormValid(Object.keys(newErrors).length === 0)\n  }\n\n  useEffect(() => {\n    if (step === 2) {\n      validateForm()\n    }\n  }, [formData, step])\n\n  const handleChange = (e) => {\n    const { name, value, type, files } = e.target\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === \"file\" ? files[0] : value,\n    }))\n  }\n\n  const handleSelectPlan = (plan) => {\n    setFormData((prev) => ({ ...prev, plan }))\n    const formElement = document.querySelector(\"#registration-form\")\n    if (formElement) {\n      formElement.scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n\n  const handleBack = () => {\n    setStep(1)\n    window.scrollTo(0, 0)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (step === 1) {\n      setStep(2)\n      window.scrollTo(0, 0)\n    } else if (step === 2 && isFormValid) {\n      console.log(formData)\n      alert(\"Thank you for your application! We will review your information and contact you soon.\")\n    } else {\n      validateForm()\n    }\n    \n  }\n\n  const requirements = [\n    \"Valid driver's license\",\n    \"Proof of residency in your city/state\",\n    \"Proof of auto insurance\",\n    \"A smartphone with a data plan\",\n    \"21 years of age or older\",\n    \"At least one year of licensed driving experience in the US (3 years if you're under 23 years old)\",\n    \"A clean driving record\",\n  ]\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <div className=\"flex flex-col items-center\">\n        {/* Header */}\n        <header className=\"w-full bg-white shadow-sm\">\n        <div className=\"container mx-auto px-4 py-6\">\n        <Link href=\"/profile\">\n          <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n            <ArrowLeft className=\"w-4 h-4\" />\n            \n          </Button>\n        </Link>\n          <div className=\"text-center\">\n            <div className=\"mb-4 flex justify-center\">\n              <Image src=\"/logo.png\" alt=\"Ryde5 Logo\" width={180} height={35} priority />\n            </div>\n            <h1 className=\"text-3xl text-gray-900\">Become a Ryde5 Driver</h1>\n          </div>\n        </div>\n      </header>\n\n        <main className=\"container mx-auto px-4 py-8 max-w-4xl\">\n          {/* Requirements Section */}\n          <section className=\"bg-white border border-gray-200 rounded-lg p-6 mb-8 shadow-sm\">\n            <h2 className=\"text-3xl font-semibold mb-4  text-center\">Driver Requirements</h2>\n            <ul className=\"list-disc pl-5 space-y-2 max-w-2xl mx-auto\">\n              {requirements.map((req, index) => (\n                <li key={index} className=\"text-gray-700\">\n                  {req}\n                </li>\n              ))}\n            </ul>\n          </section>\n\n          {step === 1 ? (\n            <>\n              <PricingPlans onSelectPlan={handleSelectPlan} />\n              <div className=\"mt-8 bg-white border border-gray-200 rounded-lg p-6 shadow-sm max-w-2xl mx-auto\">\n                <h2 className=\"text-2xl font-semibold mb-6\">Driver Registration</h2>\n                <form id=\"registration-form\" onSubmit={handleSubmit} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"fullName\" className=\"block text-sm font-medium text-gray-700\">\n                      Full Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"fullName\"\n                      name=\"fullName\"\n                      value={formData.fullName}\n                      onChange={handleChange}\n                      required\n                      className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n                      Email\n                    </label>\n                    <input\n                      type=\"email\"\n                      id=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleChange}\n                      required\n                      className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700\">\n                      Phone Number\n                    </label>\n                    <input\n                      type=\"tel\"\n                      id=\"phone\"\n                      name=\"phone\"\n                      value={formData.phone}\n                      onChange={handleChange}\n                      required\n                      className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500\"\n                    />\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700\">\n                      Driver's License Number\n                    </label>\n                    <input\n                      type=\"text\"\n                      id=\"licenseNumber\"\n                      name=\"licenseNumber\"\n                      value={formData.licenseNumber}\n                      onChange={handleChange}\n                      required\n                      className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {/* Vehicle Make */}\n                    <div>\n                      <label htmlFor=\"vehicleMake\" className=\"block text-sm font-medium text-gray-700\">\n                        Vehicle Make\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"vehicleMake\"\n                        name=\"vehicleMake\"\n                        value={formData.vehicleMake}\n                        placeholder=\"Make (e.g., Toyota)\"\n                        onChange={handleChange}\n                        required\n                        className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500\"\n                      />\n                    </div>\n\n                    {/* Vehicle Model */}\n                    <div>\n                      <label htmlFor=\"vehicleModel\" className=\"block text-sm font-medium text-gray-700\">\n                        Vehicle Model\n                      </label>\n                      <input\n                        type=\"text\"\n                        id=\"vehicleModel\"\n                        name=\"vehicleModel\"\n                        value={formData.vehicleModel}\n                        placeholder=\"Model (e.g., Corolla)\"\n                        onChange={handleChange}\n                        required\n                        className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500\"\n                      />\n                    </div>\n                  </div>\n\n\n                  <div>\n                    <label htmlFor=\"selectedPlan\" className=\"block text-sm font-medium text-gray-700\">\n                      Select Plan\n                    </label>\n                    <select\n                      id=\"selectedPlan\"\n                      name=\"plan\"\n                      value={formData.plan}\n                      onChange={handleChange}\n                      required\n                      className=\"mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 focus:border-orange-500 focus:outline-none focus:ring-orange-500 appearance-none bg-white\"\n                    >\n                      <option value=\"\">Choose a plan</option>\n                      <option value=\"silver\">Silver Plan - $99</option>\n                      <option value=\"gold\">Gold Plan - $199</option>\n                      <option value=\"diamond\">Diamond Plan - $299</option>\n                    </select>\n                  </div>\n                  <div className=\"flex justify-end mt-6\">\n                    <button\n                      type=\"submit\"\n                      className=\"bg-orange-500 text-white py-3 px-6 rounded-md hover:bg-orange-600 transition duration-300 flex items-center\"\n                    >\n                      Next\n                      <ChevronRight className=\"ml-2 w-5 h-5\" />\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </>\n          ) : (\n            <form onSubmit={handleSubmit} className=\"bg-white border border-gray-200 rounded-lg p-6 shadow-sm\">\n            <div className=\"mb-6 flex items-center\">\n              <button\n                type=\"button\"\n                onClick={handleBack}\n                className=\"mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors\"\n              >\n                <ChevronLeft className=\"w-6 h-6\" />\n              </button>\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 rounded-full bg-orange-500 flex items-center justify-center text-white font-bold mr-3\">\n                  2\n                </div>\n                <h3 className=\"text-lg font-semibold\">Document Upload</h3>\n              </div>\n            </div>\n          \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {[\n                { id: \"insuranceProof\", label: \"Proof of Insurance\" },\n                { id: \"licenseProof\", label: \"Driver's License\" },\n              ].map((field) => (\n                <div key={field.id}>\n                  <label htmlFor={field.id} className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    {field.label}\n                  </label>\n                  <div className=\"flex items-center justify-center w-full\">\n                    <label\n                      htmlFor={field.id}\n                      className={`flex flex-col items-center justify-center w-full h-32 border-2 ${errors[field.id] ? \"border-red-300\" : \"border-gray-300\"\n                        } border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100 relative`}\n                    >\n                      <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                        {formData[field.id] ? (\n                          <>\n                            <div className=\"text-sm text-green-600 font-medium\">File selected</div>\n                            <p className=\"text-xs text-gray-500 mt-1\">{formData[field.id].name}</p>\n                          </>\n                        ) : (\n                          <>\n                            <Upload className=\"w-8 h-8 mb-3 text-gray-400\" />\n                            <p className=\"mb-2 text-sm text-gray-500\">\n                              <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                            </p>\n                            <p className=\"text-xs text-gray-500\">PDF, PNG, JPG or GIF (MAX. 10MB)</p>\n                          </>\n                        )}\n                      </div>\n                      <input\n                        type=\"file\"\n                        id={field.id}\n                        name={field.id}\n                        onChange={handleChange}\n                        accept=\".pdf,.png,.jpg,.gif\"\n                        className=\"hidden\"\n                      />\n                    </label>\n                  </div>\n                  {errors[field.id] && (\n                    <div className=\"mt-1 flex items-center text-sm text-red-600\">\n                      <AlertCircle className=\"w-4 h-4 mr-1\" />\n                      {errors[field.id]}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n          \n            <div className=\"mt-8\">\n              <button\n                type=\"submit\"\n                className={`w-full py-3 px-4 rounded-md flex items-center justify-center transition duration-300 ${isFormValid\n                  ? \"bg-orange-500 text-white hover:bg-orange-600\"\n                  : \"bg-gray-300 text-gray-500 cursor-not-allowed\"\n                  }`}\n                disabled={!isFormValid}\n              >\n                Submit Application\n              </button>\n              {!isFormValid && Object.keys(errors).length > 0 && (\n                <p className=\"mt-2 text-sm text-red-600 text-center\">\n                  Please upload all required documents to continue\n                </p>\n              )}\n            </div>\n          </form>\n          \n          )}\n        </main>\n      </div>\n    </div>\n  )\n}\n\nexport default DriverRegistration\n\n","size_bytes":14129},"app/unauthorized/page.tsx":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport { AlertTriangle, ArrowLeft } from \"lucide-react\"\nimport { Button } from \"@/components/ui/buttons\"\n\nexport default function Unauthorized() {\n  return (\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full text-center\">\n        <div className=\"bg-white rounded-lg shadow-lg p-8\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center\">\n              <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n            </div>\n          </div>\n          \n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Access Denied\n          </h1>\n          \n          <p className=\"text-gray-600 mb-8\">\n            You don't have permission to access this page. Please contact support if you believe this is an error.\n          </p>\n          \n          <div className=\"space-y-3\">\n            <Link href=\"/\" className=\"block\">\n              <button className=\"w-full flex items-center justify-center px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50 transition-colors\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Go to Homepage\n              </button>\n            </Link>\n            \n            <Link href=\"/profile\" className=\"block\">\n              <button className=\"w-full px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50 transition-colors\">\n                Go to Profile\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","size_bytes":1825},"components/admin/PaymentTable.js":{"content":"const payments = [\n    {\n      gateway: \"Stripe\",\n      transactions: \"1,234\",\n      amount: \"$12,345\",\n      status: \"Active\",\n      statusColor: \"text-green-500\",\n    },\n    {\n      gateway: \"PayPal\",\n      transactions: \"987\",\n      amount: \"$9,870\",\n      status: \"Active\",\n      statusColor: \"text-green-500\",\n    },\n    {\n      gateway: \"Square\",\n      transactions: \"567\",\n      amount: \"$5,670\",\n      status: \"Maintenance\",\n      statusColor: \"text-orange-500\",\n    },\n  ]\n  \n  export default function PaymentTable() {\n    return (\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead>\n            <tr>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Gateway\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Transactions\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Total Amount\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {payments.map((payment) => (\n              <tr key={payment.gateway}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">{payment.gateway}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{payment.transactions}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{payment.amount}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  <span className={payment.statusColor}>{payment.status}</span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n  \n  ","size_bytes":2134},"components/admin/PerformanceTable.js":{"content":"const metrics = [\n    {\n      metric: \"Avg. Response Time\",\n      value: \"2.3s\",\n      change: \"▼ 0.2s\",\n      changeColor: \"text-green-500\",\n    },\n    {\n      metric: \"Server Uptime\",\n      value: \"99.99%\",\n      change: \"▲ 0.01%\",\n      changeColor: \"text-green-500\",\n    },\n    {\n      metric: \"App Crashes\",\n      value: \"0.05%\",\n      change: \"▼ 0.02%\",\n      changeColor: \"text-green-500\",\n    },\n  ]\n  \n  export default function PerformanceTable() {\n    return (\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead>\n            <tr>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Metric\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Value\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Change\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {metrics.map((metric) => (\n              <tr key={metric.metric}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">{metric.metric}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{metric.value}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  <span className={metric.changeColor}>{metric.change}</span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n  \n  ","size_bytes":1772},"components/admin/PricingChart.js":{"content":"\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport Chart from \"chart.js/auto\"\n\nexport default function PricingChart() {\n  const chartRef = useRef(null)\n  const chartInstance = useRef(null)\n\n  useEffect(() => {\n    if (chartInstance.current) {\n      chartInstance.current.destroy()\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\")\n    chartInstance.current = new Chart(ctx, {\n      type: \"bar\",\n      data: {\n        labels: [\"Morning\", \"Afternoon\", \"Evening\", \"Night\"],\n        datasets: [\n          {\n            label: \"Price Multiplier\",\n            data: [1.2, 1.0, 1.5, 1.8],\n            backgroundColor: \"#FFA500\",\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"top\",\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    })\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy()\n      }\n    }\n  }, [])\n\n  return (\n    <div className=\"h-[300px]\">\n      <canvas ref={chartRef} />\n    </div>\n  )\n}\n\n","size_bytes":1161},"components/admin/ReviewTable.js":{"content":"const reviews = [\n    {\n      user: \"John Doe\",\n      rating: 5,\n      comment: \"Great service!\",\n      date: \"2025-01-21\",\n    },\n    {\n      user: \"Jane Smith\",\n      rating: 4,\n      comment: \"Very satisfied\",\n      date: \"2025-01-20\",\n    },\n  ]\n  \n  export default function ReviewTable() {\n    return (\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead>\n            <tr>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                User\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Rating\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Comment\n              </th>\n              <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Date\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {reviews.map((review) => (\n              <tr key={`${review.user}-${review.date}`}>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">{review.user}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{review.rating}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{review.comment}</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{review.date}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n  \n  ","size_bytes":1818},"components/admin/RideChart.js":{"content":"\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport Chart from \"chart.js/auto\"\n\nexport default function RideChart() {\n  const chartRef = useRef(null)\n  const chartInstance = useRef(null)\n\n  useEffect(() => {\n    if (chartInstance.current) {\n      chartInstance.current.destroy()\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\")\n    chartInstance.current = new Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\n        datasets: [\n          {\n            label: \"Number of Rides\",\n            data: [1200, 1900, 3000, 5000, 4000, 3000],\n            borderColor: \"#FFA500\",\n            tension: 0.1,\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"top\",\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    })\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy()\n      }\n    }\n  }, [])\n\n  return (\n    <div className=\"h-[300px]\">\n      <canvas ref={chartRef} />\n    </div>\n  )\n}\n\n","size_bytes":1219},"components/admin/StatsGrid.js":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Users, Car, DollarSign, Star } from \"lucide-react\"\n\nexport default function StatsGrid() {\n  const [stats, setStats] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchStats = async () => {\n      try {\n        const response = await fetch('/api/admin/stats');\n        if (response.ok) {\n          const data = await response.json();\n          \n          const statsData = [\n            {\n              icon: Users,\n              title: \"Total Users\",\n              value: data.overview.totalUsers.toLocaleString(),\n              color: \"bg-blue-500\",\n            },\n            {\n              icon: Car,\n              title: \"Total Rides\",\n              value: data.overview.totalRides.toLocaleString(),\n              color: \"bg-green-500\",\n            },\n            {\n              icon: DollarSign,\n              title: \"Revenue\",\n              value: `$${data.overview.totalRevenue.toLocaleString()}`,\n              color: \"bg-yellow-500\",\n            },\n            {\n              icon: Star,\n              title: \"Avg. Rating\",\n              value: data.overview.avgRating.toString(),\n              color: \"bg-purple-500\",\n            },\n          ];\n          \n          setStats(statsData);\n        }\n      } catch (error) {\n        console.error('Error fetching stats:', error);\n        // Fallback to default values\n        setStats([\n          { icon: Users, title: \"Total Users\", value: \"0\", color: \"bg-blue-500\" },\n          { icon: Car, title: \"Total Rides\", value: \"0\", color: \"bg-green-500\" },\n          { icon: DollarSign, title: \"Revenue\", value: \"$0\", color: \"bg-yellow-500\" },\n          { icon: Star, title: \"Avg. Rating\", value: \"0\", color: \"bg-purple-500\" },\n        ]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchStats();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className=\"p-6 bg-white rounded-lg shadow-sm border border-gray-200 animate-pulse\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n              <div className=\"ml-4 space-y-2\">\n                <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n                <div className=\"h-6 bg-gray-200 rounded w-16\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {stats?.map((stat) => (\n        <div\n          key={stat.title}\n          className=\"p-6 bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow\"\n        >\n          <div className=\"flex items-center\">\n            <div className={`p-3 rounded-full ${stat.color} bg-opacity-10`}>\n              <stat.icon className={`w-6 h-6 ${stat.color.replace(\"bg-\", \"text-\")}`} />\n            </div>\n            <div className=\"ml-4\">\n              <h3 className=\"text-sm font-medium text-gray-500\">{stat.title}</h3>\n              <p className=\"text-2xl font-semibold\">{stat.value}</p>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n\n","size_bytes":3327},"components/admin/TrackingMap.js":{"content":"\"use client\"\n\nimport { useEffect, useRef } from \"react\"\nimport { Loader } from \"@googlemaps/js-api-loader\"\n\nexport default function TrackingMap() {\n  const mapRef = useRef(null)\n\n  useEffect(() => {\n    const initMap = async () => {\n      const loader = new Loader({\n        apiKey: \"AIzaSyCeiu1ZkE95Ler7aYMCifN0cKZ9Xa6EHb0\",\n        version: \"weekly\",\n      })\n\n      const google = await loader.load()\n      const map = new google.maps.Map(mapRef.current, {\n        center: { lat: 42.8864, lng: -78.8784 },\n        zoom: 12,\n      })\n\n      // Add some dummy markers for demonstration\n      const locations = [\n        { lat: 42.8864, lng: -78.8784 },\n        { lat: 42.89, lng: -78.87 },\n        { lat: 42.88, lng: -78.86 },\n      ]\n\n      locations.forEach((location) => {\n        new google.maps.Marker({\n          position: location,\n          map,\n          icon: {\n            url: \"/car-icon.png\",\n            scaledSize: new google.maps.Size(32, 32),\n          },\n        })\n      })\n    }\n\n    initMap()\n  }, [])\n\n  return <div ref={mapRef} className=\"w-full h-[400px] rounded-lg\" />\n}\n\n","size_bytes":1098},"components/auth/AuthLayout.js":{"content":"import Image from \"next/image\"\nimport Link from \"next/link\"\nimport { ArrowLeft } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/buttons\"\n\nexport default function AuthLayout({ children, title, subtitle }) {\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" className=\"flex items-center mb-8\">\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back\n          </Button>\n        </Link>\n\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"text-center mb-8\">\n            <Image src=\"/logo.png\" alt=\"Ryde5 Logo\" width={180} height={35} priority className=\"mx-auto mb-6\" />\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">{title}</h1>\n            {subtitle && <p className=\"text-gray-600\">{subtitle}</p>}\n          </div>\n\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n","size_bytes":963},"components/auth/LoginForm.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/Input'\nimport { Card, CardContent } from '@/components/ui/Card'\n\ninterface LoginFormProps {\n  userType: 'passenger' | 'driver'\n}\n\nexport default function LoginForm({ userType }: LoginFormProps) {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const router = useRouter()\n  const supabase = createClient()\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      if (data.user) {\n        // Redirect based on user type\n        if (userType === 'passenger') {\n          router.push('/main')\n        } else {\n          router.push('/driver-profile')\n        }\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleForgotPassword = async () => {\n    if (!email) {\n      setError('Please enter your email address first')\n      return\n    }\n\n    setLoading(true)\n    try {\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/auth/reset-password`,\n      })\n\n      if (error) {\n        setError(error.message)\n      } else {\n        setError('Password reset email sent! Check your inbox.')\n      }\n    } catch (err) {\n      setError('Failed to send reset email')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSignUp = () => {\n    router.push(`/auth/${userType}/register`)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white/95 backdrop-blur-sm\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              {userType === 'passenger' ? 'Passenger Login' : 'Driver Login'}\n            </h1>\n            <p className=\"text-gray-600\">Welcome back to Ryde5</p>\n          </div>\n\n          <form onSubmit={handleLogin} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email Address\n              </label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"Enter your email\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter your password\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            {error && (\n              <div className=\"text-red-600 text-sm text-center bg-red-50 p-3 rounded-md\">\n                {error}\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-primary-500 hover:bg-primary-600 text-white py-3\"\n            >\n              {loading ? 'Signing in...' : 'Sign In'}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center space-y-3\">\n            <button\n              onClick={handleForgotPassword}\n              disabled={loading}\n              className=\"text-primary-500 hover:text-primary-600 text-sm\"\n            >\n              Forgot your password?\n            </button>\n\n            <div className=\"text-sm text-gray-600\">\n              Don't have an account?{' '}\n              <button\n                onClick={handleSignUp}\n                className=\"text-primary-500 hover:text-primary-600 font-medium\"\n              >\n                Sign up\n              </button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":4733},"components/auth/RegisterForm.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/client'\nimport { Button } from '@/components/ui/Button'\nimport { Input } from '@/components/ui/Input'\nimport { Card, CardContent } from '@/components/ui/Card'\n\ninterface RegisterFormProps {\n  userType: 'passenger' | 'driver'\n}\n\nexport default function RegisterForm({ userType }: RegisterFormProps) {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    fullName: '',\n    phone: '',\n  })\n  const [driverData, setDriverData] = useState({\n    licenseNumber: '',\n    vehicleMake: '',\n    vehicleModel: '',\n    vehicleYear: '',\n    vehicleColor: '',\n    vehiclePlate: '',\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const router = useRouter()\n  const supabase = createClient()\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setFormData(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleDriverInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target\n    setDriverData(prev => ({ ...prev, [name]: value }))\n  }\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match')\n      setLoading(false)\n      return\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters')\n      setLoading(false)\n      return\n    }\n\n    try {\n      // Sign up the user\n      const { data, error: signUpError } = await supabase.auth.signUp({\n        email: formData.email,\n        password: formData.password,\n        options: {\n          data: {\n            full_name: formData.fullName,\n            phone: formData.phone,\n            role: userType,\n          }\n        }\n      })\n\n      if (signUpError) {\n        setError(signUpError.message)\n        return\n      }\n\n      if (data.user) {\n        // For now, we'll redirect to login with a success message\n        // In a complete implementation, we'd create the profile record\n        router.push(`/auth/${userType}/login?message=Registration successful! Please check your email to verify your account.`)\n      }\n    } catch (err) {\n      setError('An unexpected error occurred')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleSignIn = () => {\n    router.push(`/auth/${userType}/login`)\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-white/95 backdrop-blur-sm\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              {userType === 'passenger' ? 'Passenger Sign Up' : 'Driver Sign Up'}\n            </h1>\n            <p className=\"text-gray-600\">Join Ryde5 today</p>\n          </div>\n\n          <form onSubmit={handleRegister} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"fullName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Full Name\n              </label>\n              <Input\n                id=\"fullName\"\n                name=\"fullName\"\n                type=\"text\"\n                value={formData.fullName}\n                onChange={handleInputChange}\n                placeholder=\"Enter your full name\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Email Address\n              </label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleInputChange}\n                placeholder=\"Enter your email\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Phone Number\n              </label>\n              <Input\n                id=\"phone\"\n                name=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={handleInputChange}\n                placeholder=\"Enter your phone number\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            {userType === 'driver' && (\n              <div className=\"space-y-4 border-t pt-4\">\n                <h3 className=\"font-medium text-gray-900\">Vehicle Information</h3>\n                \n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label htmlFor=\"vehicleMake\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Make\n                    </label>\n                    <Input\n                      id=\"vehicleMake\"\n                      name=\"vehicleMake\"\n                      type=\"text\"\n                      value={driverData.vehicleMake}\n                      onChange={handleDriverInputChange}\n                      placeholder=\"Toyota\"\n                      required\n                      disabled={loading}\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"vehicleModel\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Model\n                    </label>\n                    <Input\n                      id=\"vehicleModel\"\n                      name=\"vehicleModel\"\n                      type=\"text\"\n                      value={driverData.vehicleModel}\n                      onChange={handleDriverInputChange}\n                      placeholder=\"Camry\"\n                      required\n                      disabled={loading}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label htmlFor=\"vehicleYear\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Year\n                    </label>\n                    <Input\n                      id=\"vehicleYear\"\n                      name=\"vehicleYear\"\n                      type=\"number\"\n                      value={driverData.vehicleYear}\n                      onChange={handleDriverInputChange}\n                      placeholder=\"2020\"\n                      required\n                      disabled={loading}\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"vehicleColor\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Color\n                    </label>\n                    <Input\n                      id=\"vehicleColor\"\n                      name=\"vehicleColor\"\n                      type=\"text\"\n                      value={driverData.vehicleColor}\n                      onChange={handleDriverInputChange}\n                      placeholder=\"Black\"\n                      required\n                      disabled={loading}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label htmlFor=\"vehiclePlate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    License Plate\n                  </label>\n                  <Input\n                    id=\"vehiclePlate\"\n                    name=\"vehiclePlate\"\n                    type=\"text\"\n                    value={driverData.vehiclePlate}\n                    onChange={handleDriverInputChange}\n                    placeholder=\"ABC123\"\n                    required\n                    disabled={loading}\n                    className=\"w-full\"\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"licenseNumber\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Driver's License Number\n                  </label>\n                  <Input\n                    id=\"licenseNumber\"\n                    name=\"licenseNumber\"\n                    type=\"text\"\n                    value={driverData.licenseNumber}\n                    onChange={handleDriverInputChange}\n                    placeholder=\"License number\"\n                    required\n                    disabled={loading}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            )}\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Password\n              </label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleInputChange}\n                placeholder=\"Create a password\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Confirm Password\n              </label>\n              <Input\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                type=\"password\"\n                value={formData.confirmPassword}\n                onChange={handleInputChange}\n                placeholder=\"Confirm your password\"\n                required\n                disabled={loading}\n                className=\"w-full\"\n              />\n            </div>\n\n            {error && (\n              <div className=\"text-red-600 text-sm text-center bg-red-50 p-3 rounded-md\">\n                {error}\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-primary-500 hover:bg-primary-600 text-white py-3\"\n            >\n              {loading ? 'Creating Account...' : 'Create Account'}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <div className=\"text-sm text-gray-600\">\n              Already have an account?{' '}\n              <button\n                onClick={handleSignIn}\n                className=\"text-primary-500 hover:text-primary-600 font-medium\"\n              >\n                Sign in\n              </button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}","size_bytes":10933},"components/booking/BookingForm.js":{"content":"\"use client\"\n\nimport { useState, useCallback, useEffect } from \"react\"\nimport { MapPin, Search, ArrowLeft, X, CheckCircle2, Navigation, Edit2 } from \"lucide-react\"\nimport MapView from \"../map/MapView\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { MAPS_CONFIG } from \"@/config/maps\"\n\nconst BOOKING_STATES = {\n  INITIAL: \"initial\",\n  SELECTING_LOCATION: \"selecting_location\",\n  CONFIRMING_LOCATIONS: \"confirming_locations\",\n  FINDING_DRIVERS: \"finding_drivers\",\n  DRIVER_FOUND: \"driver_found\",\n  DRIVER_ACCEPTED: \"driver_accepted\",\n  DRIVER_ARRIVING: \"driver_arriving\",\n}\n\nexport default function BookingForm() {\n  const [bookingState, setBookingState] = useState(BOOKING_STATES.INITIAL)\n  const [activeInput, setActiveInput] = useState(null)\n  const [formData, setFormData] = useState({\n    pickup: null,\n    dropoff: null,\n  })\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [searchResults, setSearchResults] = useState([])\n  const [isMapSelection, setIsMapSelection] = useState(false)\n  const [routeDetails, setRouteDetails] = useState(null)\n  const [driverLocation, setDriverLocation] = useState(null)\n  const [selectedDriver, setSelectedDriver] = useState(null)\n  const [userLocation, setUserLocation] = useState(null)\n\n  const handleSearch = useCallback(async (query) => {\n    if (!query.trim() || !window.google) return\n\n    try {\n      const autocomplete = new window.google.maps.places.AutocompleteService()\n      const predictions = await new Promise((resolve, reject) => {\n        autocomplete.getPlacePredictions(\n          {\n            input: query,\n            componentRestrictions: { country: \"uk\" },\n            location: new google.maps.LatLng(MAPS_CONFIG.defaultCenter),\n            radius: 50000, // 50km radius\n          },\n          (results, status) => {\n            if (status === \"OK\") resolve(results)\n            else reject(new Error(\"Location search failed\"))\n          },\n        )\n      })\n      setSearchResults(predictions)\n    } catch (error) {\n      console.error(\"Location search error:\", error)\n      setSearchResults([])\n    }\n  }, [])\n\n  const handleLocationSelect = useCallback(\n    (location) => {\n      setFormData((prev) => ({\n        ...prev,\n        [activeInput]: location,\n      }))\n\n      if (activeInput === \"pickup\") {\n        setActiveInput(null)\n        setBookingState(BOOKING_STATES.INITIAL)\n      } else if (activeInput === \"dropoff\") {\n        setBookingState(BOOKING_STATES.CONFIRMING_LOCATIONS)\n      }\n\n      setIsMapSelection(false)\n      setSearchQuery(\"\")\n      setSearchResults([])\n    },\n    [activeInput],\n  )\n\n  const handleRouteCalculated = useCallback((details) => {\n    setRouteDetails(details)\n  }, [])\n\n  const handleRequestRide = useCallback(() => {\n    setBookingState(BOOKING_STATES.FINDING_DRIVERS)\n\n    setTimeout(() => {\n      setSelectedDriver({\n        name: \"Michael\",\n        rating: 4.9,\n        trips: \"2,543\",\n        car: \"Tesla Model 3\",\n        plate: \"ABC 123\",\n        photo: \"/placeholder.svg\",\n      })\n      setBookingState(BOOKING_STATES.DRIVER_FOUND)\n\n      setTimeout(() => {\n        setBookingState(BOOKING_STATES.DRIVER_ACCEPTED)\n\n        const startLocation = {\n          lat: formData.pickup.coordinates.lat + (Math.random() - 0.5) * 0.01,\n          lng: formData.pickup.coordinates.lng + (Math.random() - 0.5) * 0.01,\n        }\n        setDriverLocation(startLocation)\n        setBookingState(BOOKING_STATES.DRIVER_ARRIVING)\n      }, 2000)\n    }, 3000)\n  }, [formData.pickup])\n\n  useEffect(() => {\n    if (bookingState === BOOKING_STATES.DRIVER_ARRIVING && driverLocation && formData.pickup) {\n      const interval = setInterval(() => {\n        setDriverLocation((prev) => {\n          if (!prev) return prev\n\n          const moveTowards = (current, target) => {\n            const step = 0.0001\n            return current < target ? Math.min(current + step, target) : Math.max(current - step, target)\n          }\n\n          return {\n            lat: moveTowards(prev.lat, formData.pickup.coordinates.lat),\n            lng: moveTowards(prev.lng, formData.pickup.coordinates.lng),\n          }\n        })\n      }, 1000)\n\n      return () => clearInterval(interval)\n    }\n  }, [bookingState, driverLocation, formData.pickup])\n\n  useEffect(() => {\n    // Get user's location when component mounts\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            lat: position.coords.latitude,\n            lng: position.coords.longitude,\n          })\n        },\n        () => {\n          console.warn(\"Geolocation failed\")\n        },\n      )\n    }\n  }, [])\n\n  const handleEditLocation = (type) => {\n    setActiveInput(type)\n    setBookingState(BOOKING_STATES.SELECTING_LOCATION)\n  }\n\n  return (\n    <div className=\"h-screen w-full relative overflow-hidden\">\n      <div className=\"absolute inset-0\">\n        <MapView\n          onLocationSelect={handleLocationSelect}\n          pickup={formData.pickup}\n          dropoff={formData.dropoff}\n          bookingState={bookingState}\n          selectionMode={isMapSelection}\n          driverLocation={driverLocation}\n          onRouteCalculated={handleRouteCalculated}\n          userLocation={userLocation}\n        />\n      </div>\n\n      <AnimatePresence>\n        {bookingState === BOOKING_STATES.INITIAL && !activeInput && (\n          <motion.div\n            initial={{ y: \"100%\" }}\n            animate={{ y: 0 }}\n            exit={{ y: \"100%\" }}\n            transition={{ type: \"spring\", damping: 25 }}\n            className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg\"\n          >\n            <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n            <div className=\"p-6 space-y-4\">\n              <div className=\"relative w-full\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Where are you?\"\n                  value={formData.pickup?.address || \"\"}\n                  readOnly\n                  onClick={() => {\n                    setActiveInput(\"pickup\")\n                    setBookingState(BOOKING_STATES.SELECTING_LOCATION)\n                  }}\n                  className=\"w-full p-4 pl-12 pr-12 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-[#FFA500]\"\n                />\n                <MapPin className=\"absolute left-4 top-1/2 -translate-y-1/2 text-[#FFA500] w-5 h-5\" />\n                {formData.pickup && (\n                  <button\n                    onClick={() => handleEditLocation(\"pickup\")}\n                    className=\"absolute right-4 top-1/2 -translate-y-1/2 p-1 hover:bg-gray-100 rounded-full\"\n                  >\n                    <Edit2 className=\"w-4 h-4 text-gray-500\" />\n                  </button>\n                )}\n              </div>\n\n              <div className=\"relative w-full\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Where to?\"\n                  value={formData.dropoff?.address || \"\"}\n                  readOnly\n                  onClick={() => {\n                    setActiveInput(\"dropoff\")\n                    setBookingState(BOOKING_STATES.SELECTING_LOCATION)\n                  }}\n                  className=\"w-full p-4 pl-12 pr-12 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-[#FFA500]\"\n                />\n                <MapPin className=\"absolute left-4 top-1/2 -translate-y-1/2 text-[#FFA500] w-5 h-5\" />\n                {formData.dropoff && (\n                  <button\n                    onClick={() => handleEditLocation(\"dropoff\")}\n                    className=\"absolute right-4 top-1/2 -translate-y-1/2 p-1 hover:bg-gray-100 rounded-full\"\n                  >\n                    <Edit2 className=\"w-4 h-4 text-gray-500\" />\n                  </button>\n                )}\n              </div>\n\n              {formData.pickup && formData.dropoff && (\n                <button\n                  onClick={() => setBookingState(BOOKING_STATES.CONFIRMING_LOCATIONS)}\n                  className=\"w-full py-4 bg-[#FFA500] text-white rounded-full font-medium hover:bg-[#FFD700] transition-colors\"\n                >\n                  Confirm Locations\n                </button>\n              )}\n            </div>\n          </motion.div>\n        )}\n\n        {bookingState === BOOKING_STATES.SELECTING_LOCATION && !isMapSelection && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-white z-10\"\n          >\n            <div className=\"p-4 border-b flex items-center gap-4\">\n              <button\n                onClick={() => {\n                  setActiveInput(null)\n                  setBookingState(BOOKING_STATES.INITIAL)\n                  setSearchQuery(\"\")\n                  setSearchResults([])\n                }}\n              >\n                <ArrowLeft className=\"w-6 h-6\" />\n              </button>\n              <input\n                type=\"text\"\n                placeholder={`Search for ${activeInput === \"pickup\" ? \"pickup\" : \"destination\"}...`}\n                value={searchQuery}\n                onChange={(e) => {\n                  setSearchQuery(e.target.value)\n                  handleSearch(e.target.value)\n                }}\n                className=\"flex-1 text-lg outline-none\"\n                autoFocus\n              />\n              {searchQuery && (\n                <button\n                  onClick={() => {\n                    setSearchQuery(\"\")\n                    setSearchResults([])\n                  }}\n                >\n                  <X className=\"w-6 h-6 text-gray-400\" />\n                </button>\n              )}\n            </div>\n\n            <div className=\"overflow-auto h-[calc(100vh-72px)]\">\n              <button\n                onClick={() => setIsMapSelection(true)}\n                className=\"w-full p-4 flex items-center gap-3 hover:bg-gray-50 border-b\"\n              >\n                <div className=\"w-10 h-10 rounded-full bg-[#FFA500]/10 flex items-center justify-center\">\n                  <Navigation className=\"w-5 h-5 text-[#FFA500]\" />\n                </div>\n                <span className=\"font-medium\">Choose on map</span>\n              </button>\n\n              {searchResults.map((result) => (\n                <button\n                  key={result.place_id}\n                  onClick={() => {\n                    const placesService = new google.maps.places.PlacesService(document.createElement(\"div\"))\n                    placesService.getDetails(\n                      {\n                        placeId: result.place_id,\n                        fields: [\"formatted_address\", \"geometry\"],\n                      },\n                      (place, status) => {\n                        if (status === \"OK\" && place.geometry) {\n                          handleLocationSelect({\n                            address: place.formatted_address,\n                            coordinates: {\n                              lat: place.geometry.location.lat(),\n                              lng: place.geometry.location.lng(),\n                            },\n                          })\n                        }\n                      },\n                    )\n                  }}\n                  className=\"w-full p-4 flex items-center gap-3 hover:bg-gray-50 border-b\"\n                >\n                  <MapPin className=\"w-5 h-5 text-gray-400\" />\n                  <div className=\"text-left\">\n                    <p className=\"font-medium\">{result.structured_formatting.main_text}</p>\n                    <p className=\"text-sm text-gray-500\">{result.structured_formatting.secondary_text}</p>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </motion.div>\n        )}\n\n        {isMapSelection && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 z-20\"\n          >\n            <div className=\"absolute top-4 left-4 z-30\">\n              <button onClick={() => setIsMapSelection(false)} className=\"p-2 bg-white rounded-full shadow-lg\">\n                <ArrowLeft className=\"w-6 h-6\" />\n              </button>\n            </div>\n            <div className=\"absolute bottom-8 left-1/2 -translate-x-1/2 z-30\">\n              <button\n                onClick={() => setIsMapSelection(false)}\n                className=\"px-12 py-3 bg-[#FFA500] text-white rounded-full font-medium shadow-lg\"\n              >\n                Confirm Location\n              </button>\n            </div>\n          </motion.div>\n        )}\n\n        {bookingState === BOOKING_STATES.CONFIRMING_LOCATIONS && (\n          <motion.div\n            initial={{ y: \"100%\" }}\n            animate={{ y: 0 }}\n            exit={{ y: \"100%\" }}\n            className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg\"\n          >\n            <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n            <div className=\"p-6 space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-3\">\n                  <MapPin className=\"w-5 h-5 text-[#FFA500] mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Pickup</p>\n                    <p className=\"font-medium\">{formData.pickup?.address}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start gap-3\">\n                  <MapPin className=\"w-5 h-5 text-[#FFA500] mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-gray-500\">Dropoff</p>\n                    <p className=\"font-medium\">{formData.dropoff?.address}</p>\n                  </div>\n                </div>\n              </div>\n\n              {routeDetails && (\n                <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Estimated fare</span>\n                    <span className=\"font-medium\">{routeDetails.fare}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Trip duration</span>\n                    <span className=\"font-medium\">{routeDetails.duration}</span>\n                  </div>\n                </div>\n              )}\n\n              <button\n                onClick={handleRequestRide}\n                className=\"w-full py-4 bg-[#FFA500] text-white rounded-full font-medium hover:bg-[#FFD700] transition-colors\"\n              >\n                Request Ride\n              </button>\n            </div>\n          </motion.div>\n        )}\n\n        {bookingState === BOOKING_STATES.FINDING_DRIVERS && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            className=\"absolute inset-0 flex items-center justify-center px-4\"\n          >\n            <div className=\"bg-white rounded-2xl shadow-lg p-6 w-full max-w-md text-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"w-16 h-16 rounded-full bg-[#FFA500]/10 flex items-center justify-center\">\n                  <Search className=\"w-8 h-8 text-[#FFA500] animate-pulse\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Finding your driver</h3>\n                <p className=\"text-gray-500\">Looking for nearby drivers...</p>\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        {bookingState === BOOKING_STATES.DRIVER_FOUND && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            className=\"absolute inset-0 flex items-center justify-center px-4\"\n          >\n            <div className=\"bg-white rounded-2xl shadow-lg p-6 w-full max-w-md text-center\">\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"w-16 h-16 rounded-full bg-green-100 flex items-center justify-center\">\n                  <CheckCircle2 className=\"w-8 h-8 text-green-500\" />\n                </div>\n                <h3 className=\"text-xl font-semibold\">Driver Found!</h3>\n                <p className=\"text-gray-500\">Your ride is confirmed</p>\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        {(bookingState === BOOKING_STATES.DRIVER_ACCEPTED || bookingState === BOOKING_STATES.DRIVER_ARRIVING) && (\n          <motion.div\n            initial={{ y: \"100%\" }}\n            animate={{ y: 0 }}\n            exit={{ y: \"100%\" }}\n            className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg\"\n          >\n            <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n            <div className=\"p-6 space-y-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"w-16 h-16 rounded-full bg-gray-200 overflow-hidden\">\n                  <img\n                    src={selectedDriver.photo || \"/placeholder.svg\"}\n                    alt={selectedDriver.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{selectedDriver.name}</h3>\n                  <p className=\"text-gray-500\">\n                    {selectedDriver.car} • {selectedDriver.plate}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Driver Status</span>\n                  <span className=\"font-medium text-green-600\">On the way</span>\n                </div>\n                {routeDetails && (\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Estimated arrival</span>\n                    <span className=\"font-medium\">{routeDetails.pickupEta} mins</span>\n                  </div>\n                )}\n              </div>\n\n              <button\n                onClick={() => {\n                  setBookingState(BOOKING_STATES.INITIAL)\n                  setFormData({ pickup: null, dropoff: null })\n                  setSelectedDriver(null)\n                  setDriverLocation(null)\n                }}\n                className=\"w-full py-4 bg-red-500 text-white rounded-full font-medium hover:bg-red-600 transition-colors\"\n              >\n                Cancel Ride\n              </button>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}\n\n","size_bytes":19029},"components/booking/BookingInterface.tsx":{"content":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { BOOKING_STATES } from '@/config/constants';\nimport type { BookingState, Location, RouteDetails, Driver } from '@/types';\nimport MapView from '@/components/map/MapView';\nimport LocationSelector from './LocationSelector';\nimport RideConfirmation from './RideConfirmation';\nimport DriverSearch from './DriverSearch';\nimport DriverTracking from './DriverTracking';\n\nexport default function BookingInterface() {\n  const [bookingState, setBookingState] = useState<BookingState>({\n    pickup: null,\n    dropoff: null,\n    selectedDriver: null,\n    routeDetails: null,\n    status: BOOKING_STATES.INITIAL,\n  });\n\n  const [activeInput, setActiveInput] = useState<'pickup' | 'dropoff' | null>(null);\n  const [driverLocation, setDriverLocation] = useState<{ lat: number; lng: number } | null>(null);\n\n  const handleLocationSelect = useCallback((location: Location) => {\n    if (activeInput === 'pickup') {\n      setBookingState(prev => ({\n        ...prev,\n        pickup: location,\n      }));\n    } else if (activeInput === 'dropoff') {\n      setBookingState(prev => ({\n        ...prev,\n        dropoff: location,\n      }));\n    }\n\n    setActiveInput(null);\n    \n    // If both locations are set, move to confirmation\n    if (bookingState.pickup && activeInput === 'dropoff') {\n      setBookingState(prev => ({\n        ...prev,\n        status: BOOKING_STATES.CONFIRMING_LOCATIONS,\n      }));\n    } else if (bookingState.dropoff && activeInput === 'pickup') {\n      setBookingState(prev => ({\n        ...prev,\n        status: BOOKING_STATES.CONFIRMING_LOCATIONS,\n      }));\n    } else {\n      setBookingState(prev => ({\n        ...prev,\n        status: BOOKING_STATES.INITIAL,\n      }));\n    }\n  }, [activeInput, bookingState.pickup, bookingState.dropoff]);\n\n  const handleRouteCalculated = useCallback((details: RouteDetails) => {\n    setBookingState(prev => ({\n      ...prev,\n      routeDetails: details,\n    }));\n  }, []);\n\n  const handleRequestRide = useCallback(async () => {\n    if (!bookingState.pickup) return;\n\n    setBookingState(prev => ({\n      ...prev,\n      status: BOOKING_STATES.FINDING_DRIVERS,\n    }));\n\n    try {\n      // Search for available drivers\n      const response = await fetch('/api/booking/search-drivers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          pickup_location: {\n            lat: bookingState.pickup.coordinates.lat,\n            lng: bookingState.pickup.coordinates.lng,\n          },\n          radius: 10, // 10km radius\n        }),\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to find drivers');\n      }\n\n      if (data.drivers && data.drivers.length > 0) {\n        // Convert the first available driver to our expected Driver format\n        const apiDriver = data.drivers[0];\n        const driver: Driver = {\n          id: apiDriver.id,\n          name: apiDriver.name,\n          email: '', // Not provided by API\n          phone: apiDriver.phone,\n          rating: apiDriver.rating,\n          ridesCompleted: apiDriver.total_rides,\n          favoriteLocations: [],\n          paymentMethods: [],\n          rideHistory: [],\n          emergencyContacts: [],\n          twoFactorEnabled: false,\n          status: 'active',\n          vehicle: {\n            make: apiDriver.vehicle.make,\n            model: apiDriver.vehicle.model,\n            year: apiDriver.vehicle.year,\n            color: apiDriver.vehicle.color,\n            licensePlate: apiDriver.vehicle.plate,\n            insurance: {\n              provider: 'Verified',\n              policyNumber: 'VERIFIED',\n              expiryDate: '2025-12-31',\n            },\n          },\n          documents: [],\n          earnings: {\n            total: 0,\n            lastWeek: 0,\n            currentWeek: 0,\n            pending: 0,\n            stats: {\n              totalTrips: apiDriver.total_rides,\n              averageRating: apiDriver.rating,\n              completionRate: 98,\n              cancellationRate: 2,\n            },\n          },\n          schedule: {},\n          performance: {\n            rating: apiDriver.rating,\n            acceptance: 95,\n            completion: 98,\n          },\n        };\n\n        setBookingState(prev => ({\n          ...prev,\n          selectedDriver: driver,\n          status: BOOKING_STATES.DRIVER_FOUND,\n        }));\n\n        // Simulate driver accepting the ride\n        setTimeout(() => {\n          setBookingState(prev => ({\n            ...prev,\n            status: BOOKING_STATES.DRIVER_ACCEPTED,\n          }));\n\n          // Set initial driver location\n          const startLocation = {\n            lat: apiDriver.location.lat,\n            lng: apiDriver.location.lng,\n          };\n          setDriverLocation(startLocation);\n          \n          setBookingState(prev => ({\n            ...prev,\n            status: BOOKING_STATES.DRIVER_ARRIVING,\n          }));\n        }, 2000);\n      } else {\n        // No drivers found\n        setBookingState(prev => ({\n          ...prev,\n          status: BOOKING_STATES.NO_DRIVERS_FOUND,\n        }));\n      }\n    } catch (error) {\n      console.error('Error searching for drivers:', error);\n      setBookingState(prev => ({\n        ...prev,\n        status: BOOKING_STATES.ERROR,\n      }));\n    }\n  }, [bookingState.pickup]);\n\n  const handleCancelRide = useCallback(() => {\n    setBookingState({\n      pickup: null,\n      dropoff: null,\n      selectedDriver: null,\n      routeDetails: null,\n      status: BOOKING_STATES.INITIAL,\n    });\n    setDriverLocation(null);\n    setActiveInput(null);\n  }, []);\n\n  const handleEditLocation = useCallback((type: 'pickup' | 'dropoff') => {\n    setActiveInput(type);\n    setBookingState(prev => ({\n      ...prev,\n      status: BOOKING_STATES.SELECTING_LOCATION,\n    }));\n  }, []);\n\n  return (\n    <div className=\"h-screen w-full relative overflow-hidden\">\n      {/* Map Background */}\n      <div className=\"absolute inset-0\">\n        <MapView\n          pickup={bookingState.pickup}\n          dropoff={bookingState.dropoff}\n          driverLocation={driverLocation}\n          onRouteCalculated={handleRouteCalculated}\n          selectionMode={bookingState.status === BOOKING_STATES.SELECTING_LOCATION}\n          onLocationSelect={handleLocationSelect}\n        />\n      </div>\n\n      {/* Overlay Components */}\n      <AnimatePresence mode=\"wait\">\n        {bookingState.status === BOOKING_STATES.INITIAL && (\n          <LocationSelector\n            key=\"location-selector\"\n            pickup={bookingState.pickup}\n            dropoff={bookingState.dropoff}\n            onLocationClick={(type) => {\n              setActiveInput(type);\n              setBookingState(prev => ({\n                ...prev,\n                status: BOOKING_STATES.SELECTING_LOCATION,\n              }));\n            }}\n            onEditLocation={handleEditLocation}\n            onConfirmLocations={() => setBookingState(prev => ({\n              ...prev,\n              status: BOOKING_STATES.CONFIRMING_LOCATIONS,\n            }))}\n          />\n        )}\n\n        {bookingState.status === BOOKING_STATES.SELECTING_LOCATION && (\n          <LocationSelector\n            key=\"location-search\"\n            pickup={bookingState.pickup}\n            dropoff={bookingState.dropoff}\n            activeInput={activeInput}\n            onLocationSelect={handleLocationSelect}\n            onBack={() => {\n              setActiveInput(null);\n              setBookingState(prev => ({\n                ...prev,\n                status: BOOKING_STATES.INITIAL,\n              }));\n            }}\n            onLocationClick={() => {}}\n            onEditLocation={handleEditLocation}\n            onConfirmLocations={() => {}}\n          />\n        )}\n\n        {bookingState.status === BOOKING_STATES.CONFIRMING_LOCATIONS && (\n          <RideConfirmation\n            key=\"ride-confirmation\"\n            pickup={bookingState.pickup!}\n            dropoff={bookingState.dropoff!}\n            routeDetails={bookingState.routeDetails}\n            onRequestRide={handleRequestRide}\n            onEditLocation={handleEditLocation}\n          />\n        )}\n\n        {bookingState.status === BOOKING_STATES.FINDING_DRIVERS && (\n          <DriverSearch key=\"driver-search\" />\n        )}\n\n        {(bookingState.status === BOOKING_STATES.DRIVER_FOUND ||\n          bookingState.status === BOOKING_STATES.DRIVER_ACCEPTED ||\n          bookingState.status === BOOKING_STATES.DRIVER_ARRIVING) && (\n          <DriverTracking\n            key=\"driver-tracking\"\n            driver={bookingState.selectedDriver!}\n            routeDetails={bookingState.routeDetails}\n            status={bookingState.status}\n            onCancelRide={handleCancelRide}\n          />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":8947},"components/booking/DriverInfo.js":{"content":"\"use client\"\n\nimport Image from \"next/image\"\nimport { Star } from \"lucide-react\"\n\nexport default function DriverInfo({ driver, fare, duration }) {\n  return (\n    <div className=\"flex items-center gap-4\">\n      <div className=\"relative\">\n        <div className=\"w-16 h-16 rounded-full overflow-hidden relative\">\n          <Image src={driver.photo || \"/placeholder.svg\"} alt={driver.name} fill className=\"object-cover\" />\n        </div>\n        <div className=\"absolute -bottom-1 -right-1 bg-[#6C63FF] text-white text-xs px-2 py-1 rounded-full\">\n          {driver.rating}\n        </div>\n      </div>\n\n      <div className=\"flex-1\">\n        <h3 className=\"text-lg font-semibold\">{driver.name}</h3>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-600\">{driver.trips} trips</span>\n          <div className=\"flex\">\n            {[...Array(5)].map((_, i) => (\n              <Star\n                key={i}\n                className={`w-4 h-4 ${i < Math.floor(driver.rating) ? \"fill-[#6C63FF]\" : \"fill-gray-200\"}`}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"text-right\">\n        <p className=\"text-2xl font-bold text-[#6C63FF]\">£{fare}</p>\n        <p className=\"text-sm text-gray-600\">~{duration}</p>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":1327},"components/booking/DriverSearch.tsx":{"content":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { Search } from 'lucide-react';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\n\nexport default function DriverSearch() {\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"absolute inset-0 flex items-center justify-center px-4 bg-black/20\"\n    >\n      <div className=\"bg-white rounded-2xl shadow-lg p-8 w-full max-w-md text-center\">\n        <div className=\"flex flex-col items-center space-y-6\">\n          <div className=\"relative\">\n            <div className=\"w-20 h-20 rounded-full bg-primary-100 flex items-center justify-center\">\n              <Search className=\"w-10 h-10 text-primary-500\" />\n            </div>\n            {/* Animated rings */}\n            <div className=\"absolute inset-0 rounded-full border-2 border-primary-200 animate-pulse-ring\" />\n            <div className=\"absolute inset-0 rounded-full border-2 border-primary-200 animate-pulse-ring\" style={{ animationDelay: '1s' }} />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <h3 className=\"text-2xl font-semibold text-gray-800\">Finding your driver</h3>\n            <p className=\"text-gray-500\">Looking for nearby drivers...</p>\n          </div>\n          \n          <LoadingSpinner size=\"lg\" />\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":1450},"components/booking/DriverTracking.tsx":{"content":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { CheckCircle2, Phone, MessageSquare, Star } from 'lucide-react';\nimport type { Driver, RouteDetails } from '@/types';\nimport { Button } from '@/components/ui/Button';\nimport { BOOKING_STATES } from '@/config/constants';\n\ninterface DriverTrackingProps {\n  driver: Driver;\n  routeDetails: RouteDetails | null;\n  status: string;\n  onCancelRide: () => void;\n}\n\nexport default function DriverTracking({\n  driver,\n  routeDetails,\n  status,\n  onCancelRide,\n}: DriverTrackingProps) {\n  const getStatusMessage = () => {\n    switch (status) {\n      case BOOKING_STATES.DRIVER_FOUND:\n        return 'Driver Found!';\n      case BOOKING_STATES.DRIVER_ACCEPTED:\n        return 'Driver Accepted';\n      case BOOKING_STATES.DRIVER_ARRIVING:\n        return 'Driver is on the way';\n      default:\n        return 'Connecting...';\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case BOOKING_STATES.DRIVER_FOUND:\n        return 'text-green-600';\n      case BOOKING_STATES.DRIVER_ACCEPTED:\n        return 'text-blue-600';\n      case BOOKING_STATES.DRIVER_ARRIVING:\n        return 'text-primary-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  // Show success popup for driver found\n  if (status === BOOKING_STATES.DRIVER_FOUND) {\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.9 }}\n        className=\"absolute inset-0 flex items-center justify-center px-4 bg-black/20\"\n      >\n        <div className=\"bg-white rounded-2xl shadow-lg p-8 w-full max-w-md text-center\">\n          <div className=\"flex flex-col items-center space-y-6\">\n            <div className=\"w-20 h-20 rounded-full bg-green-100 flex items-center justify-center\">\n              <CheckCircle2 className=\"w-10 h-10 text-green-500\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <h3 className=\"text-2xl font-semibold text-gray-800\">Driver Found!</h3>\n              <p className=\"text-gray-500\">Your ride is confirmed</p>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    );\n  }\n\n  // Main driver tracking interface\n  return (\n    <motion.div\n      initial={{ y: '100%' }}\n      animate={{ y: 0 }}\n      exit={{ y: '100%' }}\n      transition={{ type: 'spring', damping: 25 }}\n      className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg\"\n    >\n      <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n      <div className=\"p-6 space-y-6\">\n        {/* Driver Info */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-16 h-16 rounded-full bg-gray-200 overflow-hidden flex-shrink-0\">\n            <img\n              src={`https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=64&h=64&fit=crop`}\n              alt={driver.name}\n              className=\"w-full h-full object-cover\"\n            />\n          </div>\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold text-lg\">{driver.name}</h3>\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n              <span>{driver.rating}</span>\n              <span>•</span>\n              <span>{driver.vehicle.make} {driver.vehicle.model}</span>\n              <span>•</span>\n              <span>{driver.vehicle.licensePlate}</span>\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Phone className=\"w-4 h-4\" />\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <MessageSquare className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Status */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-gray-600\">Status</span>\n            <span className={`font-medium ${getStatusColor()}`}>\n              {getStatusMessage()}\n            </span>\n          </div>\n          {routeDetails?.pickupEta && (\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-600\">Estimated arrival</span>\n              <span className=\"font-medium\">{routeDetails.pickupEta} mins</span>\n            </div>\n          )}\n        </div>\n\n        {/* Trip Details */}\n        {routeDetails && (\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h4 className=\"font-medium text-gray-800 mb-2\">Trip Details</h4>\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"text-gray-600\">Distance</span>\n                <p className=\"font-medium\">{routeDetails.distance}</p>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Duration</span>\n                <p className=\"font-medium\">{routeDetails.duration}</p>\n              </div>\n              <div>\n                <span className=\"text-gray-600\">Fare</span>\n                <p className=\"font-medium text-primary-600\">{routeDetails.fare}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex gap-3\">\n          <Button\n            variant=\"outline\"\n            onClick={onCancelRide}\n            className=\"flex-1 text-red-600 border-red-200 hover:bg-red-50\"\n          >\n            Cancel Ride\n          </Button>\n          <Button className=\"flex-1\">\n            Share Trip\n          </Button>\n        </div>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":5751},"components/booking/LocationSelectionModal.js":{"content":"\"use client\"\n\nimport { useState, useCallback } from \"react\"\nimport { MapPin, X, ArrowLeft } from \"lucide-react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\n\nexport default function LocationSelectionModal({ isOpen, onClose, onSelect, type }) {\n  const [mode, setMode] = useState(\"search\")\n  const [searchQuery, setSearchQuery] = useState(\"\")\n  const [suggestions] = useState([\n    \"Lekki Conservation Centre\",\n    \"Victoria Garden City\",\n    \"Filmhouse Cinemas IMAX Lekki\",\n    \"Freedom Park Lagos\",\n  ])\n\n  const handleSearch = useCallback(\n    (query) => {\n      setSearchQuery(query)\n      // In a real app, this would call your Places API\n      const filtered = suggestions.filter((place) => place.toLowerCase().includes(query.toLowerCase()))\n      setSuggestions(filtered)\n    },\n    [suggestions],\n  )\n\n  const handleMapSelect = useCallback(\n    (coordinates) => {\n      // In a real app, you would reverse geocode these coordinates\n      onSelect(\"Selected location\", coordinates)\n      onClose()\n    },\n    [onClose, onSelect],\n  )\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          initial={{ opacity: 0, y: \"100%\" }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: \"100%\" }}\n          className=\"fixed inset-0 bg-white z-50\"\n        >\n          {mode === \"search\" ? (\n            <div className=\"h-full flex flex-col\">\n              <div className=\"p-4 border-b flex items-center gap-4\">\n                <button onClick={onClose}>\n                  <ArrowLeft className=\"w-6 h-6\" />\n                </button>\n                <div className=\"flex-1\">\n                  <input\n                    type=\"text\"\n                    placeholder={type === \"pickup\" ? \"Where are you?\" : \"Where to?\"}\n                    value={searchQuery}\n                    onChange={(e) => handleSearch(e.target.value)}\n                    className=\"w-full p-2 outline-none text-lg\"\n                    autoFocus\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex-1 overflow-auto\">\n                <button\n                  onClick={() => setMode(\"map\")}\n                  className=\"w-full p-4 flex items-center gap-3 hover:bg-gray-50 border-b\"\n                >\n                  <div className=\"w-10 h-10 rounded-full bg-[#FFA500]/10 flex items-center justify-center\">\n                    <MapPin className=\"w-5 h-5 text-[#FFA500]\" />\n                  </div>\n                  <span className=\"font-medium\">Choose on map</span>\n                </button>\n\n                {suggestions.map((place, index) => (\n                  <button\n                    key={index}\n                    onClick={() => {\n                      onSelect(place, { lat: 0, lng: 0 }) // Add real coordinates in production\n                      onClose()\n                    }}\n                    className=\"w-full p-4 flex items-center gap-3 hover:bg-gray-50 border-b\"\n                  >\n                    <MapPin className=\"w-5 h-5 text-gray-400\" />\n                    <span>{place}</span>\n                  </button>\n                ))}\n              </div>\n            </div>\n          ) : (\n            <div className=\"h-full relative\">\n              <div className=\"absolute inset-0\">\n                <MapView onLocationSelect={handleMapSelect} selectionMode={true} showSearchBar={false} />\n              </div>\n              <button\n                onClick={() => setMode(\"search\")}\n                className=\"absolute top-4 left-4 p-2 bg-white rounded-full shadow-lg\"\n              >\n                <ArrowLeft className=\"w-6 h-6\" />\n              </button>\n              <button className=\"absolute bottom-8 left-1/2 -translate-x-1/2 px-12 py-3 bg-[#FFA500] text-white rounded-full font-medium\">\n                Done\n              </button>\n            </div>\n          )}\n        </motion.div>\n      )}\n    </AnimatePresence>\n  )\n}\n\n","size_bytes":3937},"components/booking/LocationSelector.tsx":{"content":"'use client';\n\nimport { useState, useCallback } from 'react';\nimport { motion } from 'framer-motion';\nimport { MapPin, Search, ArrowLeft, X, Edit2, Navigation } from 'lucide-react';\nimport type { Location } from '@/types';\nimport { Button } from '@/components/ui/Button';\nimport { Input } from '@/components/ui/Input';\nimport { debounce } from '@/lib/utils';\n\ninterface LocationSelectorProps {\n  pickup: Location | null;\n  dropoff: Location | null;\n  activeInput?: 'pickup' | 'dropoff' | null;\n  onLocationClick: (type: 'pickup' | 'dropoff') => void;\n  onLocationSelect?: (location: Location) => void;\n  onEditLocation: (type: 'pickup' | 'dropoff') => void;\n  onConfirmLocations: () => void;\n  onBack?: () => void;\n}\n\nexport default function LocationSelector({\n  pickup,\n  dropoff,\n  activeInput,\n  onLocationClick,\n  onLocationSelect,\n  onEditLocation,\n  onConfirmLocations,\n  onBack,\n}: LocationSelectorProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<any[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const handleSearch = useCallback(\n    debounce(async (query: string) => {\n      if (!query.trim() || !window.google) {\n        setSearchResults([]);\n        return;\n      }\n\n      setIsSearching(true);\n      try {\n        const autocomplete = new window.google.maps.places.AutocompleteService();\n        const predictions = await new Promise<any[]>((resolve, reject) => {\n          autocomplete.getPlacePredictions(\n            {\n              input: query,\n              componentRestrictions: { country: 'us' },\n            },\n            (results, status) => {\n              if (status === 'OK' && results) {\n                resolve(results);\n              } else {\n                resolve([]);\n              }\n            }\n          );\n        });\n        setSearchResults(predictions);\n      } catch (error) {\n        console.error('Search error:', error);\n        setSearchResults([]);\n      } finally {\n        setIsSearching(false);\n      }\n    }, 300),\n    []\n  );\n\n  const handlePlaceSelect = useCallback(\n    (placeId: string, description: string) => {\n      if (!window.google || !onLocationSelect) return;\n\n      const placesService = new window.google.maps.places.PlacesService(\n        document.createElement('div')\n      );\n\n      placesService.getDetails(\n        {\n          placeId,\n          fields: ['formatted_address', 'geometry'],\n        },\n        (place, status) => {\n          if (status === 'OK' && place?.geometry?.location) {\n            onLocationSelect({\n              address: place.formatted_address || description,\n              coordinates: {\n                lat: place.geometry.location.lat(),\n                lng: place.geometry.location.lng(),\n              },\n            });\n          }\n        }\n      );\n    },\n    [onLocationSelect]\n  );\n\n  // Search interface\n  if (activeInput) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"absolute inset-0 bg-white z-10\"\n      >\n        <div className=\"p-4 border-b flex items-center gap-4\">\n          {onBack && (\n            <button onClick={onBack} className=\"p-2 hover:bg-gray-100 rounded-full\">\n              <ArrowLeft className=\"w-6 h-6\" />\n            </button>\n          )}\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <Input\n              type=\"text\"\n              placeholder={`Search for ${activeInput === 'pickup' ? 'pickup location' : 'destination'}...`}\n              value={searchQuery}\n              onChange={(e) => {\n                setSearchQuery(e.target.value);\n                handleSearch(e.target.value);\n              }}\n              className=\"pl-10 pr-10\"\n              autoFocus\n            />\n            {searchQuery && (\n              <button\n                onClick={() => {\n                  setSearchQuery('');\n                  setSearchResults([]);\n                }}\n                className=\"absolute right-3 top-1/2 -translate-y-1/2 p-1 hover:bg-gray-100 rounded-full\"\n              >\n                <X className=\"w-4 h-4 text-gray-400\" />\n              </button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"overflow-auto h-[calc(100vh-80px)]\">\n          <button\n            onClick={() => {\n              // Handle map selection\n              console.log('Choose on map clicked');\n            }}\n            className=\"w-full p-4 flex items-center gap-3 hover:bg-gray-50 border-b\"\n          >\n            <div className=\"w-10 h-10 rounded-full bg-primary-100 flex items-center justify-center\">\n              <Navigation className=\"w-5 h-5 text-primary-500\" />\n            </div>\n            <span className=\"font-medium\">Choose on map</span>\n          </button>\n\n          {isSearching && (\n            <div className=\"p-4 text-center text-gray-500\">\n              Searching...\n            </div>\n          )}\n\n          {searchResults.map((result) => (\n            <button\n              key={result.place_id}\n              onClick={() => handlePlaceSelect(result.place_id, result.description)}\n              className=\"w-full p-4 flex items-center gap-3 hover:bg-gray-50 border-b text-left\"\n            >\n              <MapPin className=\"w-5 h-5 text-gray-400 flex-shrink-0\" />\n              <div>\n                <p className=\"font-medium\">{result.structured_formatting.main_text}</p>\n                <p className=\"text-sm text-gray-500\">\n                  {result.structured_formatting.secondary_text}\n                </p>\n              </div>\n            </button>\n          ))}\n        </div>\n      </motion.div>\n    );\n  }\n\n  // Main location selector interface\n  return (\n    <motion.div\n      initial={{ y: '100%' }}\n      animate={{ y: 0 }}\n      exit={{ y: '100%' }}\n      transition={{ type: 'spring', damping: 25 }}\n      className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg\"\n    >\n      <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n      <div className=\"p-6 space-y-4\">\n        <h2 className=\"text-xl font-semibold mb-4\">Where to?</h2>\n        \n        {/* Pickup Location */}\n        <div className=\"relative\">\n          <button\n            onClick={() => onLocationClick('pickup')}\n            className=\"w-full p-4 pl-12 pr-12 border border-gray-300 rounded-full text-left focus:outline-none focus:ring-2 focus:ring-primary-500 hover:border-primary-300 transition-colors\"\n          >\n            <span className={pickup ? 'text-gray-900' : 'text-gray-500'}>\n              {pickup?.address || 'Where are you?'}\n            </span>\n          </button>\n          <MapPin className=\"absolute left-4 top-1/2 -translate-y-1/2 text-primary-500 w-5 h-5\" />\n          {pickup && (\n            <button\n              onClick={() => onEditLocation('pickup')}\n              className=\"absolute right-4 top-1/2 -translate-y-1/2 p-1 hover:bg-gray-100 rounded-full\"\n            >\n              <Edit2 className=\"w-4 h-4 text-gray-500\" />\n            </button>\n          )}\n        </div>\n\n        {/* Dropoff Location */}\n        <div className=\"relative\">\n          <button\n            onClick={() => onLocationClick('dropoff')}\n            className=\"w-full p-4 pl-12 pr-12 border border-gray-300 rounded-full text-left focus:outline-none focus:ring-2 focus:ring-primary-500 hover:border-primary-300 transition-colors\"\n          >\n            <span className={dropoff ? 'text-gray-900' : 'text-gray-500'}>\n              {dropoff?.address || 'Where to?'}\n            </span>\n          </button>\n          <MapPin className=\"absolute left-4 top-1/2 -translate-y-1/2 text-primary-500 w-5 h-5\" />\n          {dropoff && (\n            <button\n              onClick={() => onEditLocation('dropoff')}\n              className=\"absolute right-4 top-1/2 -translate-y-1/2 p-1 hover:bg-gray-100 rounded-full\"\n            >\n              <Edit2 className=\"w-4 h-4 text-gray-500\" />\n            </button>\n          )}\n        </div>\n\n        {pickup && dropoff && (\n          <Button onClick={onConfirmLocations} className=\"w-full mt-6\">\n            Confirm Locations\n          </Button>\n        )}\n      </div>\n    </motion.div>\n  );\n}","size_bytes":8328},"components/booking/RideConfirmation.tsx":{"content":"'use client';\n\nimport { motion } from 'framer-motion';\nimport { MapPin, Clock, DollarSign, Edit2 } from 'lucide-react';\nimport type { Location, RouteDetails } from '@/types';\nimport { Button } from '@/components/ui/Button';\n\ninterface RideConfirmationProps {\n  pickup: Location;\n  dropoff: Location;\n  routeDetails: RouteDetails | null;\n  onRequestRide: () => void;\n  onEditLocation: (type: 'pickup' | 'dropoff') => void;\n}\n\nexport default function RideConfirmation({\n  pickup,\n  dropoff,\n  routeDetails,\n  onRequestRide,\n  onEditLocation,\n}: RideConfirmationProps) {\n  return (\n    <motion.div\n      initial={{ y: '100%' }}\n      animate={{ y: 0 }}\n      exit={{ y: '100%' }}\n      transition={{ type: 'spring', damping: 25 }}\n      className=\"absolute bottom-0 left-0 right-0 bg-white rounded-t-3xl shadow-lg\"\n    >\n      <div className=\"w-12 h-1 bg-gray-300 rounded-full mx-auto my-3\" />\n      <div className=\"p-6 space-y-6\">\n        <h2 className=\"text-xl font-semibold\">Confirm your ride</h2>\n        \n        <div className=\"space-y-4\">\n          {/* Pickup Location */}\n          <div className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\">\n            <MapPin className=\"w-5 h-5 text-primary-500 mt-1 flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-gray-500\">Pickup</p>\n              <p className=\"font-medium\">{pickup.address}</p>\n            </div>\n            <button\n              onClick={() => onEditLocation('pickup')}\n              className=\"p-1 hover:bg-gray-200 rounded-full\"\n            >\n              <Edit2 className=\"w-4 h-4 text-gray-500\" />\n            </button>\n          </div>\n\n          {/* Dropoff Location */}\n          <div className=\"flex items-start gap-3 p-3 bg-gray-50 rounded-lg\">\n            <MapPin className=\"w-5 h-5 text-primary-500 mt-1 flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm text-gray-500\">Dropoff</p>\n              <p className=\"font-medium\">{dropoff.address}</p>\n            </div>\n            <button\n              onClick={() => onEditLocation('dropoff')}\n              className=\"p-1 hover:bg-gray-200 rounded-full\"\n            >\n              <Edit2 className=\"w-4 h-4 text-gray-500\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Route Details */}\n        {routeDetails && (\n          <div className=\"bg-gray-50 p-4 rounded-lg space-y-3\">\n            <h3 className=\"font-medium text-gray-800\">Trip Details</h3>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <Clock className=\"w-4 h-4 text-gray-500 mr-1\" />\n                </div>\n                <p className=\"text-sm text-gray-500\">Duration</p>\n                <p className=\"font-medium\">{routeDetails.duration}</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <MapPin className=\"w-4 h-4 text-gray-500 mr-1\" />\n                </div>\n                <p className=\"text-sm text-gray-500\">Distance</p>\n                <p className=\"font-medium\">{routeDetails.distance}</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center mb-1\">\n                  <DollarSign className=\"w-4 h-4 text-gray-500 mr-1\" />\n                </div>\n                <p className=\"text-sm text-gray-500\">Estimated fare</p>\n                <p className=\"font-medium text-primary-600\">{routeDetails.fare}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <Button onClick={onRequestRide} className=\"w-full\" size=\"lg\">\n          Request Ride\n        </Button>\n      </div>\n    </motion.div>\n  );\n}","size_bytes":3857},"components/dashboards/DriverDashboard.js":{"content":"// \"use client\"\n\n// import { useState } from \"react\"\n// import { MapPin, Clock, DollarSign, Users, Power } from \"lucide-react\"\n// import dynamic from \"next/dynamic\"\n\n// const Map = dynamic(() => import(\"@/components/Map\"), { ssr: false })\n\n// export default function DriverDashboard({ driver }) {\n//   const [isOnline, setIsOnline] = useState(true)\n//   const [currentRide, setCurrentRide] = useState(null)\n\n//   return (\n//     <div className=\"min-h-screen bg-[#F5F5F5]\">\n//       {/* Status Bar */}\n//       <div className=\"bg-white p-4 shadow-sm flex items-center justify-between\">\n//         <div className=\"flex items-center space-x-4\">\n//           <div className={`h-3 w-3 rounded-full ${isOnline ? \"bg-green-500\" : \"bg-red-500\"}`} />\n//           <span className=\"font-medium\">{isOnline ? \"Online\" : \"Offline\"}</span>\n//         </div>\n//         <button\n//           onClick={() => setIsOnline(!isOnline)}\n//           className={`flex items-center px-4 py-2 rounded-full ${\n//             isOnline ? \"bg-red-100 text-red-600\" : \"bg-green-100 text-green-600\"\n//           }`}\n//         >\n//           <Power className=\"w-4 h-4 mr-2\" />\n//           {isOnline ? \"Go Offline\" : \"Go Online\"}\n//         </button>\n//       </div>\n\n//       {/* Map Section */}\n//       <div className=\"relative h-[50vh] w-full\">\n//         <Map />\n//         {currentRide && (\n//           <div className=\"absolute bottom-4 left-4 right-4 bg-white p-4 rounded-lg shadow-lg\">\n//             <div className=\"flex items-center justify-between mb-2\">\n//               <h3 className=\"font-semibold\">Current Ride</h3>\n//               <span className=\"bg-[#6C63FF] text-white px-3 py-1 rounded-full text-sm\">In Progress</span>\n//             </div>\n//             <div className=\"flex items-center justify-between\">\n//               <div className=\"flex items-center\">\n//                 <Users className=\"w-5 h-5 text-gray-500 mr-2\" />\n//                 <span>{currentRide.passengerName}</span>\n//               </div>\n//               <span className=\"font-semibold\">${currentRide.amount}</span>\n//             </div>\n//           </div>\n//         )}\n//       </div>\n\n//       {/* Earnings & Stats */}\n//       <div className=\"bg-white -mt-8 relative rounded-t-3xl p-6 min-h-[40vh]\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Today's Summary</h2>\n\n//         <div className=\"grid grid-cols-2 gap-4 mb-6\">\n//           <div className=\"bg-[#6C63FF] p-4 rounded-lg text-white\">\n//             <p className=\"text-sm opacity-90\">Today's Earnings</p>\n//             <p className=\"text-3xl font-bold\">${driver?.todayStats?.earnings}</p>\n//           </div>\n//           <div className=\"bg-gray-50 p-4 rounded-lg\">\n//             <p className=\"text-sm text-gray-500\">Completed Rides</p>\n//             <p className=\"text-3xl font-semibold text-[#6C63FF]\">{driver?.todayStats?.completedRides}</p>\n//           </div>\n//         </div>\n\n//         <div className=\"space-y-4\">\n//           <h3 className=\"font-medium text-gray-500\">Recent Activity</h3>\n//           {driver?.recentActivity?.map((activity, index) => (\n//             <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n//               <div className=\"flex items-center\">\n//                 <div className=\"bg-[#6C63FF] bg-opacity-10 p-2 rounded-full\">\n//                   <Clock className=\"w-5 h-5 text-[#6C63FF]\" />\n//                 </div>\n//                 <div className=\"ml-3\">\n//                   <p className=\"font-medium\">{activity.type}</p>\n//                   <p className=\"text-sm text-gray-500\">{activity.time}</p>\n//                 </div>\n//               </div>\n//               <span className=\"font-semibold\">${activity.amount}</span>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Performance Metrics */}\n//         <div className=\"mt-6\">\n//           <h3 className=\"font-medium text-gray-500 mb-3\">Performance</h3>\n//           <div className=\"grid grid-cols-3 gap-4\">\n//             <div className=\"text-center\">\n//               <div className=\"text-2xl font-semibold text-[#6C63FF]\">{driver?.performance?.rating}★</div>\n//               <p className=\"text-sm text-gray-500\">Rating</p>\n//             </div>\n//             <div className=\"text-center\">\n//               <div className=\"text-2xl font-semibold text-[#6C63FF]\">{driver?.performance?.acceptance}%</div>\n//               <p className=\"text-sm text-gray-500\">Acceptance</p>\n//             </div>\n//             <div className=\"text-center\">\n//               <div className=\"text-2xl font-semibold text-[#6C63FF]\">{driver?.performance?.completion}%</div>\n//               <p className=\"text-sm text-gray-500\">Completion</p>\n//             </div>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\nimport React from 'react'\n\nexport default function DriverDashboard() {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n","size_bytes":4950},"components/dashboards/DriverDashboard.tsx":{"content":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { MapPin, Clock, DollarSign, Users, Power, Car } from 'lucide-react';\n\ninterface DriverDashboardProps {\n  driver: any;\n}\n\nexport default function DriverDashboard({ driver }: DriverDashboardProps) {\n  const [isOnline, setIsOnline] = useState(driver?.status === 'online');\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  const toggleOnlineStatus = async () => {\n    setIsUpdating(true);\n    try {\n      const response = await fetch('/api/driver', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          is_available: !isOnline,\n        }),\n      });\n\n      if (response.ok) {\n        setIsOnline(!isOnline);\n      } else {\n        console.error('Failed to update status');\n      }\n    } catch (error) {\n      console.error('Error updating status:', error);\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n\n  if (!driver) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-gray-500\">Loading driver dashboard...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Status Bar */}\n      <div className=\"bg-white p-4 rounded-lg shadow-sm flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className={`h-3 w-3 rounded-full ${isOnline ? 'bg-green-500' : 'bg-red-500'}`} />\n          <span className=\"font-medium\">{isOnline ? 'Online' : 'Offline'}</span>\n          <span className=\"text-sm text-gray-500\">\n            Rating: {driver.rating}/5.0 ({driver.ridesCompleted} rides)\n          </span>\n        </div>\n        <button\n          onClick={toggleOnlineStatus}\n          disabled={isUpdating}\n          className={`flex items-center px-4 py-2 rounded-full transition-colors ${\n            isOnline \n              ? 'bg-red-100 text-red-600 hover:bg-red-200' \n              : 'bg-green-100 text-green-600 hover:bg-green-200'\n          } ${isUpdating ? 'opacity-50 cursor-not-allowed' : ''}`}\n        >\n          <Power className=\"w-4 h-4 mr-2\" />\n          {isUpdating ? 'Updating...' : isOnline ? 'Go Offline' : 'Go Online'}\n        </button>\n      </div>\n\n      {/* Vehicle Info */}\n      <div className=\"bg-white p-4 rounded-lg shadow-sm\">\n        <div className=\"flex items-center space-x-3 mb-3\">\n          <Car className=\"w-5 h-5 text-blue-600\" />\n          <h3 className=\"font-semibold\">Vehicle Information</h3>\n        </div>\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span className=\"text-gray-500\">Vehicle:</span>\n            <p className=\"font-medium\">\n              {driver.vehicle.year} {driver.vehicle.make} {driver.vehicle.model}\n            </p>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Color:</span>\n            <p className=\"font-medium\">{driver.vehicle.color}</p>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">License Plate:</span>\n            <p className=\"font-medium\">{driver.vehicle.licensePlate}</p>\n          </div>\n          <div>\n            <span className=\"text-gray-500\">Status:</span>\n            <p className={`font-medium ${driver.documents.verified ? 'text-green-600' : 'text-yellow-600'}`}>\n              {driver.documents.verified ? 'Verified' : 'Pending Verification'}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Earnings & Stats */}\n      <div className=\"bg-white p-6 rounded-lg shadow-sm\">\n        <h2 className=\"text-xl font-semibold mb-4\">Today's Summary</h2>\n\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"bg-blue-600 p-4 rounded-lg text-white\">\n            <p className=\"text-sm opacity-90\">Today's Earnings</p>\n            <p className=\"text-3xl font-bold\">${driver.todayStats.earnings.toFixed(2)}</p>\n          </div>\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <p className=\"text-sm text-gray-500\">Completed Rides</p>\n            <p className=\"text-3xl font-semibold text-blue-600\">{driver.todayStats.completedRides}</p>\n          </div>\n        </div>\n\n        {/* Total Earnings */}\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-500\">Total Earnings</p>\n            <p className=\"text-lg font-semibold\">${driver.earnings.total.toFixed(2)}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-500\">Total Rides</p>\n            <p className=\"text-lg font-semibold\">{driver.ridesCompleted}</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-500\">Average Rating</p>\n            <p className=\"text-lg font-semibold\">{driver.rating}/5.0</p>\n          </div>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-medium text-gray-700\">Recent Activity</h3>\n          {driver.recentActivity && driver.recentActivity.length > 0 ? (\n            driver.recentActivity.slice(0, 5).map((activity: any, index: number) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-blue-100 p-2 rounded-full\">\n                    <MapPin className=\"w-4 h-4 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"font-medium text-sm\">{activity.passenger}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {activity.from} → {activity.to}\n                    </p>\n                    <p className=\"text-xs text-gray-500\">{activity.time}</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-semibold text-green-600\">${activity.amount.toFixed(2)}</p>\n                  <p className={`text-xs ${\n                    activity.status === 'completed' ? 'text-green-600' : \n                    activity.status === 'cancelled' ? 'text-red-600' : 'text-yellow-600'\n                  }`}>\n                    {activity.status}\n                  </p>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8\">\n              <Users className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n              <p className=\"text-gray-500\">No recent activity</p>\n              <p className=\"text-sm text-gray-400\">Go online to start receiving ride requests</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6776},"components/dashboards/UserDashboard.js":{"content":"// \"use client\"\n\n// import { useState } from \"react\"\n// import { MapPin, Clock, CreditCard, Car } from \"lucide-react\"\n// import dynamic from \"next/dynamic\"\n\n// // Import Map component dynamically to avoid SSR issues\n// const Map = dynamic(() => import(\"@/components/Map\"), { ssr: false })\n\n// export default function UserDashboard({ user }) {\n//   const [selectedRide, setSelectedRide] = useState(null)\n\n//   return (\n//     <div className=\"min-h-screen bg-[#F5F5F5]\">\n//       {/* Map Section */}\n//       <div className=\"relative h-[60vh] w-full\">\n//         <Map />\n//         <div className=\"absolute bottom-4 right-4 bg-white p-4 rounded-lg shadow-lg\">\n//           <button className=\"bg-[#6C63FF] text-white px-6 py-2 rounded-full\">Request Ride</button>\n//         </div>\n//       </div>\n\n//       {/* Recent Rides */}\n//       <div className=\"bg-white -mt-8 relative rounded-t-3xl p-6 min-h-[40vh]\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Your Rides</h2>\n//         <div className=\"space-y-4\">\n//           {user?.recentRides?.map((ride, index) => (\n//             <div\n//               key={index}\n//               className=\"flex items-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer\"\n//               onClick={() => setSelectedRide(ride)}\n//             >\n//               <div className=\"bg-[#6C63FF] p-3 rounded-full\">\n//                 <Car className=\"w-6 h-6 text-white\" />\n//               </div>\n//               <div className=\"ml-4 flex-1\">\n//                 <div className=\"flex justify-between items-start\">\n//                   <div>\n//                     <h3 className=\"font-medium\">{ride.destination}</h3>\n//                     <p className=\"text-sm text-gray-500\">{ride.date}</p>\n//                   </div>\n//                   <span className=\"font-semibold\">${ride.amount}</span>\n//                 </div>\n//                 <div className=\"mt-2 flex items-center text-sm text-gray-500\">\n//                   <Clock className=\"w-4 h-4 mr-1\" />\n//                   <span>{ride.duration}</span>\n//                   <MapPin className=\"w-4 h-4 ml-3 mr-1\" />\n//                   <span>{ride.distance}</span>\n//                 </div>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n\n//         {/* Quick Stats */}\n//         <div className=\"grid grid-cols-3 gap-4 mt-6\">\n//           <div className=\"bg-gray-50 p-4 rounded-lg\">\n//             <p className=\"text-sm text-gray-500\">Total Rides</p>\n//             <p className=\"text-2xl font-semibold text-[#6C63FF]\">{user?.stats?.totalRides}</p>\n//           </div>\n//           <div className=\"bg-gray-50 p-4 rounded-lg\">\n//             <p className=\"text-sm text-gray-500\">Total Spent</p>\n//             <p className=\"text-2xl font-semibold text-[#6C63FF]\">${user?.stats?.totalSpent}</p>\n//           </div>\n//           <div className=\"bg-gray-50 p-4 rounded-lg\">\n//             <p className=\"text-sm text-gray-500\">Avg. Rating</p>\n//             <p className=\"text-2xl font-semibold text-[#6C63FF]\">{user?.stats?.avgRating}★</p>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\nimport React from 'react'\n\nexport default function UserDashboard() {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n","size_bytes":3273},"components/layout/Footer.js":{"content":"export default function Footer() {\n    return (\n      <footer className=\"py-4 mt-auto text-center bg-gray-100\">\n        <div className=\"flex justify-center gap-4 mb-2\">\n          <a href=\"/admin\" className=\"text-gray-600 hover:text-gray-900\">\n            Admin Dashboard\n          </a>\n          <a href=\"/register-driver\" className=\"text-gray-600 hover:text-gray-900\">\n            Become a Driver\n          </a>\n          <a href=\"/terms\" className=\"text-gray-600 hover:text-gray-900\">\n            Terms\n          </a>\n          <a href=\"/privacy\" className=\"text-gray-600 hover:text-gray-900\">\n            Privacy\n          </a>\n          <a href=\"/safety\" className=\"text-gray-600 hover:text-gray-900\">\n            Safety\n          </a>\n        </div>\n        <p className=\"text-sm text-gray-500\">© 2023 Ryde5. All rights reserved.</p>\n      </footer>\n    )\n  }\n  \n  ","size_bytes":871},"components/layout/Header.js":{"content":"\"use client\"\n\nimport Link from \"next/link\"\nimport Image from \"next/image\"\nimport { UserCircle, Truck } from \"lucide-react\"\n\nexport default function Header() {\n  return (\n    <header className=\"flex items-center justify-between p-4 bg-white\">\n      <Link href=\"/\" className=\"flex items-center\">\n        <Image src=\"/logo.png\" alt=\"Ryde Logo\" width={180} height={35} priority className=\"object-contain\" />\n      </Link>\n      <div className=\"flex gap-4\">\n        <Link\n          href=\"/profile\"\n          className=\"px-4 py-2 text-gray-700 hover:text-orange-300 transition-colors flex items-center\"\n        >\n          <UserCircle className=\"w-5 h-5 mr-2\" />\n          User Profile\n        </Link>\n        <Link\n          href=\"/driver-profile\"\n          className=\"px-4 py-2 text-gray-700 hover:text-orange-500 transition-colors flex items-center\"\n        >\n          <Truck className=\"w-5 h-5 mr-2\" />\n          Driver Profile\n        </Link>\n        <Link\n          href=\"/register-driver\"\n          className=\"px-6 py-2 font-bold text-white bg-[#FFA500] rounded hover:bg-[#FF4500]/90 transition-colors\"\n        >\n          Register as Driver\n        </Link>\n        <Link\n          href=\"/admin\"\n          className=\"px-6 py-2 font-bold text-white bg-[#FFA500] rounded hover:bg-[#FF4500]/90 transition-colors\"\n        >\n          Admin Dashboard\n        </Link>\n      </div>\n    </header>\n  )\n}\n\n","size_bytes":1398},"components/layout/Header.tsx":{"content":"'use client';\n\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { UserCircle, Car } from 'lucide-react';\nimport { Button } from '@/components/ui/Button';\n\nexport default function Header() {\n  return (\n    <header className=\"flex items-center justify-between p-4 bg-white shadow-sm\">\n      <Link href=\"/\" className=\"flex items-center\">\n        <Image \n          src=\"/logo.png\" \n          alt=\"Ryde5 Logo\" \n          width={180} \n          height={35} \n          priority \n          className=\"object-contain\"\n        />\n      </Link>\n      \n      <nav className=\"hidden md:flex items-center space-x-6\">\n        <Link\n          href=\"/profile\"\n          className=\"flex items-center px-4 py-2 text-gray-700 hover:text-primary-500 transition-colors\"\n        >\n          <UserCircle className=\"w-5 h-5 mr-2\" />\n          User Profile\n        </Link>\n        \n        <Link\n          href=\"/driver-profile\"\n          className=\"flex items-center px-4 py-2 text-gray-700 hover:text-primary-500 transition-colors\"\n        >\n          <Car className=\"w-5 h-5 mr-2\" />\n          Driver Profile\n        </Link>\n        \n        <Link href=\"/register-driver\">\n          <Button variant=\"outline\" className=\"mr-2\">\n            Register as Driver\n          </Button>\n        </Link>\n        \n        <Link href=\"/admin\">\n          <Button>\n            Admin Dashboard\n          </Button>\n        </Link>\n      </nav>\n\n      {/* Mobile menu button */}\n      <div className=\"md:hidden\">\n        <Button variant=\"ghost\" size=\"sm\">\n          Menu\n        </Button>\n      </div>\n    </header>\n  );\n}","size_bytes":1602},"components/map/MapView.js":{"content":"\"use client\"\n\nimport { useEffect, useRef, useState, useCallback } from \"react\"\nimport { Loader } from \"@googlemaps/js-api-loader\"\nimport { motion } from \"framer-motion\"\nimport { MAPS_CONFIG } from \"@/config/maps\"\nimport { User } from \"lucide-react\"\nimport Link from \"next/link\"\n\nexport default function MapView({\n  onLocationSelect,\n  pickup,\n  dropoff,\n  bookingState,\n  selectionMode = false,\n  driverLocation,\n  onRouteCalculated,\n  userLocation,\n}) {\n  const mapRef = useRef(null)\n  const [map, setMap] = useState(null)\n  const [mapLoaded, setMapLoaded] = useState(false)\n  const markersRef = useRef({\n    pickup: null,\n    dropoff: null,\n    driver: null,\n    selection: null,\n  })\n  const directionsRendererRef = useRef(null)\n  const autocompleteService = useRef(null)\n  const placesService = useRef(null)\n  const [showUserProfile, setShowUserProfile] = useState(false)\n\n  useEffect(() => {\n    if (!mapRef.current || mapLoaded) return\n\n    const loader = new Loader({\n      apiKey: MAPS_CONFIG.apiKey,\n      version: \"weekly\",\n      libraries: MAPS_CONFIG.libraries,\n    })\n\n    loader.load().then((google) => {\n      const mapInstance = new google.maps.Map(mapRef.current, {\n        center: MAPS_CONFIG.defaultCenter,\n        zoom: MAPS_CONFIG.defaultZoom,\n        ...MAPS_CONFIG.mapOptions,\n        disableDefaultUI: selectionMode,\n      })\n\n      autocompleteService.current = new google.maps.places.AutocompleteService()\n      placesService.current = new google.maps.places.PlacesService(mapInstance)\n\n      if (!selectionMode) {\n        directionsRendererRef.current = new google.maps.DirectionsRenderer({\n          map: mapInstance,\n          suppressMarkers: true,\n          polylineOptions: {\n            strokeColor: \"#FFA500\",\n            strokeWeight: 4,\n          },\n        })\n      }\n\n      if (selectionMode) {\n        const marker = new google.maps.Marker({\n          map: mapInstance,\n          position: mapInstance.getCenter(),\n          icon: {\n            url: \"/marker.png\",\n            scaledSize: new google.maps.Size(40, 40),\n            anchor: new google.maps.Point(20, 40),\n          },\n        })\n\n        markersRef.current.selection = marker\n\n        mapInstance.addListener(\"center_changed\", () => {\n          marker.setPosition(mapInstance.getCenter())\n        })\n\n        mapInstance.addListener(\"idle\", () => {\n          reverseGeocode(mapInstance.getCenter())\n        })\n      }\n\n      // Add user marker\n      if (!selectionMode && userLocation) {\n        const userMarker = new google.maps.Marker({\n          map: mapInstance,\n          position: userLocation,\n          icon: {\n            url: \"/user-marker.png\", // You'll need to add this asset\n            scaledSize: new google.maps.Size(40, 40),\n            anchor: new google.maps.Point(20, 20),\n          },\n          clickable: true,\n        })\n\n        userMarker.addListener(\"click\", () => {\n          setShowUserProfile(true)\n        })\n      }\n\n      setMap(mapInstance)\n      setMapLoaded(true)\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            }\n            mapInstance.setCenter(pos)\n            if (selectionMode && markersRef.current.selection) {\n              markersRef.current.selection.setPosition(pos)\n              reverseGeocode(pos)\n            }\n          },\n          () => {\n            console.warn(\"Geolocation failed\")\n          },\n        )\n      }\n    })\n\n    return () => {\n      Object.values(markersRef.current).forEach((marker) => marker?.setMap(null))\n      if (directionsRendererRef.current) {\n        directionsRendererRef.current.setMap(null)\n      }\n    }\n  }, [mapLoaded, selectionMode, userLocation])\n\n  useEffect(() => {\n    if (!map || !pickup || !dropoff) return\n\n    const directionsService = new google.maps.DirectionsService()\n\n    directionsService.route(\n      {\n        origin: pickup.coordinates,\n        destination: dropoff.coordinates,\n        travelMode: google.maps.TravelMode.DRIVING,\n      },\n      (result, status) => {\n        if (status === \"OK\") {\n          directionsRendererRef.current.setDirections(result)\n\n          const route = result.routes[0]\n          const leg = route.legs[0]\n          onRouteCalculated?.({\n            distance: leg.distance.text,\n            duration: leg.duration.text,\n            fare: calculateFare(leg.distance.value),\n            pickupEta: Math.ceil((leg.duration.value / 60) * 0.3),\n          })\n        }\n      },\n    )\n  }, [map, pickup, dropoff])\n\n  useEffect(() => {\n    if (!map || !driverLocation) return\n\n    if (!markersRef.current.driver) {\n      markersRef.current.driver = new google.maps.Marker({\n        map,\n        icon: {\n          url: \"/car-icon.png\",\n          scaledSize: new google.maps.Size(32, 32),\n          anchor: new google.maps.Point(16, 16),\n        },\n      })\n    }\n\n    markersRef.current.driver.setPosition(driverLocation)\n  }, [map, driverLocation])\n\n  const reverseGeocode = useCallback(\n    (latLng) => {\n      if (!map) return\n\n      const geocoder = new google.maps.Geocoder()\n      geocoder.geocode({ location: latLng }, (results, status) => {\n        if (status === \"OK\" && results[0]) {\n          onLocationSelect?.({\n            address: results[0].formatted_address,\n            coordinates: {\n              lat: latLng.lat(),\n              lng: latLng.lng(),\n            },\n          })\n        }\n      })\n    },\n    [map, onLocationSelect],\n  )\n\n  return (\n    <div className=\"relative h-full w-full\">\n      <div ref={mapRef} className=\"h-full w-full\" />\n\n      {/* User Profile Quick Access */}\n      <Link\n        href=\"/profile\"\n        className=\"absolute top-4 right-4 z-30 p-3 bg-white rounded-full shadow-lg hover:bg-gray-50 transition-colors\"\n      >\n        <User className=\"w-6 h-6 text-gray-700\" />\n      </Link>\n\n      {showUserProfile && (\n        <div className=\"absolute bottom-24 right-4 z-30 bg-white rounded-lg shadow-lg p-4 w-64\">\n          <div className=\"flex items-center space-x-3 mb-3\">\n            <img src=\"/user.png\" alt=\"User\" className=\"w-12 h-12 rounded-full\" />\n            <div>\n              <h3 className=\"font-semibold\">John Doe</h3>\n              <p className=\"text-sm text-gray-500\">42 rides completed</p>\n            </div>\n          </div>\n          <Link\n            href=\"/profile\"\n            className=\"block w-full py-2 px-4 bg-orange-500 text-white rounded-lg text-center hover:bg-orange-600 transition-colors\"\n          >\n            View Full Profile\n          </Link>\n          <button\n            onClick={() => setShowUserProfile(false)}\n            className=\"mt-2 w-full py-2 px-4 border border-gray-300 rounded-lg text-center hover:bg-gray-50 transition-colors\"\n          >\n            Close\n          </button>\n        </div>\n      )}\n\n      {bookingState === \"finding_drivers\" && (\n        <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n          <motion.div\n            className=\"rounded-full bg-[#FFA500]/20\"\n            initial={{ width: 50, height: 50, opacity: 1 }}\n            animate={{\n              width: 200,\n              height: 200,\n              opacity: 0,\n            }}\n            transition={{\n              duration: 2,\n              repeat: Number.POSITIVE_INFINITY,\n              ease: \"easeOut\",\n            }}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n\nfunction calculateFare(distanceInMeters) {\n  const distanceInMiles = distanceInMeters / 1609.34\n  const baseRate = 2.5\n  const minimumFare = 5\n  return `£${Math.max(minimumFare, baseRate * distanceInMiles).toFixed(2)}`\n}\n\n","size_bytes":7747},"components/map/MapView.tsx":{"content":"'use client';\n\nimport { useEffect, useRef, useState, useCallback } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { User } from 'lucide-react';\nimport Link from 'next/link';\nimport { MAPS_CONFIG } from '@/config/constants';\nimport type { Location, RouteDetails } from '@/types';\nimport { calculateFare } from '@/lib/utils';\n\ninterface MapViewProps {\n  pickup?: Location | null;\n  dropoff?: Location | null;\n  driverLocation?: { lat: number; lng: number } | null;\n  onRouteCalculated?: (details: RouteDetails) => void;\n  selectionMode?: boolean;\n  onLocationSelect?: (location: Location) => void;\n}\n\nexport default function MapView({\n  pickup,\n  dropoff,\n  driverLocation,\n  onRouteCalculated,\n  selectionMode = false,\n  onLocationSelect,\n}: MapViewProps) {\n  const mapRef = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<google.maps.Map | null>(null);\n  const [mapLoaded, setMapLoaded] = useState(false);\n  const markersRef = useRef<{\n    pickup?: google.maps.Marker;\n    dropoff?: google.maps.Marker;\n    driver?: google.maps.Marker;\n    selection?: google.maps.Marker;\n  }>({});\n  const directionsRendererRef = useRef<google.maps.DirectionsRenderer | null>(null);\n\n  // Initialize map\n  useEffect(() => {\n    if (!mapRef.current || mapLoaded) return;\n\n    const loader = new Loader({\n      apiKey: MAPS_CONFIG.apiKey,\n      version: 'weekly',\n      libraries: MAPS_CONFIG.libraries,\n    });\n\n    loader.load().then((google) => {\n      const mapInstance = new google.maps.Map(mapRef.current!, {\n        center: MAPS_CONFIG.defaultCenter,\n        zoom: MAPS_CONFIG.defaultZoom,\n        ...MAPS_CONFIG.mapOptions,\n        disableDefaultUI: selectionMode,\n      });\n\n      if (!selectionMode) {\n        directionsRendererRef.current = new google.maps.DirectionsRenderer({\n          map: mapInstance,\n          suppressMarkers: true,\n          polylineOptions: {\n            strokeColor: '#FFA500',\n            strokeWeight: 4,\n          },\n        });\n      }\n\n      // Selection mode marker\n      if (selectionMode) {\n        const marker = new google.maps.Marker({\n          map: mapInstance,\n          position: mapInstance.getCenter(),\n          icon: {\n            url: '/marker.png',\n            scaledSize: new google.maps.Size(40, 40),\n            anchor: new google.maps.Point(20, 40),\n          },\n        });\n\n        markersRef.current.selection = marker;\n\n        mapInstance.addListener('center_changed', () => {\n          marker.setPosition(mapInstance.getCenter());\n        });\n\n        mapInstance.addListener('idle', () => {\n          const center = mapInstance.getCenter();\n          if (center && onLocationSelect) {\n            reverseGeocode(center);\n          }\n        });\n      }\n\n      setMap(mapInstance);\n      setMapLoaded(true);\n\n      // Get user's current location\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const pos = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude,\n            };\n            mapInstance.setCenter(pos);\n            if (selectionMode && markersRef.current.selection) {\n              markersRef.current.selection.setPosition(pos);\n            }\n          },\n          () => {\n            console.warn('Geolocation failed');\n          }\n        );\n      }\n    });\n\n    return () => {\n      Object.values(markersRef.current).forEach((marker) => marker?.setMap(null));\n      if (directionsRendererRef.current) {\n        directionsRendererRef.current.setMap(null);\n      }\n    };\n  }, [mapLoaded, selectionMode, onLocationSelect]);\n\n  // Reverse geocode function\n  const reverseGeocode = useCallback(\n    (latLng: google.maps.LatLng) => {\n      if (!map || !onLocationSelect) return;\n\n      const geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ location: latLng }, (results, status) => {\n        if (status === 'OK' && results?.[0]) {\n          onLocationSelect({\n            address: results[0].formatted_address,\n            coordinates: {\n              lat: latLng.lat(),\n              lng: latLng.lng(),\n            },\n          });\n        }\n      });\n    },\n    [map, onLocationSelect]\n  );\n\n  // Update pickup marker\n  useEffect(() => {\n    if (!map || !pickup) return;\n\n    if (markersRef.current.pickup) {\n      markersRef.current.pickup.setMap(null);\n    }\n\n    markersRef.current.pickup = new google.maps.Marker({\n      map,\n      position: pickup.coordinates,\n      icon: {\n        url: '/marker.png',\n        scaledSize: new google.maps.Size(40, 40),\n        anchor: new google.maps.Point(20, 40),\n      },\n      title: 'Pickup Location',\n    });\n  }, [map, pickup]);\n\n  // Update dropoff marker\n  useEffect(() => {\n    if (!map || !dropoff) return;\n\n    if (markersRef.current.dropoff) {\n      markersRef.current.dropoff.setMap(null);\n    }\n\n    markersRef.current.dropoff = new google.maps.Marker({\n      map,\n      position: dropoff.coordinates,\n      icon: {\n        url: '/marker.png',\n        scaledSize: new google.maps.Size(40, 40),\n        anchor: new google.maps.Point(20, 40),\n      },\n      title: 'Dropoff Location',\n    });\n  }, [map, dropoff]);\n\n  // Calculate and display route\n  useEffect(() => {\n    if (!map || !pickup || !dropoff || !directionsRendererRef.current) return;\n\n    const directionsService = new google.maps.DirectionsService();\n\n    directionsService.route(\n      {\n        origin: pickup.coordinates,\n        destination: dropoff.coordinates,\n        travelMode: google.maps.TravelMode.DRIVING,\n      },\n      (result, status) => {\n        if (status === 'OK' && result) {\n          directionsRendererRef.current!.setDirections(result);\n\n          const route = result.routes[0];\n          const leg = route.legs[0];\n          \n          if (onRouteCalculated) {\n            onRouteCalculated({\n              distance: leg.distance?.text || '',\n              duration: leg.duration?.text || '',\n              fare: calculateFare(leg.distance?.value || 0),\n              pickupEta: Math.ceil((leg.duration?.value || 0) / 60 * 0.3),\n            });\n          }\n        }\n      }\n    );\n  }, [map, pickup, dropoff, onRouteCalculated]);\n\n  // Update driver marker\n  useEffect(() => {\n    if (!map || !driverLocation) return;\n\n    if (!markersRef.current.driver) {\n      markersRef.current.driver = new google.maps.Marker({\n        map,\n        icon: {\n          url: 'https://images.pexels.com/photos/164634/pexels-photo-164634.jpeg?auto=compress&cs=tinysrgb&w=32&h=32&fit=crop',\n          scaledSize: new google.maps.Size(32, 32),\n          anchor: new google.maps.Point(16, 16),\n        },\n        title: 'Driver Location',\n      });\n    }\n\n    markersRef.current.driver.setPosition(driverLocation);\n  }, [map, driverLocation]);\n\n  return (\n    <div className=\"relative h-full w-full\">\n      <div ref={mapRef} className=\"h-full w-full map-container\" />\n\n      {/* User Profile Quick Access */}\n      {!selectionMode && (\n        <Link\n          href=\"/profile\"\n          className=\"absolute top-4 right-4 z-30 p-3 bg-white rounded-full shadow-lg hover:bg-gray-50 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500\"\n        >\n          <User className=\"w-6 h-6 text-gray-700\" />\n        </Link>\n      )}\n    </div>\n  );\n}","size_bytes":7314},"components/payment/Paymentform.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport Image from \"next/image\"\nimport { Star } from \"lucide-react\"\n\nexport default function PaymentForm({ onPaymentComplete }) {\n  const [paymentData, setPaymentData] = useState({\n    cardNumber: \"\",\n    expiryDate: \"\",\n    cvc: \"\",\n    name: \"\",\n  })\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    onPaymentComplete(paymentData)\n  }\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setPaymentData((prev) => ({\n      ...prev,\n      [name]: value,\n    }))\n  }\n\n  return (\n    <div className=\"w-full max-w-md p-8 mx-auto bg-white rounded-lg shadow-lg\">\n      <div className=\"flex justify-center mb-6\">\n        <div className=\"flex items-center gap-1\">\n          <span className=\"text-2xl font-bold text-orange-500\">RYDE</span>\n          <Star className=\"w-6 h-6 fill-black\" />\n        </div>\n      </div>\n\n      <h1 className=\"mb-8 text-2xl font-bold text-center\">Complete Your Payment</h1>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div>\n          <label className=\"block mb-2 text-sm font-medium\">Card Number</label>\n          <input\n            type=\"text\"\n            name=\"cardNumber\"\n            placeholder=\"1234 5678 9012 3456\"\n            value={paymentData.cardNumber}\n            onChange={handleChange}\n            className=\"w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-orange-500\"\n            maxLength=\"19\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block mb-2 text-sm font-medium\">Expiration Date</label>\n            <input\n              type=\"text\"\n              name=\"expiryDate\"\n              placeholder=\"MM / YY\"\n              value={paymentData.expiryDate}\n              onChange={handleChange}\n              className=\"w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-orange-500\"\n              maxLength=\"7\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block mb-2 text-sm font-medium\">CVC</label>\n            <input\n              type=\"text\"\n              name=\"cvc\"\n              placeholder=\"123\"\n              value={paymentData.cvc}\n              onChange={handleChange}\n              className=\"w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-orange-500\"\n              maxLength=\"3\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <label className=\"block mb-2 text-sm font-medium\">Name on Card</label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"John Doe\"\n            value={paymentData.name}\n            onChange={handleChange}\n            className=\"w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-orange-500\"\n          />\n        </div>\n\n        <button type=\"submit\" className=\"w-full py-3 text-white bg-orange-500 rounded hover:bg-orange-600\">\n          Pay Now\n        </button>\n      </form>\n    </div>\n  )\n}\n\n","size_bytes":3025},"components/pricing/PricingPlans.js":{"content":"\"use client\"\n\nimport { Check, ChevronRight } from \"lucide-react\"\n\nexport default function PricingPlans({ onSelectPlan }) {\n  return (\n    <section className=\"bg-white dark:bg-gray-900\">\n      <div className=\"max-w-screen-xl px-4 py-8 mx-auto lg:py-16 lg:px-6\">\n        <div className=\"max-w-screen-md mx-auto mb-8 text-center lg:mb-12\">\n          <h2 className=\"mb-4 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white\">\n            Choose Your Driver Plan\n          </h2>\n          <p className=\"mb-5 font-light text-gray-500 sm:text-xl dark:text-gray-400\">\n            Select the plan that best fits your driving goals. Upgrade or downgrade anytime.\n          </p>\n        </div>\n        <div className=\"space-y-8 lg:grid lg:grid-cols-3 sm:gap-6 xl:gap-10 lg:space-y-0\">\n          {/* Silver Plan */}\n          <div className=\"flex flex-col max-w-lg p-6 mx-auto text-center text-gray-900 bg-white border border-gray-100 rounded-lg shadow dark:border-gray-600 xl:p-8 dark:bg-gray-800 dark:text-white transition-transform duration-300 hover:scale-105 hover:shadow-lg\">\n            <div className=\"bg-gray-200 -mx-6 -mt-6 p-4 rounded-t-lg\">\n              <h3 className=\"text-2xl font-semibold text-gray-700\">Silver Plan</h3>\n            </div>\n            <div className=\"flex items-baseline justify-center my-8\">\n              <span className=\"mr-2 text-5xl font-extrabold\">$99</span>\n              <span className=\"text-gray-500 dark:text-gray-400\">/month</span>\n            </div>\n            <ul role=\"list\" className=\"mb-8 space-y-4 text-left\">\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Up to 300 Trips</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Basic Support Access</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Access to city drives</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Keep 80% of profits</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>10% off fuel</span>\n              </li>\n            </ul>\n            <button\n              onClick={() => onSelectPlan(\"silver\")}\n              className=\"text-white bg-gray-500 hover:bg-gray-600 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:text-white dark:focus:ring-gray-900 mt-auto\"\n            >\n              Get Started - $99\n            </button>\n          </div>\n\n          {/* Gold Plan */}\n          <div className=\"flex flex-col max-w-lg p-6 mx-auto text-center text-gray-900 bg-white border border-gray-100 rounded-lg shadow dark:border-gray-600 xl:p-8 dark:bg-gray-800 dark:text-white transition-transform duration-300 hover:scale-105 hover:shadow-lg\">\n            <div className=\"bg-yellow-400 -mx-6 -mt-6 p-4 rounded-t-lg\">\n              <h3 className=\"text-2xl font-semibold text-gray-900\">Gold Plan</h3>\n            </div>\n            <div className=\"flex items-baseline justify-center my-8\">\n              <span className=\"mr-2 text-5xl font-extrabold\">$199</span>\n              <span className=\"text-gray-500 dark:text-gray-400\">/month</span>\n            </div>\n            <ul role=\"list\" className=\"mb-8 space-y-4 text-left\">\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Up to 600 Trips</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Priority Support Access</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Access to city and suburban drives</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Keep 90% of profits</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>15% off fuel</span>\n              </li>\n            </ul>\n            <button\n              onClick={() => onSelectPlan(\"gold\")}\n              className=\"text-gray-900 bg-yellow-400 hover:bg-yellow-500 focus:ring-4 focus:ring-yellow-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:text-gray-900 dark:focus:ring-yellow-900 mt-auto\"\n            >\n              Get Started - $199\n            </button>\n          </div>\n\n          {/* Diamond Plan */}\n          <div className=\"flex flex-col max-w-lg p-6 mx-auto text-center text-gray-900 bg-white border border-gray-100 rounded-lg shadow dark:border-gray-600 xl:p-8 dark:bg-gray-800 dark:text-white transition-transform duration-300 hover:scale-105 hover:shadow-lg\">\n            <div className=\"bg-cyan-200 -mx-6 -mt-6 p-4 rounded-t-lg\">\n              <h3 className=\"text-2xl font-semibold text-gray-900\">Diamond Plan</h3>\n            </div>\n            <div className=\"flex items-baseline justify-center my-8\">\n              <span className=\"mr-2 text-5xl font-extrabold\">$299</span>\n              <span className=\"text-gray-500 dark:text-gray-400\">/month</span>\n            </div>\n            <ul role=\"list\" className=\"mb-8 space-y-4 text-left\">\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Unlimited Trips</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>24/7 Dedicated Support</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Access to all drive zones</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>VIP Trip Alerts</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>Keep 100% of profits</span>\n              </li>\n              <li className=\"flex items-center space-x-3\">\n                <Check className=\"flex-shrink-0 w-5 h-5 text-green-500 dark:text-green-400\" />\n                <span>20% off fuel</span>\n              </li>\n            </ul>\n            <button\n              onClick={() => onSelectPlan(\"diamond\")}\n              className=\"text-gray-900 bg-cyan-200 hover:bg-cyan-300 focus:ring-4 focus:ring-cyan-200 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:text-gray-900 dark:focus:ring-cyan-900 mt-auto\"\n            >\n              Get Started - $299\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\n","size_bytes":7896},"components/profile/DriverProfile.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport Image from \"next/image\"\nimport { Star, Shield, Clock, FileText, AlertTriangle } from \"lucide-react\"\nimport NotificationBell from \"../NotificationBell\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/buttons\"\nimport { ArrowLeft } from \"lucide-react\"\n\nexport default function DriverProfile() {\n  const [driver, setDriver] = useState({\n    name: \"Jane Smith\",\n    email: \"jane.smith@example.com\",\n    phone: \"+1 (555) 987-6543\",\n    avatar: \"/driver.png\",\n    rating: 4.9,\n    ridesCompleted: 1024,\n    status: \"active\", // active, offline, suspended\n    vehicle: {\n      make: \"Toyota\",\n      model: \"Camry\",\n      year: 2020,\n      color: \"Silver\",\n      licensePlate: \"ABC 123\",\n      insurance: {\n        provider: \"SafeAuto\",\n        policyNumber: \"SA123456789\",\n        expiryDate: \"2025-12-31\",\n      },\n    },\n    documents: [\n      {\n        type: \"Driver's License\",\n        number: \"DL123456789\",\n        expiryDate: \"2026-01-01\",\n        status: \"approved\",\n        lastVerified: \"2024-12-01\",\n      },\n      {\n        type: \"Vehicle Registration\",\n        number: \"VR987654321\",\n        expiryDate: \"2025-06-30\",\n        status: \"approved\",\n        lastVerified: \"2024-12-01\",\n      },\n      {\n        type: \"Insurance Card\",\n        number: \"IC456789123\",\n        expiryDate: \"2025-12-31\",\n        status: \"approved\",\n        lastVerified: \"2024-12-01\",\n      },\n    ],\n    earnings: {\n      total: 15780,\n      lastWeek: 850,\n      currentWeek: 425,\n      pending: 150,\n      stats: {\n        totalTrips: 1024,\n        averageRating: 4.9,\n        completionRate: 98,\n        cancellationRate: 2,\n      },\n    },\n    schedule: {\n      monday: { active: true, hours: \"9:00 AM - 5:00 PM\" },\n      tuesday: { active: true, hours: \"9:00 AM - 5:00 PM\" },\n      wednesday: { active: true, hours: \"9:00 AM - 5:00 PM\" },\n      thursday: { active: true, hours: \"9:00 AM - 5:00 PM\" },\n      friday: { active: true, hours: \"9:00 AM - 5:00 PM\" },\n      saturday: { active: false, hours: \"\" },\n      sunday: { active: false, hours: \"\" },\n    },\n  })\n\n  const [isEditing, setIsEditing] = useState(false)\n  const [showDocuments, setShowDocuments] = useState(false)\n  const [showSchedule, setShowSchedule] = useState(false)\n\n  const handleEdit = () => {\n    setIsEditing(true)\n  }\n\n  const handleSave = () => {\n    setIsEditing(false)\n    // Here you would typically send the updated driver data to your backend\n  }\n\n  const handleStatusToggle = () => {\n    setDriver((prev) => ({\n      ...prev,\n      status: prev.status === \"active\" ? \"offline\" : \"active\",\n    }))\n  }\n\n  const handleDocumentUpload = (type) => {\n    // In a real app, this would open a file picker and handle document upload\n    alert(`Upload new ${type} document`)\n  }\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case \"approved\":\n        return \"text-green-600\"\n      case \"pending\":\n        return \"text-yellow-600\"\n      case \"rejected\":\n        return \"text-red-600\"\n      default:\n        return \"text-gray-600\"\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <Link href=\"/main\">\n          <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n            <ArrowLeft className=\"w-4 h-4\" />\n            <span>Back</span>\n          </Button>\n        </Link>\n        <h1 className=\"text-2xl font-bold text-gray-800\">Driver Profile</h1>\n        <NotificationBell />\n      </div>\n      <div className=\"bg-white shadow-lg rounded-lg overflow-hidden\">\n        <div className=\"p-4 sm:p-6 md:p-8\">\n          {/* Header Section */}\n          <div className=\"flex flex-col sm:flex-row items-center justify-between mb-6\">\n            <div className=\"flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 mb-4 sm:mb-0\">\n              <Image\n                src={driver.avatar || \"/placeholder.svg\"}\n                alt={driver.name}\n                width={80}\n                height={80}\n                className=\"rounded-full\"\n              />\n              <div className=\"text-center sm:text-left\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">{driver.name}</h2>\n                <div className=\"flex items-center justify-center sm:justify-start mt-1\">\n                  <Star className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                  <span className=\"ml-1 text-gray-600\">{driver.rating}</span>\n                </div>\n                <p className=\"text-gray-600 mt-1\">{driver.ridesCompleted} rides completed</p>\n              </div>\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n              {!isEditing && (\n                <button\n                  onClick={handleEdit}\n                  className=\"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors w-full sm:w-auto\"\n                >\n                  Edit Profile\n                </button>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Left Column - Performance */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-4\">Performance</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Completion Rate</span>\n                      <span className=\"font-medium\">{driver.earnings.stats.completionRate}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-green-500 h-2 rounded-full\"\n                        style={{ width: `${driver.earnings.stats.completionRate}%` }}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Average Rating</span>\n                      <span className=\"font-medium\">{driver.earnings.stats.averageRating}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-yellow-400 h-2 rounded-full\"\n                        style={{ width: `${(driver.earnings.stats.averageRating / 5) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>Cancellation Rate</span>\n                      <span className=\"font-medium\">{driver.earnings.stats.cancellationRate}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                      <div\n                        className=\"bg-red-500 h-2 rounded-full\"\n                        style={{ width: `${driver.earnings.stats.cancellationRate}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Middle Column - Vehicle & Documents */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"space-y-6\">\n                {/* Vehicle Information */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Vehicle Information</h3>\n                  <div className=\"bg-gray-50 p-4 rounded\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      {Object.entries(driver.vehicle).map(([key, value]) => {\n                        if (typeof value === \"object\") return null\n                        return (\n                          <div key={key}>\n                            <label className=\"text-sm text-gray-600 capitalize\">{key}</label>\n                            {isEditing ? (\n                              <input\n                                type=\"text\"\n                                value={value}\n                                onChange={(e) => {\n                                  setDriver((prev) => ({\n                                    ...prev,\n                                    vehicle: {\n                                      ...prev.vehicle,\n                                      [key]: e.target.value,\n                                    },\n                                  }))\n                                }}\n                                className=\"w-full p-2 border rounded focus:ring-2 focus:ring-orange-500\"\n                              />\n                            ) : (\n                              <p className=\"font-medium\">{value}</p>\n                            )}\n                          </div>\n                        )\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Documents Section */}\n                <div>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"text-lg font-semibold text-gray-800\">Documents</h3>\n                    <button\n                      onClick={() => setShowDocuments(!showDocuments)}\n                      className=\"text-orange-500 hover:text-orange-600 text-sm font-medium\"\n                    >\n                      {showDocuments ? \"Hide\" : \"View All\"}\n                    </button>\n                  </div>\n                  {showDocuments && (\n                    <div className=\"space-y-3\">\n                      {driver.documents.map((doc, index) => (\n                        <div key={index} className=\"bg-gray-50 p-4 rounded\">\n                          <div className=\"flex justify-between items-start\">\n                            <div>\n                              <h4 className=\"font-medium\">{doc.type}</h4>\n                              <p className=\"text-sm text-gray-600\">#{doc.number}</p>\n                              <p className=\"text-sm text-gray-600\">\n                                Expires: {new Date(doc.expiryDate).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <div className=\"text-right\">\n                              <span className={`text-sm ${getStatusColor(doc.status)}`}>\n                                {doc.status.charAt(0).toUpperCase() + doc.status.slice(1)}\n                              </span>\n                              <p className=\"text-xs text-gray-500\">\n                                Verified: {new Date(doc.lastVerified).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          {isEditing && (\n                            <button\n                              onClick={() => handleDocumentUpload(doc.type)}\n                              className=\"mt-2 text-sm text-orange-500 hover:text-orange-600\"\n                            >\n                              Upload New\n                            </button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Section - Earnings & Schedule */}\n          <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Earnings Section */}\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Earnings</h3>\n              <div className=\"bg-gray-50 p-4 rounded space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm text-gray-600\">Total Earnings</p>\n                    <p className=\"text-xl font-bold text-green-600\">${driver.earnings.total.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm text-gray-600\">This Week</p>\n                    <p className=\"text-xl font-bold text-green-600\">${driver.earnings.currentWeek.toLocaleString()}</p>\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Pending Payments</p>\n                  <p className=\"text-orange-500 font-medium\">${driver.earnings.pending.toLocaleString()}</p>\n                </div>\n              </div>\n            </div>\n\n            {/* Schedule Section */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Schedule</h3>\n                <button\n                  onClick={() => setShowSchedule(!showSchedule)}\n                  className=\"text-orange-500 hover:text-orange-600 text-sm font-medium\"\n                >\n                  {showSchedule ? \"Hide\" : \"View\"}\n                </button>\n              </div>\n              {showSchedule && (\n                <div className=\"bg-gray-50 p-4 rounded\">\n                  {Object.entries(driver.schedule).map(([day, schedule]) => (\n                    <div key={day} className=\"flex items-center justify-between py-2\">\n                      <span className=\"capitalize\">{day}</span>\n                      <span className={schedule.active ? \"text-gray-800\" : \"text-gray-400\"}>\n                        {schedule.active ? schedule.hours : \"Not Available\"}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"mt-6 flex justify-end space-x-2\">\n              <button\n                onClick={() => setIsEditing(false)}\n                className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSave}\n                className=\"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors\"\n              >\n                Save Changes\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":14478},"components/profile/UserProfile.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport Image from \"next/image\"\nimport { Star, MapPin, Clock, CreditCard, Shield, History, Bell } from \"lucide-react\"\nimport NotificationBell from \"../NotificationBell\"\nimport Link from \"next/link\"\nimport { Button } from \"@/components/ui/buttons\"\nimport { ArrowLeft,Car } from \"lucide-react\"\n\nexport default function UserProfile() {\n  const [user, setUser] = useState({\n    name: \"John Doe\",\n    email: \"john.doe@example.com\",\n    phone: \"+1 (555) 123-4567\",\n    avatar: \"/user.png\",\n    rating: 4.8,\n    ridesCompleted: 42,\n    favoriteLocations: [\"123 Main St, Buffalo, NY\", \"456 Elm St, Buffalo, NY\", \"789 Oak St, Buffalo, NY\"],\n    paymentMethods: [\n      { id: 1, type: \"Visa\", last4: \"1234\", isDefault: true },\n      { id: 2, type: \"Mastercard\", last4: \"5678\", isDefault: false },\n      { id: 3, type: \"Cash App\", username: \"@johndoe\", isDefault: false },\n    ],\n    rideHistory: [\n      {\n        id: 1,\n        date: \"2025-01-21\",\n        from: \"123 Main St\",\n        to: \"Buffalo Airport\",\n        amount: 45.5,\n        driverName: \"Jane Smith\",\n        rating: 5,\n      },\n      {\n        id: 2,\n        date: \"2025-01-20\",\n        from: \"Buffalo Airport\",\n        to: \"456 Elm St\",\n        amount: 38.75,\n        driverName: \"Mike Johnson\",\n        rating: 4,\n      },\n    ],\n    emergencyContacts: [{ name: \"Mary Doe\", phone: \"+1 (555) 987-6543\", relation: \"Sister\" }],\n    twoFactorEnabled: true,\n  })\n\n  const [isEditing, setIsEditing] = useState(false)\n  const [showRideHistory, setShowRideHistory] = useState(false)\n  const [showEmergencyContacts, setShowEmergencyContacts] = useState(false)\n\n  const handleEdit = () => {\n    setIsEditing(true)\n  }\n\n  const handleSave = () => {\n    setIsEditing(false)\n    // Here you would typically send the updated user data to your backend\n  }\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    setUser((prevUser) => ({\n      ...prevUser,\n      [name]: value,\n    }))\n  }\n\n  const handleAddPaymentMethod = () => {\n    // Integrate with Stripe/Cash App here\n    alert(\"Redirecting to payment provider...\")\n  }\n\n  const handleEmergencySOSClick = () => {\n    // In a real app, this would trigger emergency protocols\n    alert(\"Emergency services and Ryde5 support have been notified. Help is on the way.\")\n  }\n\n  return (\n    <div className=\"container mx-auto p-4 max-w-4xl\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <Link href=\"/main\">\n          <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n            <ArrowLeft className=\"w-4 h-4\" />\n            <span>Back</span>\n          </Button>\n        </Link>\n        <h1 className=\"text-2xl font-bold text-gray-800\">User Profile</h1>\n        <NotificationBell />\n      </div>\n      <div className=\"bg-white shadow-lg rounded-lg\">\n        <div className=\"p-4 sm:p-6 md:p-8\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between mb-6\">\n            <div className=\"flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 mb-4 sm:mb-0\">\n              <Image\n                src={user.avatar || \"/placeholder.svg\"}\n                alt={user.name}\n                width={80}\n                height={80}\n                className=\"rounded-full\"\n              />\n              <div className=\"text-center sm:text-left\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">{user.name}</h2>\n                <div className=\"flex items-center justify-center sm:justify-start mt-1\">\n                  <Star className=\"w-5 h-5 text-yellow-400 fill-current\" />\n                  <span className=\"ml-1 text-gray-600\">{user.rating}</span>\n                </div>\n                <p className=\"text-gray-600 mt-1\">{user.ridesCompleted} rides completed</p>\n              </div>\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-2\">\n        <Link\n          href=\"/register-driver\"\n          className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors w-full sm:w-auto flex items-center justify-center gap-2\"\n        >\n          <Car className=\"w-4 h-4\" />\n          Register as Driver\n        </Link>\n        <button\n          onClick={handleEmergencySOSClick}\n          className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors w-full sm:w-auto\"\n        >\n          SOS\n        </button>\n        {!isEditing && (\n          <button\n            onClick={handleEdit}\n            className=\"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors w-full sm:w-auto\"\n          >\n            Edit Profile\n          </button>\n        )}\n      </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Left Column - Basic Info */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                    {isEditing ? (\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        value={user.email}\n                        onChange={handleChange}\n                        className=\"w-full p-2 border rounded focus:ring-2 focus:ring-orange-500\"\n                      />\n                    ) : (\n                      <p className=\"text-gray-800\">{user.email}</p>\n                    )}\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Phone</label>\n                    {isEditing ? (\n                      <input\n                        type=\"tel\"\n                        name=\"phone\"\n                        value={user.phone}\n                        onChange={handleChange}\n                        className=\"w-full p-2 border rounded focus:ring-2 focus:ring-orange-500\"\n                      />\n                    ) : (\n                      <p className=\"text-gray-800\">{user.phone}</p>\n                    )}\n                  </div>\n                  {user.twoFactorEnabled && (\n                    <div className=\"flex items-center mt-2 text-green-600\">\n                      <Shield className=\"w-4 h-4 mr-1\" />\n                      <span className=\"text-sm\">2FA Enabled</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Middle Column - Payment & Locations */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Payment Methods</h3>\n                  <div className=\"space-y-2\">\n                    {user.paymentMethods.map((method) => (\n                      <div key={method.id} className=\"flex items-center justify-between bg-gray-50 p-3 rounded\">\n                        <div className=\"flex items-center\">\n                          <CreditCard className=\"w-5 h-5 text-gray-400 mr-2\" />\n                          <span className=\"text-gray-700\">\n                            {method.type} {method.last4 ? `ending in ${method.last4}` : method.username}\n                          </span>\n                        </div>\n                        {method.isDefault && (\n                          <span className=\"text-xs bg-green-100 text-green-800 px-2 py-1 rounded\">Default</span>\n                        )}\n                      </div>\n                    ))}\n                    <button\n                      onClick={handleAddPaymentMethod}\n                      className=\"w-full p-2 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-orange-500 hover:text-orange-500 transition-colors\"\n                    >\n                      + Add Payment Method\n                    </button>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Favorite Locations</h3>\n                  <ul className=\"space-y-2\">\n                    {user.favoriteLocations.map((location, index) => (\n                      <li key={index} className=\"flex items-start bg-gray-50 p-3 rounded\">\n                        <MapPin className=\"w-5 h-5 text-gray-400 mr-2 mt-1 flex-shrink-0\" />\n                        <span className=\"text-gray-700\">{location}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Section - Ride History & Emergency Contacts */}\n          <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Recent Rides</h3>\n              <div className=\"space-y-2\">\n                {user.rideHistory.slice(0, 3).map((ride) => (\n                  <div key={ride.id} className=\"bg-gray-50 p-3 rounded\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{ride.date}</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {ride.from} → {ride.to}\n                        </p>\n                      </div>\n                      <span className=\"text-sm font-medium\">${ride.amount}</span>\n                    </div>\n                    <div className=\"mt-2 flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-600\">Driver: {ride.driverName}</span>\n                      <div className=\"flex items-center\">\n                        <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                        <span className=\"ml-1\">{ride.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                <button\n                  onClick={() => setShowRideHistory(!showRideHistory)}\n                  className=\"text-orange-500 hover:text-orange-600 text-sm font-medium\"\n                >\n                  View All Rides\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Emergency Contacts</h3>\n                <button\n                  onClick={() => setShowEmergencyContacts(!showEmergencyContacts)}\n                  className=\"text-orange-500 hover:text-orange-600 text-sm font-medium\"\n                >\n                  {showEmergencyContacts ? \"Hide\" : \"Manage\"}\n                </button>\n              </div>\n              {showEmergencyContacts && (\n                <div className=\"bg-gray-50 p-4 rounded\">\n                  {user.emergencyContacts.map((contact, index) => (\n                    <div key={index} className=\"flex items-center justify-between mb-2\">\n                      <div>\n                        <p className=\"font-medium\">{contact.name}</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {contact.phone} • {contact.relation}\n                        </p>\n                      </div>\n                      {isEditing && <button className=\"text-red-500 hover:text-red-600\">Remove</button>}\n                    </div>\n                  ))}\n                  {isEditing && (\n                    <button className=\"mt-2 text-orange-500 hover:text-orange-600\">+ Add Emergency Contact</button>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {isEditing && (\n            <div className=\"mt-6 flex justify-end space-x-2\">\n              <button\n                onClick={() => setIsEditing(false)}\n                className=\"px-4 py-2 border border-gray-300 rounded hover:bg-gray-50 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleSave}\n                className=\"px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors\"\n              >\n                Save Changes\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":12524},"components/rating/RatingForm.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Star } from \"lucide-react\"\nimport Image from \"next/image\"\n\nexport default function RatingForm({ onSubmitReview }) {\n  const [rating, setRating] = useState(0)\n  const [hoveredRating, setHoveredRating] = useState(0)\n  const [feedback, setFeedback] = useState(\"\")\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    onSubmitReview({ rating, feedback })\n  }\n\n  return (\n    <div className=\"w-full max-w-md p-8 mx-auto bg-white rounded-lg shadow-lg\">\n      <div className=\"flex justify-center mb-6\">\n        <div className=\"flex items-center gap-1\">\n          <span className=\"text-2xl font-bold text-orange-500\">RYDE</span>\n          <Star className=\"w-6 h-6 fill-black\" />\n        </div>\n      </div>\n\n      <h1 className=\"mb-8 text-2xl font-bold text-center\">Rate Your Ride</h1>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"flex justify-center gap-2\">\n          {[1, 2, 3, 4, 5].map((star) => (\n            <button\n              key={star}\n              type=\"button\"\n              onClick={() => setRating(star)}\n              onMouseEnter={() => setHoveredRating(star)}\n              onMouseLeave={() => setHoveredRating(0)}\n              className=\"focus:outline-none\"\n            >\n              <Star\n                className={`w-8 h-8 ${\n                  star <= (hoveredRating || rating) ? \"fill-yellow-400 text-yellow-400\" : \"text-yellow-400\"\n                }`}\n              />\n            </button>\n          ))}\n        </div>\n\n        <textarea\n          placeholder=\"Tell us about your experience (optional)\"\n          value={feedback}\n          onChange={(e) => setFeedback(e.target.value)}\n          className=\"w-full h-32 p-3 border rounded resize-none focus:outline-none focus:ring-2 focus:ring-orange-500\"\n        />\n\n        <button type=\"submit\" className=\"w-full py-3 text-white bg-orange-500 rounded hover:bg-orange-600\">\n          Submit Review\n        </button>\n      </form>\n    </div>\n  )\n}\n\n","size_bytes":2022},"components/ui/Button.tsx":{"content":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  children: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = 'primary', size = 'md', children, ...props }, ref) => {\n    const baseStyles = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';\n    \n    const variants = {\n      primary: 'bg-primary-500 hover:bg-primary-600 text-white focus:ring-primary-500',\n      secondary: 'bg-gray-200 hover:bg-gray-300 text-gray-800 focus:ring-gray-500',\n      outline: 'border border-primary-500 text-primary-500 hover:bg-primary-500 hover:text-white focus:ring-primary-500',\n      ghost: 'text-gray-600 hover:text-gray-800 hover:bg-gray-100 focus:ring-gray-500',\n    };\n\n    const sizes = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2 text-base',\n      lg: 'px-6 py-3 text-lg',\n    };\n\n    return (\n      <button\n        className={cn(baseStyles, variants[variant], sizes[size], className)}\n        ref={ref}\n        {...props}\n      >\n        {children}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\nexport { Button };","size_bytes":1417},"components/ui/Card.js":{"content":"import React from \"react\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => {\n  return <div ref={ref} className={`rounded-lg shadow-sm ${className}`} {...props} />\n})\n\nCard.displayName = \"Card\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => {\n  return <div ref={ref} className={`p-6 ${className}`} {...props} />\n})\n\nCardContent.displayName = \"CardContent\"\n\nexport { Card, CardContent }\n\n","size_bytes":427},"components/ui/Card.tsx":{"content":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn('rounded-lg shadow-sm border border-gray-200 bg-white', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nCard.displayName = 'Card';\n\nconst CardContent = React.forwardRef<HTMLDivElement, CardProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn('p-6', className)}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\n\nCardContent.displayName = 'CardContent';\n\nexport { Card, CardContent };","size_bytes":842},"components/ui/Input.tsx":{"content":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string;\n  error?: string;\n}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, label, error, ...props }, ref) => {\n    return (\n      <div className=\"w-full\">\n        {label && (\n          <label className=\"form-label\" htmlFor={props.id}>\n            {label}\n          </label>\n        )}\n        <input\n          className={cn(\n            'form-input',\n            error && 'border-red-500 focus:border-red-500 focus:ring-red-500',\n            className\n          )}\n          ref={ref}\n          {...props}\n        />\n        {error && (\n          <p className=\"mt-1 text-sm text-red-600\">{error}</p>\n        )}\n      </div>\n    );\n  }\n);\n\nInput.displayName = 'Input';\n\nexport { Input };","size_bytes":865},"components/ui/LoadingSpinner.tsx":{"content":"import React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface LoadingSpinnerProps {\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n}\n\nexport function LoadingSpinner({ size = 'md', className }: LoadingSpinnerProps) {\n  const sizes = {\n    sm: 'w-4 h-4',\n    md: 'w-6 h-6',\n    lg: 'w-8 h-8',\n  };\n\n  return (\n    <div\n      className={cn(\n        'animate-spin rounded-full border-2 border-gray-300 border-t-primary-500',\n        sizes[size],\n        className\n      )}\n      role=\"status\"\n      aria-label=\"Loading\"\n    >\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  );\n}","size_bytes":603},"components/ui/NotificationDropdown.js":{"content":"\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { Bell } from \"lucide-react\"\n\nexport default function NotificationDropdown() {\n  const [notifications, setNotifications] = useState([\n    {\n      id: 1,\n      message: \"Your last ride was rated 5 stars!\",\n      time: \"2 hours ago\",\n      read: false,\n    },\n    {\n      id: 2,\n      message: \"New payment method added successfully\",\n      time: \"1 day ago\",\n      read: true,\n    },\n  ])\n\n  const [showNotifications, setShowNotifications] = useState(false)\n  const dropdownRef = useRef(null)\n  const buttonRef = useRef(null)\n\n  const unreadCount = notifications.filter((n) => !n.read).length\n\n  useEffect(() => {\n    function handleClickOutside(event) {\n      if (\n        dropdownRef.current &&\n        !dropdownRef.current.contains(event.target) &&\n        !buttonRef.current.contains(event.target)\n      ) {\n        setShowNotifications(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  const handleMarkAsRead = (id) => {\n    setNotifications((prev) => prev.map((notif) => (notif.id === id ? { ...notif, read: true } : notif)))\n  }\n\n  const handleMarkAllAsRead = () => {\n    setNotifications((prev) => prev.map((notif) => ({ ...notif, read: true })))\n  }\n\n  return (\n    <div className=\"relative\">\n      <button\n        ref={buttonRef}\n        onClick={() => setShowNotifications(!showNotifications)}\n        className=\"relative p-2 rounded-full hover:bg-gray-100\"\n      >\n        <Bell className=\"h-6 w-6\" />\n        {unreadCount > 0 && (\n          <span className=\"absolute top-0 right-0 h-5 w-5 bg-red-500 text-white rounded-full text-xs flex items-center justify-center\">\n            {unreadCount}\n          </span>\n        )}\n      </button>\n\n      {showNotifications && (\n        <div\n          ref={dropdownRef}\n          className=\"absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border\"\n          style={{\n            zIndex: 1000,\n            maxHeight: \"400px\",\n            overflowY: \"auto\",\n          }}\n        >\n          <div className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h3 className=\"text-lg font-semibold\">Notifications</h3>\n              {unreadCount > 0 && (\n                <button onClick={handleMarkAllAsRead} className=\"text-sm text-orange-500 hover:text-orange-600\">\n                  Mark all as read\n                </button>\n              )}\n            </div>\n            <div className=\"space-y-3\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  onClick={() => handleMarkAsRead(notification.id)}\n                  className={`p-3 rounded cursor-pointer transition-colors ${\n                    notification.read ? \"bg-white\" : \"bg-blue-50\"\n                  } hover:bg-gray-50`}\n                >\n                  <p className=\"text-sm\">{notification.message}</p>\n                  <span className=\"text-xs text-gray-500\">{notification.time}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n","size_bytes":3251},"components/ui/Sheet.js":{"content":"import React, { useState, createContext, useContext } from \"react\"\n\nconst SheetContext = createContext()\n\nexport const Sheet = ({ open, onOpenChange, children }) => {\n  return (\n    <SheetContext.Provider value={{ open, onOpenChange }}>\n      <div>{children}</div>\n    </SheetContext.Provider>\n  )\n}\n\nexport const useSheetContext = () => {\n  return useContext(SheetContext)\n}\n","size_bytes":376},"components/ui/SuccessPopup.js":{"content":"\"use client\"\n\nimport { CheckCircle } from \"lucide-react\"\n\nexport default function SuccessPopup({ message, onClose }) {\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/50\">\n      <div className=\"w-full max-w-sm p-6 bg-white rounded-lg shadow-lg\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <CheckCircle className=\"w-16 h-16 text-green-500\" />\n          <p className=\"text-xl font-semibold text-center\">{message}</p>\n          <button onClick={onClose} className=\"px-6 py-2 text-white bg-orange-500 rounded hover:bg-orange-600\">\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":681},"components/ui/buttons.js":{"content":"import React from \"react\"\n\nconst Button = React.forwardRef(({ className, children, ...props }, ref) => {\n  return (\n    <button\n      className={`px-4 py-2 bg-orange-500 text-white rounded-md hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50 transition-colors ${className}`}\n      ref={ref}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n})\n\nButton.displayName = \"Button\"\n\nexport { Button }\n\n","size_bytes":449},"components/ui/input.js":{"content":"import React from \"react\"\n\nconst Input = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <input\n      className={`block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm ${className}`}\n      ref={ref}\n      {...props}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\nexport { Input }\n\n","size_bytes":387},"components/ui/label.js":{"content":"import React from \"react\"\n\nconst Label = React.forwardRef(({ className, children, ...props }, ref) => {\n  return (\n    <label className={`block text-sm font-medium text-gray-700 mb-1 ${className}`} ref={ref} {...props}>\n      {children}\n    </label>\n  )\n})\n\nLabel.displayName = \"Label\"\n\nexport { Label }\n\n","size_bytes":305},"lib/database/setup.ts":{"content":"import { createServiceClient } from '@/lib/supabase/server'\nimport fs from 'fs'\nimport path from 'path'\n\nexport async function setupDatabase() {\n  const supabase = createServiceClient()\n  \n  try {\n    // Read the schema file\n    const schemaPath = path.join(process.cwd(), 'lib/database/schema.sql')\n    const schema = fs.readFileSync(schemaPath, 'utf8')\n    \n    // Execute the schema\n    const { data, error } = await supabase.rpc('exec_sql', { sql: schema })\n    \n    if (error) {\n      console.error('Error setting up database:', error)\n      throw error\n    }\n    \n    console.log('Database schema set up successfully')\n    return { success: true, data }\n  } catch (error) {\n    console.error('Failed to setup database:', error)\n    return { success: false, error }\n  }\n}\n\nexport async function seedDatabase() {\n  const supabase = createServiceClient()\n  \n  try {\n    // Create default admin user (this should be done via Supabase Auth Admin API in practice)\n    console.log('Database seeding completed')\n    return { success: true }\n  } catch (error) {\n    console.error('Failed to seed database:', error)\n    return { success: false, error }\n  }\n}","size_bytes":1154},"lib/supabase/client.ts":{"content":"import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}","size_bytes":211},"lib/supabase/middleware.ts":{"content":"import { createServerClient } from '@supabase/ssr'\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // IMPORTANT: Avoid writing any logic between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  return { user, supabaseResponse }\n}","size_bytes":1130},"lib/supabase/server.ts":{"content":"import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport function createClient() {\n  const cookieStore = cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n\nexport function createServiceClient() {\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return []\n        },\n        setAll() {\n          // Service role client doesn't need cookies\n        },\n      },\n    }\n  )\n}","size_bytes":1112},"lib/types/database.ts":{"content":"export interface Database {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string\n          role: 'passenger' | 'driver' | 'admin'\n          full_name: string\n          phone: string | null\n          avatar_url: string | null\n          is_verified: boolean\n          is_active: boolean\n          date_of_birth: string | null\n          emergency_contact: string | null\n          emergency_phone: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id: string\n          role?: 'passenger' | 'driver' | 'admin'\n          full_name: string\n          phone?: string | null\n          avatar_url?: string | null\n          is_verified?: boolean\n          is_active?: boolean\n          date_of_birth?: string | null\n          emergency_contact?: string | null\n          emergency_phone?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          role?: 'passenger' | 'driver' | 'admin'\n          full_name?: string\n          phone?: string | null\n          avatar_url?: string | null\n          is_verified?: boolean\n          is_active?: boolean\n          date_of_birth?: string | null\n          emergency_contact?: string | null\n          emergency_phone?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      rides: {\n        Row: {\n          id: string\n          passenger_id: string | null\n          driver_id: string | null\n          status: 'requested' | 'assigned' | 'arriving' | 'in_progress' | 'completed' | 'canceled'\n          pickup_address: string\n          pickup_location: any // geography type\n          dropoff_address: string\n          dropoff_location: any // geography type\n          distance_km: number | null\n          estimated_duration_min: number | null\n          fare_estimate: number | null\n          fare_final: number | null\n          surge_multiplier: number\n          passenger_notes: string | null\n          driver_notes: string | null\n          requested_at: string\n          assigned_at: string | null\n          pickup_at: string | null\n          dropoff_at: string | null\n          canceled_at: string | null\n          canceled_by: string | null\n          cancellation_reason: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          passenger_id?: string | null\n          driver_id?: string | null\n          status?: 'requested' | 'assigned' | 'arriving' | 'in_progress' | 'completed' | 'canceled'\n          pickup_address: string\n          pickup_location: any\n          dropoff_address: string\n          dropoff_location: any\n          distance_km?: number | null\n          estimated_duration_min?: number | null\n          fare_estimate?: number | null\n          fare_final?: number | null\n          surge_multiplier?: number\n          passenger_notes?: string | null\n          driver_notes?: string | null\n          requested_at?: string\n          assigned_at?: string | null\n          pickup_at?: string | null\n          dropoff_at?: string | null\n          canceled_at?: string | null\n          canceled_by?: string | null\n          cancellation_reason?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          passenger_id?: string | null\n          driver_id?: string | null\n          status?: 'requested' | 'assigned' | 'arriving' | 'in_progress' | 'completed' | 'canceled'\n          pickup_address?: string\n          pickup_location?: any\n          dropoff_address?: string\n          dropoff_location?: any\n          distance_km?: number | null\n          estimated_duration_min?: number | null\n          fare_estimate?: number | null\n          fare_final?: number | null\n          surge_multiplier?: number\n          passenger_notes?: string | null\n          driver_notes?: string | null\n          requested_at?: string\n          assigned_at?: string | null\n          pickup_at?: string | null\n          dropoff_at?: string | null\n          canceled_at?: string | null\n          canceled_by?: string | null\n          cancellation_reason?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      drivers: {\n        Row: {\n          user_id: string\n          license_number: string\n          license_expiry: string\n          vehicle_make: string\n          vehicle_model: string\n          vehicle_year: number\n          vehicle_color: string\n          vehicle_plate: string\n          status: 'offline' | 'online' | 'busy'\n          documents_verified: boolean\n          background_check_verified: boolean\n          rating: number\n          total_rides: number\n          total_earnings: number\n          current_location: any | null\n          current_heading: number | null\n          last_location_update: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          user_id: string\n          license_number: string\n          license_expiry: string\n          vehicle_make: string\n          vehicle_model: string\n          vehicle_year: number\n          vehicle_color: string\n          vehicle_plate: string\n          status?: 'offline' | 'online' | 'busy'\n          documents_verified?: boolean\n          background_check_verified?: boolean\n          rating?: number\n          total_rides?: number\n          total_earnings?: number\n          current_location?: any | null\n          current_heading?: number | null\n          last_location_update?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          user_id?: string\n          license_number?: string\n          license_expiry?: string\n          vehicle_make?: string\n          vehicle_model?: string\n          vehicle_year?: number\n          vehicle_color?: string\n          vehicle_plate?: string\n          status?: 'offline' | 'online' | 'busy'\n          documents_verified?: boolean\n          background_check_verified?: boolean\n          rating?: number\n          total_rides?: number\n          total_earnings?: number\n          current_location?: any | null\n          current_heading?: number | null\n          last_location_update?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      user_role: 'passenger' | 'driver' | 'admin'\n      ride_status: 'requested' | 'assigned' | 'arriving' | 'in_progress' | 'completed' | 'canceled'\n      driver_status: 'offline' | 'online' | 'busy'\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}","size_bytes":6798},"app/admin/analytics/page.js":{"content":"\"use client\"\n\nimport { LineChart } from \"lucide-react\"\nimport { useEffect, useRef } from \"react\"\nimport Chart from \"chart.js/auto\"\n\nexport default function AnalyticsPage() {\n  const chartRef = useRef(null)\n  const chartInstance = useRef(null)\n\n  useEffect(() => {\n    if (chartInstance.current) {\n      chartInstance.current.destroy()\n    }\n\n    const ctx = chartRef.current.getContext(\"2d\")\n    chartInstance.current = new Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"],\n        datasets: [\n          {\n            label: \"Revenue\",\n            data: [12000, 19000, 15000, 25000, 22000, 30000],\n            borderColor: \"#FFA500\",\n            tension: 0.1,\n            fill: false,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: \"top\",\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    })\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy()\n      }\n    }\n  }, [])\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Analytics</h1>\n        <LineChart className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Revenue Overview</h2>\n          <div className=\"h-[300px]\">\n            <canvas ref={chartRef} />\n          </div>\n        </div>\n\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Key Metrics</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <p className=\"text-sm text-gray-500\">Conversion Rate</p>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-2xl font-semibold\">65%</div>\n                <span className=\"text-green-500\">↑ 12%</span>\n              </div>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-500\">Average Order Value</p>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"text-2xl font-semibold\">$45.50</div>\n                <span className=\"text-green-500\">↑ 8%</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2595},"app/admin/documents/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { FileText, Upload, Search, Filter } from \"lucide-react\"\n\nexport default function DocumentsPage() {\n  const [documents] = useState([\n    {\n      id: 1,\n      name: \"Driver License Guidelines.pdf\",\n      type: \"PDF\",\n      size: \"2.5 MB\",\n      category: \"Guidelines\",\n      uploadedBy: \"Admin\",\n      uploadDate: \"2025-01-23T10:00:00\",\n      status: \"active\",\n    },\n    {\n      id: 2,\n      name: \"Vehicle Registration Form.docx\",\n      type: \"DOCX\",\n      size: \"1.8 MB\",\n      category: \"Forms\",\n      uploadedBy: \"Admin\",\n      uploadDate: \"2025-01-22T15:30:00\",\n      status: \"active\",\n    },\n    {\n      id: 3,\n      name: \"Insurance Requirements.pdf\",\n      type: \"PDF\",\n      size: \"3.2 MB\",\n      category: \"Legal\",\n      uploadedBy: \"Admin\",\n      uploadDate: \"2025-01-21T09:45:00\",\n      status: \"archived\",\n    },\n  ])\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Documents</h1>\n        <FileText className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0 mb-6\">\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"Search documents...\"\n              className=\"pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          </div>\n          <div className=\"flex space-x-2\">\n            <button className=\"flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\">\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Upload\n            </button>\n            <button className=\"flex items-center px-4 py-2 border rounded-lg hover:bg-gray-50\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filter\n            </button>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Name\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Category\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Type\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Size\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Uploaded By\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Upload Date\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {documents.map((doc) => (\n                <tr key={doc.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <FileText className=\"w-4 h-4 text-gray-400 mr-2\" />\n                      <span className=\"text-sm font-medium text-gray-900\">{doc.name}</span>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{doc.category}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{doc.type}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{doc.size}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{doc.uploadedBy}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {new Date(doc.uploadDate).toLocaleString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span\n                      className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${\n                        doc.status === \"active\" ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"\n                      }`}\n                    >\n                      {doc.status.charAt(0).toUpperCase() + doc.status.slice(1)}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":5221},"app/admin/emergency-alerts/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { AlertTriangle, AlertCircle, CheckCircle2 } from \"lucide-react\"\n\nexport default function EmergencyAlertsPage() {\n  const [alerts] = useState([\n    {\n      id: 1,\n      type: \"emergency\",\n      user: \"Jane Smith\",\n      status: \"active\",\n      location: \"123 Main St, Buffalo\",\n      time: \"2 minutes ago\",\n      description: \"Driver requested immediate assistance\",\n    },\n    {\n      id: 2,\n      type: \"warning\",\n      user: \"John Doe\",\n      status: \"resolved\",\n      location: \"456 Elm St, Buffalo\",\n      time: \"15 minutes ago\",\n      description: \"Vehicle breakdown reported\",\n    },\n    {\n      id: 3,\n      type: \"info\",\n      user: \"Mike Johnson\",\n      status: \"pending\",\n      location: \"789 Oak St, Buffalo\",\n      time: \"1 hour ago\",\n      description: \"Route deviation detected\",\n    },\n  ])\n\n  const getAlertIcon = (type) => {\n    switch (type) {\n      case \"emergency\":\n        return <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n      case \"warning\":\n        return <AlertCircle className=\"w-5 h-5 text-yellow-500\" />\n      case \"info\":\n        return <CheckCircle2 className=\"w-5 h-5 text-blue-500\" />\n      default:\n        return null\n    }\n  }\n\n  const getStatusBadge = (status) => {\n    const styles = {\n      active: \"bg-red-100 text-red-800\",\n      resolved: \"bg-green-100 text-green-800\",\n      pending: \"bg-yellow-100 text-yellow-800\",\n    }\n\n    return (\n      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${styles[status]}`}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </span>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Emergency Alerts</h1>\n        <AlertTriangle className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Active Alerts</h2>\n          <div className=\"space-y-4\">\n            {alerts\n              .filter((alert) => alert.status === \"active\")\n              .map((alert) => (\n                <div key={alert.id} className=\"flex items-start space-x-4 p-4 border rounded-lg bg-red-50\">\n                  {getAlertIcon(alert.type)}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-medium\">{alert.user}</h3>\n                      {getStatusBadge(alert.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{alert.description}</p>\n                    <div className=\"flex items-center text-sm text-gray-500 mt-2\">\n                      <span>{alert.location}</span>\n                      <span className=\"mx-2\">•</span>\n                      <span>{alert.time}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Recent Alerts</h2>\n          <div className=\"space-y-4\">\n            {alerts\n              .filter((alert) => alert.status !== \"active\")\n              .map((alert) => (\n                <div key={alert.id} className=\"flex items-start space-x-4 p-4 border rounded-lg\">\n                  {getAlertIcon(alert.type)}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"font-medium\">{alert.user}</h3>\n                      {getStatusBadge(alert.status)}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">{alert.description}</p>\n                    <div className=\"flex items-center text-sm text-gray-500 mt-2\">\n                      <span>{alert.location}</span>\n                      <span className=\"mx-2\">•</span>\n                      <span>{alert.time}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":4258},"app/admin/notifications/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Bell, Settings, Trash2 } from \"lucide-react\"\n\nexport default function NotificationsPage() {\n  const [notifications] = useState([\n    {\n      id: 1,\n      type: \"system\",\n      title: \"System Maintenance\",\n      message: \"Scheduled maintenance will occur on January 25th at 2 AM EST\",\n      date: \"2025-01-23T12:00:00\",\n      read: false,\n    },\n    {\n      id: 2,\n      type: \"alert\",\n      title: \"High Demand Alert\",\n      message: \"Surge pricing is now active in downtown area\",\n      date: \"2025-01-23T11:30:00\",\n      read: true,\n    },\n    {\n      id: 3,\n      type: \"update\",\n      title: \"New Feature Available\",\n      message: \"Driver ratings system has been updated\",\n      date: \"2025-01-23T10:15:00\",\n      read: true,\n    },\n  ])\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Notifications</h1>\n        <Bell className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <h2 className=\"text-xl font-semibold\">Notification Center</h2>\n            <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs font-semibold rounded-full\">\n              {notifications.filter(n => !n.read).length} Unread\n            </span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button className=\"p-2 hover:bg-gray-100 rounded-lg\">\n              <Settings className=\"w-5 h-5 text-gray-500\" />\n            </button>\n            <button className=\"p-2 hover:bg-gray-100 rounded-lg\">\n              <Trash2 className=\"w-5 h-5 text-gray-500\" />\n            </button>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          {notifications.map((notification) => (\n            <div\n              key={notification.id}\n              className={`p-4 border rounded-lg ${notification.read ? 'bg-white' : 'bg-blue-50'}`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-medium text-gray-900\">{notification.title}</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">{notification}</p>\n                  <p className=\"mt-1 text-sm text-gray-500\">{notification.message}</p>\n                  <div className=\"mt-2 text-xs text-gray-400\">\n                    {new Date(notification.date).toLocaleString()}\n                  </div>\n                </div>\n                {!notification.read && (\n                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2897},"app/admin/payments/page.js":{"content":"import { DollarSign } from \"lucide-react\"\n\nexport default function PaymentsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Payments Management</h1>\n        <DollarSign className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Transaction ID\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  User\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Amount\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {/* Sample data */}\n              <tr>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">#TX12345</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">John Doe</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">$25.00</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                    Completed\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">2025-01-21</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2315},"app/admin/reviews/page.js":{"content":"import { Star } from \"lucide-react\"\n\nexport default function ReviewsPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Reviews Management</h1>\n        <Star className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  User\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Rating\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Comment\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Date\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {/* Sample data */}\n              <tr>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">John Doe</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                    <span className=\"ml-1\">4.5</span>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">Great service!</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">2025-01-21</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  <button className=\"text-red-600 hover:text-red-900\">Delete</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2426},"app/admin/rides/page.js":{"content":"import { Car } from \"lucide-react\"\n\nexport default function RidesPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Rides Management</h1>\n        <Car className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Ride ID\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Driver\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Passenger\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Amount\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {/* Sample data */}\n              <tr>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">#12345</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">Jane Smith</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">John Doe</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                    Completed\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">$25.00</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2293},"app/admin/settings/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Settings, Save } from \"lucide-react\"\n\nexport default function SettingsPage() {\n  const [settings, setSettings] = useState({\n    general: {\n      siteName: \"Ryde5 Admin\",\n      supportEmail: \"support@ryde5.com\",\n      timezone: \"America/New_York\",\n    },\n    notifications: {\n      emailAlerts: true,\n      pushNotifications: true,\n      smsAlerts: false,\n    },\n    security: {\n      twoFactorAuth: true,\n      sessionTimeout: \"30\",\n      passwordExpiry: \"90\",\n    },\n  })\n\n  const handleChange = (section, field, value) => {\n    setSettings((prev) => ({\n      ...prev,\n      [section]: {\n        ...prev[section],\n        [field]: value,\n      },\n    }))\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Settings</h1>\n        <Settings className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* General Settings */}\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">General Settings</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Site Name</label>\n              <input\n                type=\"text\"\n                value={settings.general.siteName}\n                onChange={(e) => handleChange(\"general\", \"siteName\", e.target.value)}\n                className=\"mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Support Email</label>\n              <input\n                type=\"email\"\n                value={settings.general.supportEmail}\n                onChange={(e) => handleChange(\"general\", \"supportEmail\", e.target.value)}\n                className=\"mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Timezone</label>\n              <select\n                value={settings.general.timezone}\n                onChange={(e) => handleChange(\"general\", \"timezone\", e.target.value)}\n                className=\"mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"America/New_York\">Eastern Time</option>\n                <option value=\"America/Chicago\">Central Time</option>\n                <option value=\"America/Denver\">Mountain Time</option>\n                <option value=\"America/Los_Angeles\">Pacific Time</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Notification Settings */}\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Notification Settings</h2>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">Email Alerts</label>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.notifications.emailAlerts}\n                  onChange={(e) => handleChange(\"notifications\", \"emailAlerts\", e.target.checked)}\n                  className=\"sr-only peer\"\n                />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n              </label>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">Push Notifications</label>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.notifications.pushNotifications}\n                  onChange={(e) => handleChange(\"notifications\", \"pushNotifications\", e.target.checked)}\n                  className=\"sr-only peer\"\n                />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n              </label>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">SMS Alerts</label>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.notifications.smsAlerts}\n                  onChange={(e) => handleChange(\"notifications\", \"smsAlerts\", e.target.checked)}\n                  className=\"sr-only peer\"\n                />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Security Settings */}\n        <div className=\"bg-white shadow-sm rounded-lg p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Security Settings</h2>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"text-sm font-medium text-gray-700\">Two-Factor Authentication</label>\n              <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.security.twoFactorAuth}\n                  onChange={(e) => handleChange(\"security\", \"twoFactorAuth\", e.target.checked)}\n                  className=\"sr-only peer\"\n                />\n                <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n              </label>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Session Timeout (minutes)</label>\n              <input\n                type=\"number\"\n                value={settings.security.sessionTimeout}\n                onChange={(e) => handleChange(\"security\", \"sessionTimeout\", e.target.value)}\n                className=\"mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700\">Password Expiry (days)</label>\n              <input\n                type=\"number\"\n                value={settings.security.passwordExpiry}\n                onChange={(e) => handleChange(\"security\", \"passwordExpiry\", e.target.value)}\n                className=\"mt-1 block w-full border rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end\">\n        <button className=\"flex items-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600\">\n          <Save className=\"w-4 h-4 mr-2\" />\n          Save Changes\n        </button>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":8643},"app/admin/support-tickets/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { MessageSquare, Search } from \"lucide-react\"\n\nexport default function SupportTicketsPage() {\n  const [tickets] = useState([\n    {\n      id: \"TKT-001\",\n      user: \"John Smith\",\n      subject: \"Payment Issue\",\n      priority: \"high\",\n      status: \"open\",\n      created: \"2025-01-23T10:30:00\",\n      lastUpdate: \"2025-01-23T11:45:00\",\n    },\n    {\n      id: \"TKT-002\",\n      user: \"Mary Johnson\",\n      subject: \"App Navigation Problem\",\n      priority: \"medium\",\n      status: \"in-progress\",\n      created: \"2025-01-23T09:15:00\",\n      lastUpdate: \"2025-01-23T10:20:00\",\n    },\n    {\n      id: \"TKT-003\",\n      user: \"Robert Wilson\",\n      subject: \"Account Verification\",\n      priority: \"low\",\n      status: \"resolved\",\n      created: \"2025-01-22T15:45:00\",\n      lastUpdate: \"2025-01-23T09:30:00\",\n    },\n  ])\n\n  const getPriorityBadge = (priority) => {\n    const styles = {\n      high: \"bg-red-100 text-red-800\",\n      medium: \"bg-yellow-100 text-yellow-800\",\n      low: \"bg-green-100 text-green-800\",\n    }\n\n    return (\n      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${styles[priority]}`}>\n        {priority.charAt(0).toUpperCase() + priority.slice(1)}\n      </span>\n    )\n  }\n\n  const getStatusBadge = (status) => {\n    const styles = {\n      open: \"bg-blue-100 text-blue-800\",\n      \"in-progress\": \"bg-yellow-100 text-yellow-800\",\n      resolved: \"bg-green-100 text-green-800\",\n    }\n\n    return (\n      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${styles[status]}`}>\n        {status\n          .split(\"-\")\n          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(\" \")}\n      </span>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Support Tickets</h1>\n        <MessageSquare className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0 mb-6\">\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"Search tickets...\"\n              className=\"pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n          </div>\n          <div className=\"flex space-x-2\">\n            <select className=\"border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\">\n              <option value=\"\">All Priorities</option>\n              <option value=\"high\">High</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"low\">Low</option>\n            </select>\n            <select className=\"border rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500\">\n              <option value=\"\">All Statuses</option>\n              <option value=\"open\">Open</option>\n              <option value=\"in-progress\">In Progress</option>\n              <option value=\"resolved\">Resolved</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Ticket ID\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  User\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Subject\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Priority\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Created\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Last Update\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {tickets.map((ticket) => (\n                <tr key={ticket.id} className=\"hover:bg-gray-50\">\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-600\">{ticket.id}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{ticket.user}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{ticket.subject}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">{getPriorityBadge(ticket.priority)}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">{getStatusBadge(ticket.status)}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {new Date(ticket.created).toLocaleString()}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {new Date(ticket.lastUpdate).toLocaleString()}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":5891},"app/admin/users/page.js":{"content":"import { Users } from \"lucide-react\"\n\nexport default function UsersPage() {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-semibold\">Users Management</h1>\n        <Users className=\"w-8 h-8 text-gray-500\" />\n      </div>\n\n      <div className=\"bg-white shadow-sm rounded-lg p-6\">\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Name\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Email\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Role\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {/* Sample data */}\n              <tr>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">John Doe</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">john@example.com</td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">User</td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\n                    Active\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  <button className=\"text-indigo-600 hover:text-indigo-900\">Edit</button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n","size_bytes":2391},"app/api/driver/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/driver - Get current driver profile and statistics\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Verify user is a driver\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type, full_name, phone, avatar_url')\n      .eq('id', user.id)\n      .single()\n\n    if (profile?.user_type !== 'driver') {\n      return NextResponse.json({ error: 'Only drivers can access this endpoint' }, { status: 403 })\n    }\n\n    // Get driver profile\n    const { data: driverProfile, error: driverError } = await supabase\n      .from('driver_profiles')\n      .select('*')\n      .eq('user_id', user.id)\n      .single()\n\n    if (driverError) {\n      console.error('Error fetching driver profile:', driverError)\n      return NextResponse.json({ error: 'Driver profile not found' }, { status: 404 })\n    }\n\n    // Get ride statistics\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    const tomorrow = new Date(today)\n    tomorrow.setDate(tomorrow.getDate() + 1)\n\n    // Today's rides\n    const { data: todayRides } = await supabase\n      .from('rides')\n      .select('id, fare, status, created_at')\n      .eq('driver_id', user.id)\n      .gte('created_at', today.toISOString())\n      .lt('created_at', tomorrow.toISOString())\n\n    // Recent rides (last 10)\n    const { data: recentRides } = await supabase\n      .from('rides')\n      .select(`\n        id,\n        fare,\n        status,\n        created_at,\n        pickup_location,\n        dropoff_location,\n        profiles!rides_passenger_id_fkey(full_name)\n      `)\n      .eq('driver_id', user.id)\n      .order('created_at', { ascending: false })\n      .limit(10)\n\n    // Calculate statistics\n    const todayEarnings = todayRides?.reduce((sum, ride) => {\n      return ride.status === 'completed' ? sum + parseFloat(ride.fare) : sum\n    }, 0) || 0\n\n    const completedTodayRides = todayRides?.filter(ride => ride.status === 'completed').length || 0\n\n    // Format response\n    const driverData = {\n      id: user.id,\n      name: profile.full_name,\n      email: user.email,\n      phone: profile.phone,\n      avatar: profile.avatar_url,\n      rating: driverProfile.rating,\n      ridesCompleted: driverProfile.total_rides,\n      status: driverProfile.is_available ? 'online' : 'offline',\n      vehicle: {\n        make: driverProfile.vehicle_make,\n        model: driverProfile.vehicle_model,\n        year: driverProfile.vehicle_year,\n        color: driverProfile.vehicle_color,\n        licensePlate: driverProfile.license_plate,\n      },\n      earnings: {\n        total: driverProfile.total_earnings,\n        today: todayEarnings,\n        thisWeek: 0, // Would need weekly calculation\n        pending: 0, // Would need pending calculation\n      },\n      todayStats: {\n        earnings: todayEarnings,\n        completedRides: completedTodayRides,\n      },\n      recentActivity: recentRides?.map(ride => {\n        const profile = Array.isArray(ride.profiles) ? ride.profiles[0] : ride.profiles;\n        return {\n          id: ride.id,\n          from: ride.pickup_location,\n          to: ride.dropoff_location,\n          amount: parseFloat(ride.fare),\n          passenger: profile?.full_name || 'Unknown',\n          status: ride.status,\n          time: new Date(ride.created_at).toLocaleTimeString(),\n        };\n      }) || [],\n      documents: {\n        verified: driverProfile.documents_verified,\n        backgroundCheck: driverProfile.background_check_status === 'approved',\n      }\n    }\n\n    return NextResponse.json(driverData)\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// PUT /api/driver - Update driver availability status\nexport async function PUT(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Verify user is a driver\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    if (profile?.user_type !== 'driver') {\n      return NextResponse.json({ error: 'Only drivers can update availability' }, { status: 403 })\n    }\n\n    const body = await request.json()\n    const { is_available } = body\n\n    if (typeof is_available !== 'boolean') {\n      return NextResponse.json({ error: 'is_available must be a boolean' }, { status: 400 })\n    }\n\n    // Update driver availability\n    const { error: updateError } = await supabase\n      .from('driver_profiles')\n      .update({ is_available })\n      .eq('user_id', user.id)\n\n    if (updateError) {\n      console.error('Error updating driver availability:', updateError)\n      return NextResponse.json({ error: 'Failed to update availability' }, { status: 500 })\n    }\n\n    return NextResponse.json({ success: true, is_available })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":5544},"app/api/drivers/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/drivers - Get available drivers or driver search\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    const { searchParams } = new URL(request.url)\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Check if this is a search for available drivers near a location\n    const lat = searchParams.get('lat')\n    const lng = searchParams.get('lng')\n    const radius = searchParams.get('radius') || '10' // Default 10km radius\n\n    if (lat && lng) {\n      // Search for available drivers near pickup location\n      const { data: drivers, error } = await supabase\n        .from('driver_profiles')\n        .select(`\n          *,\n          user:profiles!driver_profiles_user_id_fkey(full_name, phone, avatar_url)\n        `)\n        .eq('status', 'online')\n        .eq('is_available', true)\n        .not('current_location', 'is', null)\n\n      if (error) {\n        console.error('Error fetching drivers:', error)\n        return NextResponse.json({ error: 'Failed to fetch drivers' }, { status: 500 })\n      }\n\n      // Filter drivers by distance (simplified - in production use PostGIS ST_DWithin)\n      const nearbyDrivers = drivers?.filter(driver => {\n        if (!driver.current_location) return false\n        \n        // Parse location from PostGIS point format\n        // This is a simplified distance calculation - use proper geospatial functions in production\n        try {\n          const locationStr = driver.current_location.replace('POINT(', '').replace(')', '')\n          const [driverLng, driverLat] = locationStr.split(' ').map(Number)\n          \n          const distance = calculateDistance(\n            parseFloat(lat), parseFloat(lng),\n            driverLat, driverLng\n          )\n          \n          return distance <= parseFloat(radius)\n        } catch {\n          return false\n        }\n      }) || []\n\n      return NextResponse.json({ drivers: nearbyDrivers })\n    }\n\n    // Default: Get all drivers (admin only)\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    if (profile?.user_type !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })\n    }\n\n    const { data: drivers, error } = await supabase\n      .from('driver_profiles')\n      .select(`\n        *,\n        user:profiles!driver_profiles_user_id_fkey(full_name, phone, avatar_url, email)\n      `)\n      .order('created_at', { ascending: false })\n\n    if (error) {\n      console.error('Error fetching drivers:', error)\n      return NextResponse.json({ error: 'Failed to fetch drivers' }, { status: 500 })\n    }\n\n    return NextResponse.json({ drivers })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// Helper function to calculate distance between two points (Haversine formula)\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371 // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180\n  const dLng = (lng2 - lng1) * Math.PI / 180\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLng/2) * Math.sin(dLng/2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n  return R * c\n}","size_bytes":3700},"app/api/rides/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/rides - Fetch rides (with optional filters)\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    const { searchParams } = new URL(request.url)\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get user profile to determine role\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    let query = supabase\n      .from('rides')\n      .select(`\n        *,\n        passenger:profiles!rides_passenger_id_fkey(full_name, phone),\n        driver:profiles!rides_driver_id_fkey(full_name, phone)\n      `)\n\n    // Apply role-based filters\n    if (profile?.user_type === 'passenger') {\n      query = query.eq('passenger_id', user.id)\n    } else if (profile?.user_type === 'driver') {\n      query = query.eq('driver_id', user.id)\n    }\n    // Admin can see all rides (no additional filter needed)\n\n    // Apply optional filters from query params\n    const status = searchParams.get('status')\n    if (status) {\n      query = query.eq('status', status)\n    }\n\n    const limit = searchParams.get('limit')\n    if (limit) {\n      query = query.limit(parseInt(limit))\n    }\n\n    // Order by most recent first\n    query = query.order('created_at', { ascending: false })\n\n    const { data: rides, error } = await query\n\n    if (error) {\n      console.error('Error fetching rides:', error)\n      return NextResponse.json({ error: 'Failed to fetch rides' }, { status: 500 })\n    }\n\n    return NextResponse.json({ rides })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// POST /api/rides - Create new ride request\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Verify user is a passenger\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    if (profile?.user_type !== 'passenger') {\n      return NextResponse.json({ error: 'Only passengers can request rides' }, { status: 403 })\n    }\n\n    const body = await request.json()\n    const {\n      pickup_address,\n      pickup_location,\n      dropoff_address,\n      dropoff_location,\n      distance_km,\n      estimated_duration_min,\n      fare_estimate,\n      passenger_notes\n    } = body\n\n    // Validate required fields\n    if (!pickup_address || !pickup_location || !dropoff_address || !dropoff_location) {\n      return NextResponse.json({ error: 'Missing required location data' }, { status: 400 })\n    }\n\n    // Create new ride request\n    const { data: ride, error } = await supabase\n      .from('rides')\n      .insert({\n        passenger_id: user.id,\n        status: 'requested',\n        pickup_address,\n        pickup_location: `POINT(${pickup_location.lng} ${pickup_location.lat})`,\n        dropoff_address,\n        dropoff_location: `POINT(${dropoff_location.lng} ${dropoff_location.lat})`,\n        distance_km,\n        estimated_duration_min,\n        fare_estimate,\n        surge_multiplier: 1.0, // Default surge\n        passenger_notes,\n        requested_at: new Date().toISOString()\n      })\n      .select()\n      .single()\n\n    if (error) {\n      console.error('Error creating ride:', error)\n      return NextResponse.json({ error: 'Failed to create ride request' }, { status: 500 })\n    }\n\n    return NextResponse.json({ ride }, { status: 201 })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":4138},"app/auth/callback/route.ts":{"content":"import { createClient } from '@/lib/supabase/server'\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const { searchParams, origin } = new URL(request.url)\n  const code = searchParams.get('code')\n  const next = searchParams.get('next') ?? '/'\n\n  if (code) {\n    const supabase = createClient()\n    const { data, error } = await supabase.auth.exchangeCodeForSession(code)\n    \n    if (!error && data.user) {\n      // Check if profile exists, if not create it\n      const { data: existingProfile } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', data.user.id)\n        .single()\n\n      if (!existingProfile) {\n        // Create profile from user metadata - SECURITY: ALWAYS default to passenger, NEVER trust client for roles\n        const userMetadata = data.user.user_metadata\n        \n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            id: data.user.id,\n            full_name: userMetadata.full_name,\n            email: data.user.email,\n            phone: userMetadata.phone,\n            user_type: 'passenger', // SECURITY: Always passenger by default - no client role assignment\n            avatar_url: null,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          })\n\n        if (profileError) {\n          console.error('Error creating profile:', profileError)\n        }\n\n        // SECURITY: If user wants to be a driver, store as pending application (not auto-approve)\n        if (userMetadata.registration_type === 'driver') {\n          // TODO: Create pending driver application for admin review\n          // This would be stored in a separate table for approval workflow\n          console.log('Driver application submitted for:', data.user.id)\n        }\n      }\n\n      // Redirect based on user type - SECURE: Always query database for role, never trust metadata\n      let userType = 'passenger'\n      \n      if (existingProfile) {\n        userType = existingProfile.user_type\n      } else {\n        // Re-query database after profile creation to ensure accuracy\n        const { data: newProfile } = await supabase\n          .from('profiles')\n          .select('user_type')\n          .eq('id', data.user.id)\n          .single()\n        \n        userType = newProfile?.user_type || 'passenger'\n      }\n\n      // SECURITY: Whitelist safe redirect paths and ignore client-controlled 'next' for role-based routing\n      const safeRedirectPaths = ['/main', '/profile']\n      let redirectPath = '/main' // Default safe path\n\n      if (next && safeRedirectPaths.includes(next)) {\n        redirectPath = next\n      } else {\n        // Role-based redirect (ignore potentially malicious 'next' parameter)\n        switch (userType) {\n          case 'driver':\n            redirectPath = '/driver-profile'\n            break\n          case 'admin':\n            redirectPath = '/admin'\n            break\n          default:\n            redirectPath = '/main'\n        }\n      }\n\n      return NextResponse.redirect(`${origin}${redirectPath}`)\n    }\n  }\n\n  // Return the user to an error page with instructions\n  return NextResponse.redirect(`${origin}/auth/auth-code-error`)\n}","size_bytes":3276},"app/api/admin/stats/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/admin/stats - Get admin dashboard statistics\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user and verify admin access\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    if (profile?.user_type !== 'admin') {\n      return NextResponse.json({ error: 'Admin access required' }, { status: 403 })\n    }\n\n    // Get total users count\n    const { count: totalUsers } = await supabase\n      .from('profiles')\n      .select('*', { count: 'exact', head: true })\n\n    // Get total drivers count\n    const { count: totalDrivers } = await supabase\n      .from('driver_profiles')\n      .select('*', { count: 'exact', head: true })\n\n    // Get total rides count\n    const { count: totalRides } = await supabase\n      .from('rides')\n      .select('*', { count: 'exact', head: true })\n\n    // Get completed rides for revenue calculation\n    const { data: completedRides } = await supabase\n      .from('rides')\n      .select('fare')\n      .eq('status', 'completed')\n\n    // Calculate total revenue\n    const totalRevenue = completedRides?.reduce((sum, ride) => sum + parseFloat(ride.fare), 0) || 0\n\n    // Get average rating from driver profiles\n    const { data: driverRatings } = await supabase\n      .from('driver_profiles')\n      .select('rating')\n      .not('rating', 'is', null)\n\n    const avgRating = driverRatings && driverRatings.length > 0 \n      ? driverRatings.reduce((sum, driver) => sum + driver.rating, 0) / driverRatings.length \n      : 0\n\n    // Get today's statistics\n    const today = new Date()\n    today.setHours(0, 0, 0, 0)\n    const tomorrow = new Date(today)\n    tomorrow.setDate(tomorrow.getDate() + 1)\n\n    const { count: todayRides } = await supabase\n      .from('rides')\n      .select('*', { count: 'exact', head: true })\n      .gte('created_at', today.toISOString())\n      .lt('created_at', tomorrow.toISOString())\n\n    const { data: todayCompletedRides } = await supabase\n      .from('rides')\n      .select('fare')\n      .eq('status', 'completed')\n      .gte('created_at', today.toISOString())\n      .lt('created_at', tomorrow.toISOString())\n\n    const todayRevenue = todayCompletedRides?.reduce((sum, ride) => sum + parseFloat(ride.fare), 0) || 0\n\n    // Get recent rides for activity\n    const { data: recentRides } = await supabase\n      .from('rides')\n      .select(`\n        id,\n        fare,\n        status,\n        created_at,\n        pickup_location,\n        dropoff_location,\n        passenger:profiles!rides_passenger_id_fkey(full_name),\n        driver:profiles!rides_driver_id_fkey(full_name)\n      `)\n      .order('created_at', { ascending: false })\n      .limit(10)\n\n    // Get recent reviews\n    const { data: recentReviews } = await supabase\n      .from('reviews')\n      .select(`\n        id,\n        rating,\n        comment,\n        created_at,\n        reviewer:profiles!reviews_reviewer_id_fkey(full_name),\n        reviewee:profiles!reviews_reviewee_id_fkey(full_name)\n      `)\n      .order('created_at', { ascending: false })\n      .limit(10)\n\n    const stats = {\n      overview: {\n        totalUsers: totalUsers || 0,\n        totalDrivers: totalDrivers || 0,\n        totalRides: totalRides || 0,\n        totalRevenue: totalRevenue,\n        avgRating: Math.round(avgRating * 10) / 10,\n      },\n      today: {\n        rides: todayRides || 0,\n        revenue: todayRevenue,\n      },\n      recentActivity: {\n        rides: recentRides?.map(ride => {\n          const passenger = Array.isArray(ride.passenger) ? ride.passenger[0] : ride.passenger;\n          const driver = Array.isArray(ride.driver) ? ride.driver[0] : ride.driver;\n          \n          return {\n            id: ride.id,\n            amount: parseFloat(ride.fare),\n            status: ride.status,\n            passenger: passenger?.full_name || 'Unknown',\n            driver: driver?.full_name || 'Unknown',\n            from: ride.pickup_location,\n            to: ride.dropoff_location,\n            time: new Date(ride.created_at).toLocaleString(),\n          };\n        }) || [],\n        reviews: recentReviews?.map(review => {\n          const reviewer = Array.isArray(review.reviewer) ? review.reviewer[0] : review.reviewer;\n          const reviewee = Array.isArray(review.reviewee) ? review.reviewee[0] : review.reviewee;\n          \n          return {\n            id: review.id,\n            rating: review.rating,\n            comment: review.comment,\n            reviewer: reviewer?.full_name || 'Anonymous',\n            reviewee: reviewee?.full_name || 'Unknown',\n            time: new Date(review.created_at).toLocaleString(),\n          };\n        }) || [],\n      }\n    }\n\n    return NextResponse.json(stats)\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":5233},"app/api/booking/assign-driver/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// POST /api/booking/assign-driver - Assign a driver to a ride request\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { ride_id, driver_id } = body\n\n    if (!ride_id || !driver_id) {\n      return NextResponse.json({ error: 'Ride ID and Driver ID are required' }, { status: 400 })\n    }\n\n    // Get current ride details\n    const { data: ride, error: rideError } = await supabase\n      .from('rides')\n      .select('passenger_id, driver_id, status')\n      .eq('id', ride_id)\n      .single()\n\n    if (rideError || !ride) {\n      return NextResponse.json({ error: 'Ride not found' }, { status: 404 })\n    }\n\n    // Verify user is the passenger who created this ride or admin\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    const canAssign = \n      profile?.user_type === 'admin' ||\n      ride.passenger_id === user.id\n\n    if (!canAssign) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    // Check if ride is in correct status for assignment\n    if (ride.status !== 'requested') {\n      return NextResponse.json({ \n        error: 'Ride cannot be assigned. Current status: ' + ride.status \n      }, { status: 400 })\n    }\n\n    // Check if driver is available\n    const { data: driver, error: driverError } = await supabase\n      .from('driver_profiles')\n      .select('status, is_available, documents_verified, background_check_verified')\n      .eq('user_id', driver_id)\n      .single()\n\n    if (driverError || !driver) {\n      return NextResponse.json({ error: 'Driver not found' }, { status: 404 })\n    }\n\n    if (driver.status !== 'online' || !driver.is_available) {\n      return NextResponse.json({ error: 'Driver is not available' }, { status: 400 })\n    }\n\n    if (!driver.documents_verified || !driver.background_check_verified) {\n      return NextResponse.json({ error: 'Driver is not verified' }, { status: 400 })\n    }\n\n    // Start transaction: Assign driver to ride and update driver availability\n    const { data: updatedRide, error: assignError } = await supabase\n      .from('rides')\n      .update({\n        driver_id: driver_id,\n        status: 'assigned',\n        assigned_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', ride_id)\n      .eq('status', 'requested') // Double-check status hasn't changed\n      .select(`\n        *,\n        passenger:profiles!rides_passenger_id_fkey(full_name, phone),\n        driver:profiles!rides_driver_id_fkey(full_name, phone, avatar_url)\n      `)\n      .single()\n\n    if (assignError) {\n      console.error('Error assigning driver:', assignError)\n      return NextResponse.json({ error: 'Failed to assign driver' }, { status: 500 })\n    }\n\n    // Update driver availability\n    const { error: driverUpdateError } = await supabase\n      .from('driver_profiles')\n      .update({\n        is_available: false,\n        status: 'busy',\n        updated_at: new Date().toISOString()\n      })\n      .eq('user_id', driver_id)\n\n    if (driverUpdateError) {\n      console.error('Error updating driver status:', driverUpdateError)\n      // Note: This could lead to inconsistent state, but the ride assignment succeeded\n    }\n\n    // TODO: Send notifications to driver about new ride assignment\n    // TODO: Send notification to passenger that driver has been assigned\n\n    return NextResponse.json({\n      ride: updatedRide,\n      message: 'Driver successfully assigned to ride'\n    })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":4085},"app/api/booking/search-drivers/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// POST /api/booking/search-drivers - Search for available drivers for a ride request\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Verify user is a passenger\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    if (profile?.user_type !== 'passenger') {\n      return NextResponse.json({ error: 'Only passengers can search for drivers' }, { status: 403 })\n    }\n\n    const body = await request.json()\n    const { pickup_location, radius = 10 } = body\n\n    if (!pickup_location || !pickup_location.lat || !pickup_location.lng) {\n      return NextResponse.json({ error: 'Pickup location is required' }, { status: 400 })\n    }\n\n    // Find available drivers within radius using PostGIS\n    const { data: drivers, error } = await supabase\n      .from('driver_profiles')\n      .select(`\n        user_id,\n        vehicle_make,\n        vehicle_model,\n        vehicle_year,\n        vehicle_color,\n        rating,\n        total_rides,\n        current_location,\n        profiles!driver_profiles_user_id_fkey(full_name, avatar_url)\n      `)\n      .eq('is_available', true)\n      .eq('documents_verified', true)\n      .not('current_location', 'is', null)\n      .limit(10)\n\n    if (error) {\n      console.error('Error fetching drivers:', error)\n      return NextResponse.json({ error: 'Failed to search drivers' }, { status: 500 })\n    }\n\n    // Filter drivers by distance and calculate ETA\n    const availableDrivers = drivers\n      ?.map(driver => {\n        if (!driver.current_location) return null\n\n        try {\n          // Parse PostGIS POINT format\n          const locationStr = driver.current_location.replace('POINT(', '').replace(')', '')\n          const [driverLng, driverLat] = locationStr.split(' ').map(Number)\n          \n          const distance = calculateDistance(\n            pickup_location.lat, pickup_location.lng,\n            driverLat, driverLng\n          )\n          \n          // Only include drivers within radius\n          if (distance > radius) return null\n\n          // Calculate estimated arrival time (assuming 30 km/h average speed in city)\n          const estimatedArrivalMinutes = Math.ceil(distance / 30 * 60)\n\n          const profile = Array.isArray(driver.profiles) ? driver.profiles[0] : driver.profiles;\n          \n          return {\n            id: driver.user_id,\n            name: profile?.full_name || 'Unknown Driver',\n            avatar_url: profile?.avatar_url || '',\n            rating: driver.rating,\n            total_rides: driver.total_rides,\n            vehicle: {\n              make: driver.vehicle_make,\n              model: driver.vehicle_model,\n              year: driver.vehicle_year,\n              color: driver.vehicle_color,\n            },\n            location: {\n              lat: driverLat,\n              lng: driverLng\n            },\n            heading: null, // Will be added later when tracking is implemented\n            distance_km: Math.round(distance * 100) / 100,\n            estimated_arrival_minutes: estimatedArrivalMinutes,\n            last_location_update: new Date().toISOString() // Current timestamp for now\n          }\n        } catch {\n          return null\n        }\n      })\n      .filter(Boolean) // Remove null entries\n      .sort((a, b) => a!.distance_km - b!.distance_km) // Sort by closest first\n\n    return NextResponse.json({ \n      drivers: availableDrivers,\n      search_location: pickup_location,\n      radius_km: radius,\n      total_found: availableDrivers?.length || 0\n    })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// Helper function to calculate distance between two points (Haversine formula)\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371 // Earth's radius in kilometers\n  const dLat = (lat2 - lat1) * Math.PI / 180\n  const dLng = (lng2 - lng1) * Math.PI / 180\n  const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n    Math.sin(dLng/2) * Math.sin(dLng/2)\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n  return R * c\n}","size_bytes":4634},"app/api/drivers/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/drivers/[id] - Get specific driver profile\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Fetch driver profile with user details\n    const { data: driver, error } = await supabase\n      .from('driver_profiles')\n      .select(`\n        *,\n        user:profiles!driver_profiles_user_id_fkey(full_name, phone, avatar_url, email)\n      `)\n      .eq('user_id', params.id)\n      .single()\n\n    if (error) {\n      return NextResponse.json({ error: 'Driver not found' }, { status: 404 })\n    }\n\n    // Get user profile to check permissions\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    // Check authorization - driver can view own profile, admin can view all\n    const isAuthorized = \n      profile?.user_type === 'admin' ||\n      driver.user_id === user.id\n\n    if (!isAuthorized) {\n      // For passengers, return limited public info only\n      return NextResponse.json({\n        driver: {\n          user_id: driver.user_id,\n          full_name: driver.user.full_name,\n          avatar_url: driver.user.avatar_url,\n          rating: driver.rating,\n          total_rides: driver.total_rides,\n          vehicle_make: driver.vehicle_make,\n          vehicle_model: driver.vehicle_model,\n          vehicle_color: driver.vehicle_color,\n          vehicle_plate: driver.vehicle_plate,\n          status: driver.status\n        }\n      })\n    }\n\n    return NextResponse.json({ driver })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// PATCH /api/drivers/[id] - Update driver profile or status\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const body = await request.json()\n\n    // Get user profile to check permissions\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    // Check authorization - only the driver themselves or admin can update\n    const canUpdate = \n      profile?.user_type === 'admin' ||\n      params.id === user.id\n\n    if (!canUpdate) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    // Prepare update data\n    const updateData: any = { updated_at: new Date().toISOString() }\n\n    // Handle different types of updates\n    const {\n      status,\n      is_available,\n      current_location,\n      current_heading,\n      vehicle_make,\n      vehicle_model,\n      vehicle_year,\n      vehicle_color,\n      vehicle_plate,\n      license_number,\n      license_expiry\n    } = body\n\n    // Status updates (online/offline/busy)\n    if (status && ['online', 'offline', 'busy'].includes(status)) {\n      updateData.status = status\n      if (status === 'online') {\n        updateData.is_available = true\n      } else if (status === 'offline') {\n        updateData.is_available = false\n      }\n    }\n\n    // Availability toggle\n    if (typeof is_available === 'boolean') {\n      updateData.is_available = is_available\n    }\n\n    // Location updates\n    if (current_location && current_location.lat && current_location.lng) {\n      updateData.current_location = `POINT(${current_location.lng} ${current_location.lat})`\n      updateData.last_location_update = new Date().toISOString()\n    }\n\n    if (typeof current_heading === 'number') {\n      updateData.current_heading = current_heading\n    }\n\n    // Vehicle information updates (only by driver or admin)\n    if (vehicle_make) updateData.vehicle_make = vehicle_make\n    if (vehicle_model) updateData.vehicle_model = vehicle_model\n    if (vehicle_year) updateData.vehicle_year = vehicle_year\n    if (vehicle_color) updateData.vehicle_color = vehicle_color\n    if (vehicle_plate) updateData.vehicle_plate = vehicle_plate\n\n    // License information (admin only for verification)\n    if (profile?.user_type === 'admin') {\n      if (license_number) updateData.license_number = license_number\n      if (license_expiry) updateData.license_expiry = license_expiry\n    }\n\n    // Update the driver profile\n    const { data: updatedDriver, error: updateError } = await supabase\n      .from('driver_profiles')\n      .update(updateData)\n      .eq('user_id', params.id)\n      .select(`\n        *,\n        user:profiles!driver_profiles_user_id_fkey(full_name, phone, avatar_url, email)\n      `)\n      .single()\n\n    if (updateError) {\n      console.error('Error updating driver:', updateError)\n      return NextResponse.json({ error: 'Failed to update driver profile' }, { status: 500 })\n    }\n\n    return NextResponse.json({ driver: updatedDriver })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":5525},"app/api/rides/[id]/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/rides/[id] - Get specific ride details\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get user profile to determine role\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    // Fetch ride with passenger and driver details\n    const { data: ride, error } = await supabase\n      .from('rides')\n      .select(`\n        *,\n        passenger:profiles!rides_passenger_id_fkey(full_name, phone, avatar_url),\n        driver:profiles!rides_driver_id_fkey(full_name, phone, avatar_url)\n      `)\n      .eq('id', params.id)\n      .single()\n\n    if (error) {\n      return NextResponse.json({ error: 'Ride not found' }, { status: 404 })\n    }\n\n    // Check authorization - only passenger, driver, or admin can view\n    const isAuthorized = \n      profile?.user_type === 'admin' ||\n      ride.passenger_id === user.id ||\n      ride.driver_id === user.id\n\n    if (!isAuthorized) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    return NextResponse.json({ ride })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// PATCH /api/rides/[id] - Update ride status and details\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const body = await request.json()\n    const { status, driver_notes, cancellation_reason } = body\n\n    // Get current ride to check permissions\n    const { data: currentRide, error: fetchError } = await supabase\n      .from('rides')\n      .select('passenger_id, driver_id, status')\n      .eq('id', params.id)\n      .single()\n\n    if (fetchError) {\n      return NextResponse.json({ error: 'Ride not found' }, { status: 404 })\n    }\n\n    // Get user profile\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type')\n      .eq('id', user.id)\n      .single()\n\n    // Check if user can update this ride\n    const canUpdate = \n      profile?.user_type === 'admin' ||\n      currentRide.passenger_id === user.id ||\n      currentRide.driver_id === user.id\n\n    if (!canUpdate) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    // Prepare update data\n    const updateData: any = { updated_at: new Date().toISOString() }\n\n    // Handle status changes with timestamps\n    if (status && status !== currentRide.status) {\n      updateData.status = status\n      \n      switch (status) {\n        case 'assigned':\n          updateData.assigned_at = new Date().toISOString()\n          break\n        case 'in_progress':\n          updateData.pickup_at = new Date().toISOString()\n          break\n        case 'completed':\n          updateData.dropoff_at = new Date().toISOString()\n          break\n        case 'canceled':\n          updateData.canceled_at = new Date().toISOString()\n          updateData.canceled_by = user.id\n          if (cancellation_reason) {\n            updateData.cancellation_reason = cancellation_reason\n          }\n          break\n      }\n    }\n\n    // Add driver notes if provided (only drivers can add these)\n    if (driver_notes && currentRide.driver_id === user.id) {\n      updateData.driver_notes = driver_notes\n    }\n\n    // Update the ride\n    const { data: updatedRide, error: updateError } = await supabase\n      .from('rides')\n      .update(updateData)\n      .eq('id', params.id)\n      .select()\n      .single()\n\n    if (updateError) {\n      console.error('Error updating ride:', updateError)\n      return NextResponse.json({ error: 'Failed to update ride' }, { status: 500 })\n    }\n\n    return NextResponse.json({ ride: updatedRide })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}\n\n// DELETE /api/rides/[id] - Cancel ride (soft delete by updating status)\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const supabase = createClient()\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get current ride to check permissions\n    const { data: currentRide, error: fetchError } = await supabase\n      .from('rides')\n      .select('passenger_id, driver_id, status')\n      .eq('id', params.id)\n      .single()\n\n    if (fetchError) {\n      return NextResponse.json({ error: 'Ride not found' }, { status: 404 })\n    }\n\n    // Check if ride can be cancelled\n    if (['completed', 'canceled'].includes(currentRide.status)) {\n      return NextResponse.json({ error: 'Cannot cancel completed or already canceled ride' }, { status: 400 })\n    }\n\n    // Check if user can cancel this ride\n    const canCancel = \n      currentRide.passenger_id === user.id ||\n      currentRide.driver_id === user.id\n\n    if (!canCancel) {\n      return NextResponse.json({ error: 'Access denied' }, { status: 403 })\n    }\n\n    // Update ride to canceled status\n    const { data: canceledRide, error: updateError } = await supabase\n      .from('rides')\n      .update({\n        status: 'canceled',\n        canceled_at: new Date().toISOString(),\n        canceled_by: user.id,\n        updated_at: new Date().toISOString()\n      })\n      .eq('id', params.id)\n      .select()\n      .single()\n\n    if (updateError) {\n      console.error('Error canceling ride:', updateError)\n      return NextResponse.json({ error: 'Failed to cancel ride' }, { status: 500 })\n    }\n\n    return NextResponse.json({ ride: canceledRide })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":6566},"app/api/rides/history/route.ts":{"content":"import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@/lib/supabase/server'\n\n// GET /api/rides/history - Get ride history for the current user\nexport async function GET(request: NextRequest) {\n  try {\n    const supabase = createClient()\n    const { searchParams } = new URL(request.url)\n    const limit = parseInt(searchParams.get('limit') || '10')\n    const offset = parseInt(searchParams.get('offset') || '0')\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    // Get user profile to check user type\n    const { data: profile } = await supabase\n      .from('profiles')\n      .select('user_type, full_name')\n      .eq('id', user.id)\n      .single()\n\n    if (!profile) {\n      return NextResponse.json({ error: 'User profile not found' }, { status: 404 })\n    }\n\n    let rides;\n    \n    if (profile.user_type === 'passenger') {\n      // Get rides as passenger\n      const { data, error } = await supabase\n        .from('rides')\n        .select(`\n          id,\n          pickup_location,\n          dropoff_location,\n          fare,\n          status,\n          created_at,\n          distance_km,\n          estimated_duration,\n          actual_duration,\n          driver:profiles!rides_driver_id_fkey(full_name, avatar_url),\n          driver_profiles!rides_driver_id_fkey(rating, vehicle_make, vehicle_model, vehicle_color)\n        `)\n        .eq('passenger_id', user.id)\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n\n      if (error) {\n        console.error('Error fetching passenger rides:', error)\n        return NextResponse.json({ error: 'Failed to fetch ride history' }, { status: 500 })\n      }\n\n      rides = data\n    } else if (profile.user_type === 'driver') {\n      // Get rides as driver\n      const { data, error } = await supabase\n        .from('rides')\n        .select(`\n          id,\n          pickup_location,\n          dropoff_location,\n          fare,\n          status,\n          created_at,\n          distance_km,\n          estimated_duration,\n          actual_duration,\n          passenger:profiles!rides_passenger_id_fkey(full_name, avatar_url)\n        `)\n        .eq('driver_id', user.id)\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1)\n\n      if (error) {\n        console.error('Error fetching driver rides:', error)\n        return NextResponse.json({ error: 'Failed to fetch ride history' }, { status: 500 })\n      }\n\n      rides = data\n    } else {\n      return NextResponse.json({ error: 'Invalid user type' }, { status: 400 })\n    }\n\n    // Format the response\n    const formattedRides = rides?.map(ride => {\n      const driver = profile.user_type === 'passenger' && 'driver' in ride\n        ? (Array.isArray(ride.driver) ? ride.driver[0] : ride.driver)\n        : null\n      const passenger = profile.user_type === 'driver' && 'passenger' in ride\n        ? (Array.isArray(ride.passenger) ? ride.passenger[0] : ride.passenger)\n        : null\n      const driverProfile = profile.user_type === 'passenger' && 'driver_profiles' in ride\n        ? (Array.isArray(ride.driver_profiles) ? ride.driver_profiles[0] : ride.driver_profiles)\n        : null\n\n      return {\n        id: ride.id,\n        from: ride.pickup_location,\n        to: ride.dropoff_location,\n        amount: parseFloat(ride.fare),\n        status: ride.status,\n        date: new Date(ride.created_at).toLocaleDateString(),\n        time: new Date(ride.created_at).toLocaleTimeString(),\n        distance: ride.distance_km ? `${ride.distance_km} km` : 'N/A',\n        duration: ride.actual_duration ? `${ride.actual_duration} min` : \n                 ride.estimated_duration ? `~${ride.estimated_duration} min` : 'N/A',\n        // Include counterpart details\n        ...(profile.user_type === 'passenger' && driver && {\n          driverName: driver.full_name || 'Unknown Driver',\n          driverAvatar: driver.avatar_url,\n          driverRating: driverProfile?.rating || 5.0,\n          vehicle: driverProfile ? \n            `${driverProfile.vehicle_make} ${driverProfile.vehicle_model} (${driverProfile.vehicle_color})` : \n            'Vehicle info unavailable'\n        }),\n        ...(profile.user_type === 'driver' && passenger && {\n          passengerName: passenger.full_name || 'Unknown Passenger',\n          passengerAvatar: passenger.avatar_url,\n        })\n      }\n    }) || []\n\n    return NextResponse.json({ \n      rides: formattedRides,\n      userType: profile.user_type,\n      totalCount: formattedRides.length,\n      hasMore: formattedRides.length === limit\n    })\n  } catch (error) {\n    console.error('Unexpected error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}","size_bytes":4912},"app/auth/driver/login/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Mail } from \"lucide-react\"\nimport { createClient } from '@/lib/supabase/client'\n\nimport { Button } from \"@/components/ui/buttons\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport AuthLayout from \"@/components/auth/AuthLayout\"\n\nexport default function DriverLogin() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    email: \"\",\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithOtp({\n        email: formData.email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback?next=/driver-profile`,\n          data: {\n            user_type_intent: 'driver' // Track login intent for verification\n          }\n        }\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      setSuccess(\"Check your email for a secure login link!\")\n    } catch (err) {\n      setError(\"An unexpected error occurred\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthLayout title=\"Driver Sign In\" subtitle=\"Enter your email to receive a secure login link\">\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"pl-9\"\n              value={formData.email}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded\">\n            {success}\n          </div>\n        )}\n\n        <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n          {loading ? \"Sending Login Link...\" : \"Send Secure Login Link\"}\n        </Button>\n\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Want to become a driver?{\" \"}\n            <Link href=\"/auth/driver/register\" className=\"text-orange-600 hover:underline\">\n              Sign up\n            </Link>\n          </p>\n        </div>\n      </form>\n    </AuthLayout>\n  )\n}\n\n","size_bytes":2954},"app/auth/driver/register/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Mail, User, Phone, FileText, Car } from \"lucide-react\"\nimport { createClient } from '@/lib/supabase/client'\n\nimport { Button } from \"@/components/ui/buttons\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport AuthLayout from \"@/components/auth/AuthLayout\"\n\nexport default function DriverRegister() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    driversLicense: null,\n    insurance: null,\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n\n  const handleFileChange = (e, field) => {\n    const file = e.target.files[0]\n    setFormData((prev) => ({ ...prev, [field]: file }))\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    // Validation for document uploads (note: this is UI-only for now)\n    if (!formData.driversLicense || !formData.insurance) {\n      setError(\"Please upload both driver's license and insurance documents\")\n      setLoading(false)\n      return\n    }\n\n    try {\n      const supabase = createClient()\n\n      // Create auth user with email OTP - DO NOT include user_type in metadata for security\n      const { error } = await supabase.auth.signInWithOtp({\n        email: formData.email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback?next=/main`,\n          data: {\n            full_name: formData.name,\n            phone: formData.phone,\n            registration_type: 'driver',\n            is_new_user: true,\n            // Note: File uploads will be handled after email verification\n            has_documents: true\n          }\n        }\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      setSuccess(\"Registration initiated! Please check your email for a secure registration link. Your driver application will be reviewed after email verification.\")\n      // Clear the form\n      setFormData({ name: \"\", email: \"\", phone: \"\", driversLicense: null, insurance: null })\n    } catch (err) {\n      setError(\"An unexpected error occurred\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthLayout title=\"Become a Driver\" subtitle=\"Enter your details and documents to receive a secure registration link\">\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Full Name</Label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"name\"\n              placeholder=\"Enter your full name\"\n              className=\"pl-9\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"pl-9\"\n              value={formData.email}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"phone\">Phone Number</Label>\n          <div className=\"relative\">\n            <Phone className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              placeholder=\"Enter your phone number\"\n              className=\"pl-9\"\n              value={formData.phone}\n              onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"driversLicense\">Driver's License</Label>\n          <div className=\"relative\">\n            <FileText className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"driversLicense\"\n              type=\"file\"\n              accept=\"image/*,.pdf\"\n              className=\"pl-9\"\n              onChange={(e) => handleFileChange(e, \"driversLicense\")}\n              required\n            />\n          </div>\n          <p className=\"text-xs text-gray-500\">Upload a clear photo or scan of your driver's license</p>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"insurance\">Car Insurance</Label>\n          <div className=\"relative\">\n            <Car className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"insurance\"\n              type=\"file\"\n              accept=\"image/*,.pdf\"\n              className=\"pl-9\"\n              onChange={(e) => handleFileChange(e, \"insurance\")}\n              required\n            />\n          </div>\n          <p className=\"text-xs text-gray-500\">Upload your current car insurance documentation</p>\n        </div>\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded\">\n            {success}\n          </div>\n        )}\n\n        <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n          {loading ? \"Sending Registration Link...\" : \"Send Driver Registration Link\"}\n        </Button>\n\n        <p className=\"text-sm text-center text-gray-600\">\n          Already have an account?{\" \"}\n          <Link href=\"/auth/driver/login\" className=\"text-orange-600 hover:underline\">\n            Sign in\n          </Link>\n        </p>\n      </form>\n    </AuthLayout>\n  )\n}\n\n","size_bytes":6173},"app/auth/passenger/login/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Mail } from \"lucide-react\"\nimport { createClient } from '@/lib/supabase/client'\n\nimport { Button } from \"@/components/ui/buttons\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport AuthLayout from \"@/components/auth/AuthLayout\"\n\nexport default function PassengerLogin() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    email: \"\",\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    try {\n      const supabase = createClient()\n      const { error } = await supabase.auth.signInWithOtp({\n        email: formData.email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback?next=/main`,\n          data: {\n            user_type_intent: 'passenger' // Track login intent for verification\n          }\n        }\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      setSuccess(\"Check your email for a secure login link!\")\n    } catch (err) {\n      setError(\"An unexpected error occurred\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthLayout title=\"Welcome Back\" subtitle=\"Enter your email to receive a secure login link\">\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"pl-9\"\n              value={formData.email}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded\">\n            {success}\n          </div>\n        )}\n\n        <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n          {loading ? \"Sending Login Link...\" : \"Send Secure Login Link\"}\n        </Button>\n\n        <div className=\"text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Don't have an account?{\" \"}\n            <Link href=\"/auth/passenger/register\" className=\"text-orange-600 hover:underline\">\n              Sign up\n            </Link>\n          </p>\n        </div>\n      </form>\n    </AuthLayout>\n  )\n}\n\n","size_bytes":2949},"app/auth/passenger/register/page.js":{"content":"\"use client\"\n\nimport { useState } from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport Link from \"next/link\"\nimport { Mail, User, Phone } from \"lucide-react\"\nimport { createClient } from '@/lib/supabase/client'\n\nimport { Button } from \"@/components/ui/buttons\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport AuthLayout from \"@/components/auth/AuthLayout\"\n\nexport default function PassengerRegister() {\n  const router = useRouter()\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n  })\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(\"\")\n  const [success, setSuccess] = useState(\"\")\n\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    setLoading(true)\n    setError(\"\")\n    setSuccess(\"\")\n\n    try {\n      const supabase = createClient()\n\n      // Create auth user with email OTP - DO NOT include user_type in metadata for security  \n      const { error } = await supabase.auth.signInWithOtp({\n        email: formData.email,\n        options: {\n          emailRedirectTo: `${window.location.origin}/auth/callback?next=/main`,\n          data: {\n            full_name: formData.name,\n            phone: formData.phone,\n            registration_type: 'passenger',\n            is_new_user: true\n          }\n        }\n      })\n\n      if (error) {\n        setError(error.message)\n        return\n      }\n\n      setSuccess(\"Registration initiated! Please check your email for a secure registration link to complete your account setup.\")\n      // Clear the form\n      setFormData({ name: \"\", email: \"\", phone: \"\" })\n    } catch (err) {\n      setError(\"An unexpected error occurred\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthLayout title=\"Create Your Account\" subtitle=\"Enter your details to receive a secure registration link\">\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"name\">Full Name</Label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"name\"\n              placeholder=\"Enter your full name\"\n              className=\"pl-9\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"pl-9\"\n              value={formData.email}\n              onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"phone\">Phone Number</Label>\n          <div className=\"relative\">\n            <Phone className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              placeholder=\"Enter your phone number\"\n              className=\"pl-9\"\n              value={formData.phone}\n              onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n              required\n            />\n          </div>\n        </div>\n\n\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        {success && (\n          <div className=\"bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded\">\n            {success}\n          </div>\n        )}\n\n        <Button type=\"submit\" className=\"w-full\" disabled={loading}>\n          {loading ? \"Sending Registration Link...\" : \"Send Registration Link\"}\n        </Button>\n\n        <p className=\"text-sm text-center text-gray-600\">\n          Already have an account?{\" \"}\n          <Link href=\"/auth/passenger/login\" className=\"text-orange-600 hover:underline\">\n            Sign in\n          </Link>\n        </p>\n      </form>\n    </AuthLayout>\n  )\n}\n\n","size_bytes":4334}},"version":1}